{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(require(\"inputmask\"), require(\"nouislider\"), require(\"sortablejs\"), require(\"bootstrap-slider\"));else if (typeof define === 'function' && define.amd) define(\"surveyjs-widgets\", [\"inputmask\", \"nouislider\", \"sortablejs\", \"bootstrap-slider\"], factory);else if (typeof exports === 'object') exports[\"surveyjs-widgets\"] = factory(require(\"inputmask\"), require(\"nouislider\"), require(\"sortablejs\"), require(\"bootstrap-slider\"));else root[\"surveyjs-widgets\"] = factory(root[\"Inputmask\"], root[\"noUiSlider\"], root[\"Sortable\"], root[\"Slider\"]);\n})(typeof self !== 'undefined' ? self : this, function (__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_15__) {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 21);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n\n      function escValue(val) {\n        if (typeof val === \"string\") {\n          return (val || \"\").replace(/(['])/g, \"\\\\$1\");\n        }\n\n        return val;\n      }\n\n      function init(Survey, $) {\n        $ = $ || window.$;\n        var widget = {\n          className: \"iradio_square-blue\",\n          checkboxClass: \"iradio_square-blue\",\n          radioClass: \"iradio_square-blue\",\n          name: \"icheck\",\n          widgetIsLoaded: function () {\n            return typeof $ == \"function\" && !!$.fn.iCheck;\n          },\n          isFit: function (question) {\n            var t = question.getType();\n            return t === \"radiogroup\" || t === \"checkbox\" || t === \"matrix\";\n          },\n          isDefaultRender: true,\n          afterRender: function (question, el) {\n            var rootWidget = this;\n            var $el = $(el);\n            $el.find(\".sv-item__decorator\").hide();\n            $el.find(\"input\").data({\n              iCheck: undefined\n            });\n\n            function getIndexByValue(arr, value) {\n              if (!Array.isArray(arr)) return -1;\n\n              for (var i = 0; i < arr.length; i++) {\n                if (arr[i] == value) return i;\n                if (!!arr[i] && arr[i].toString().toLowerCase() == value) return i;\n              }\n\n              return -1;\n            }\n\n            var frozeUpdating = false;\n\n            var makeChoicesICheck = function () {\n              var inputs = $el.find(\"input\");\n              inputs.iCheck({\n                checkboxClass: question.checkboxClass || rootWidget.checkboxClass || rootWidget.className,\n                radioClass: question.radioClass || rootWidget.radioClass || rootWidget.className\n              });\n              inputs.on(\"ifChecked\", function (event) {\n                if (frozeUpdating) return;\n\n                if (question.getType() === \"matrix\") {\n                  question.generatedVisibleRows.forEach(function (row, index, rows) {\n                    if (row.fullName === event.target.name) {\n                      row.value = event.target.value;\n                    }\n                  });\n                } else if (question.getType() === \"checkbox\") {\n                  var oldValue = question.value || [];\n                  var index = getIndexByValue(oldValue, event.target.value);\n\n                  if (index === -1) {\n                    question.value = oldValue.concat([event.target.value]);\n                  }\n                } else {\n                  question.value = event.target.value;\n                }\n              });\n              inputs.on(\"ifUnchecked\", function (event) {\n                if (frozeUpdating) return;\n\n                if (question.getType() === \"checkbox\") {\n                  var oldValue = (question.value || []).slice();\n                  var index = getIndexByValue(oldValue, event.target.value);\n\n                  if (index >= 0) {\n                    oldValue.splice(index, 1);\n                    question.value = oldValue;\n                  }\n                }\n              });\n            };\n\n            function uncheckIcheck(cEl) {\n              cEl.iCheck(\"uncheck\");\n              cEl[0].parentElement.classList.remove(\"checked\");\n            }\n\n            var select = function () {\n              frozeUpdating = true;\n\n              if (question.getType() !== \"matrix\") {\n                var values = question.value;\n\n                if (!Array.isArray(values)) {\n                  values = [values];\n                }\n\n                if (question.getType() == \"checkbox\") {\n                  var qValue = question.value;\n                  question.visibleChoices.forEach(function (item) {\n                    var inEl = $el.find(\"input[value='\" + escValue(item.value) + \"']\");\n                    if (!inEl) return;\n                    var isChecked = getIndexByValue(qValue, item.value) > -1;\n\n                    if (isChecked) {\n                      inEl.iCheck(\"check\");\n                    } else {\n                      var cEl = inEl[0];\n                      var wasChecked = !!cEl[\"checked\"];\n\n                      if (wasChecked) {\n                        inEl.removeAttr(\"checked\");\n                        if (!inEl.parent().hasClass(\"checked\")) setTimeout(function () {\n                          uncheckIcheck(inEl);\n                        });else uncheckIcheck(inEl);\n                      }\n                    }\n                  });\n                } else {\n                  values.forEach(function (value) {\n                    $el.find(\"input[value='\" + escValue(value) + \"']\").iCheck(\"check\");\n                  });\n                }\n              } else {\n                question.generatedVisibleRows.forEach(function (row, index, rows) {\n                  if (row.value) {\n                    $(el).find(\"input[name='\" + row.fullName + \"'][value='\" + escValue(row.value) + \"']\").iCheck(\"check\");\n                  }\n                });\n              }\n\n              frozeUpdating = false;\n            };\n\n            makeChoicesICheck();\n\n            question.visibleChoicesChangedCallback = function () {\n              makeChoicesICheck();\n              $el.find(\".sv-item__decorator\").hide();\n            };\n\n            question.valueChangedCallback = select;\n            select();\n          },\n          willUnmount: function (question, el) {\n            var $el = $(el);\n            $el.find(\"input\").iCheck(\"destroy\");\n            question.visibleChoicesChangedCallback = null;\n          }\n        };\n        Survey.JsonObject.metaData.addProperty(\"radiogroup\", \"radioClass\");\n        Survey.JsonObject.metaData.addProperty(\"checkbox\", \"checkboxClass\");\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"type\");\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey, window.$);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"default\"] = init;\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n\n      function init(Survey, $) {\n        $ = $ || window.$;\n        var widget = {\n          activatedBy: \"property\",\n          name: \"select2\",\n          widgetIsLoaded: function () {\n            return typeof $ == \"function\" && !!$.fn.select2;\n          },\n          isFit: function (question) {\n            if (widget.activatedBy == \"property\") return question[\"renderAs\"] === \"select2\" && question.getType() === \"dropdown\";\n            if (widget.activatedBy == \"type\") return typeof question.getType() === \"dropdown\";\n            if (widget.activatedBy == \"customtype\") return question.getType() === \"select2\";\n            return false;\n          },\n          activatedByChanged: function (activatedBy) {\n            if (!this.widgetIsLoaded()) return;\n            widget.activatedBy = activatedBy;\n            Survey.JsonObject.metaData.removeProperty(\"dropdown\", \"renderAs\");\n\n            if (activatedBy == \"property\") {\n              Survey.JsonObject.metaData.addProperty(\"dropdown\", {\n                name: \"renderAs\",\n                default: \"standart\",\n                choices: [\"select2\", \"standart\"]\n              });\n              Survey.JsonObject.metaData.addProperty(\"dropdown\", {\n                dependsOn: \"renderAs\",\n                name: \"select2Config\",\n                visibleIf: function (obj) {\n                  return obj.renderAs == \"select2\";\n                }\n              });\n            }\n\n            if (activatedBy == \"customtype\") {\n              Survey.JsonObject.metaData.addClass(\"select2\", [], null, \"dropdown\");\n              Survey.JsonObject.metaData.addProperty(\"select2\", {\n                name: \"select2Config\",\n                default: null\n              });\n            }\n          },\n          htmlTemplate: \"<div><select style='width: 100%;'></select><textarea></textarea></div>\",\n          afterRender: function (question, el) {\n            var select2Config = question.select2Config;\n            var settings = select2Config && typeof select2Config == \"string\" ? JSON.parse(select2Config) : select2Config;\n            if (!settings) settings = {};\n            var $el = $(el).is(\"select\") ? $(el) : $(el).find(\"select\");\n            var $otherElement = $(el).find(\"textarea\");\n            $otherElement.addClass(question.cssClasses.other);\n            $otherElement.bind(\"input propertychange\", function () {\n              if (isSettingValue) return;\n              question.comment = $otherElement.val();\n            });\n\n            var updateComment = function () {\n              $otherElement.val(question.comment);\n\n              if (question.isOtherSelected) {\n                $otherElement.show();\n              } else {\n                $otherElement.hide();\n              }\n            };\n\n            var isSettingValue = false;\n\n            var updateValueHandler = function () {\n              if (isSettingValue) return;\n              isSettingValue = true;\n\n              if ($el.find(\"option[value='\" + question.value + \"']\").length) {\n                $el.val(question.value).trigger(\"change\");\n              } else {\n                var newOption = new Option(question.value, //TODO if question value is object then need to improve\n                question.value, true, true);\n                $el.append(newOption).trigger(\"change\");\n              }\n\n              updateComment();\n              isSettingValue = false;\n            };\n\n            var updateChoices = function () {\n              $el.select2().empty();\n\n              if (!settings.placeholder && question.showOptionsCaption) {\n                settings.placeholder = question.optionsCaption;\n                settings.allowClear = true;\n              }\n\n              if (!settings.theme) {\n                settings.theme = \"classic\";\n              }\n\n              settings.disabled = question.isReadOnly;\n\n              if (settings.ajax) {\n                $el.select2(settings);\n                question.keepIncorrectValues = true;\n              } else {\n                settings.data = question.visibleChoices.map(function (choice) {\n                  return {\n                    id: choice.value,\n                    text: choice.text\n                  };\n                });\n                $el.select2(settings);\n              } // fixed width accrording to https://stackoverflow.com/questions/45276778/select2-not-responsive-width-larger-than-container\n\n\n              if (!!el.querySelector(\".select2\")) {\n                el.querySelector(\".select2\").style.width = \"100%\";\n              }\n\n              if (!!el.nextElementSibling) {\n                el.nextElementSibling.style.marginBottom = \"1px\";\n              }\n\n              updateValueHandler();\n            };\n\n            $otherElement.prop(\"disabled\", question.isReadOnly);\n\n            question.readOnlyChangedCallback = function () {\n              $el.prop(\"disabled\", question.isReadOnly);\n              $otherElement.prop(\"disabled\", question.isReadOnly);\n            };\n\n            question.registerFunctionOnPropertyValueChanged(\"visibleChoices\", function () {\n              updateChoices();\n            });\n            updateChoices();\n            $el.on(\"select2:select\", function (e) {\n              question.renderedValue = e.target.value;\n              updateComment();\n            });\n            $el.on(\"select2:unselecting\", function (e) {\n              question.renderedValue = null;\n              updateComment();\n            });\n            question.valueChangedCallback = updateValueHandler;\n            updateValueHandler();\n          },\n          willUnmount: function (question, el) {\n            $(el).find(\"select\").off(\"select2:select\").select2(\"destroy\");\n            question.readOnlyChangedCallback = null;\n          }\n        };\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget);\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey, window.$);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"default\"] = init;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n      /* harmony import */\n\n      var __WEBPACK_IMPORTED_MODULE_0_inputmask__ = __webpack_require__(3);\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_0_inputmask___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_inputmask__);\n\n      function init(Survey) {\n        var widget = {\n          name: \"maskedit\",\n          numericGroupSeparator: \",\",\n          numericAutoGroup: true,\n          numericDigits: 2,\n          numericDigitsOptional: false,\n          numericPlaceholder: \"0\",\n          autoUnmask: true,\n          widgetIsLoaded: function () {\n            return typeof __WEBPACK_IMPORTED_MODULE_0_inputmask___default.a != \"undefined\";\n          },\n          isFit: function (question) {\n            if (question.getType() == \"multipletext\") return true;\n            return question.getType() == \"text\" && (question.inputMask != \"none\" || question.inputFormat);\n          },\n          isDefaultRender: true,\n          activatedByChanged: function (activatedBy) {\n            if (Survey.JsonObject.metaData.findProperty(\"text\", \"inputMask\")) return;\n            var properties = [\"inputFormat\", {\n              name: \"prefix\",\n              visible: false\n            }, {\n              name: \"autoUnmask:boolean\",\n              default: true\n            }, {\n              name: \"inputMask\",\n              default: \"none\",\n              choices: [\"none\", \"datetime\", \"currency\", \"decimal\", \"email\", \"phone\", \"ip\"]\n            }];\n            Survey.JsonObject.metaData.addProperties(\"text\", properties);\n            Survey.JsonObject.metaData.addProperties(\"matrixdropdowncolumn\", properties);\n            Survey.JsonObject.metaData.addProperties(\"multipletextitem\", properties);\n          },\n          applyInputMask: function (surveyElement, el) {\n            var rootWidget = this;\n            var mask = surveyElement.inputMask != \"none\" ? surveyElement.inputMask : surveyElement.inputFormat;\n            var options = {\n              autoUnmask: typeof surveyElement.autoUnmask !== \"undefined\" ? surveyElement.autoUnmask : rootWidget.autoUnmask\n            };\n            if (surveyElement.inputMask != \"none\") options.inputFormat = surveyElement.inputFormat;\n\n            if (surveyElement.inputMask == \"currency\" || surveyElement.inputMask == \"decimal\") {\n              options.groupSeparator = rootWidget.numericGroupSeparator;\n              options.autoGroup = rootWidget.numericAutoGroup;\n            }\n\n            if (surveyElement.inputMask == \"currency\") {\n              options.digits = rootWidget.numericDigits;\n              options.digitsOptional = rootWidget.numericDigitsOptional;\n              options.prefix = surveyElement.prefix || \"\";\n              options.placeholder = rootWidget.numericPlaceholder;\n            } // if (surveyElement.inputMask == \"datetime\") {\n            //   mask = surveyElement.inputFormat;\n            // }\n\n\n            if (surveyElement.inputMask == \"phone\" && !!surveyElement.inputFormat) {\n              mask = surveyElement.inputFormat;\n            }\n\n            __WEBPACK_IMPORTED_MODULE_0_inputmask___default()(mask, options).mask(el);\n\n            el.onblur = function () {\n              if (surveyElement.value === el.inputmask.getemptymask()) {\n                surveyElement.value = \"\";\n              }\n            };\n\n            var customWidgetData = surveyElement.getType() === \"multipletextitem\" ? surveyElement.editorValue.customWidgetData : surveyElement.customWidgetData;\n\n            el.oninput = function () {\n              customWidgetData.isNeedRender = true;\n            };\n\n            var pushValueHandler = function () {\n              if (el.inputmask.isComplete()) {\n                surveyElement.value = options.autoUnmask ? el.inputmask.unmaskedvalue() : el.value;\n              } else {\n                surveyElement.value = null;\n              }\n            };\n\n            el.onfocusout = el.onchange = pushValueHandler;\n\n            var updateHandler = function () {\n              el.value = surveyElement.value === undefined || surveyElement.value === null ? \"\" : surveyElement.value;\n            };\n\n            surveyElement.valueChangedCallback = updateHandler;\n            updateHandler();\n          },\n          afterRender: function (question, el) {\n            if (question.getType() != \"multipletext\") {\n              var input = el.querySelector(\"input\") || el;\n              this.applyInputMask(question, input);\n            } else {\n              for (var i = 0; i < question.items.length; i++) {\n                var item = question.items[i];\n\n                if (item.inputMask != \"none\" || item.inputFormat) {\n                  var input = el.querySelector(\"#\" + item.editor.inputId);\n\n                  if (input) {\n                    this.applyInputMask(item, input);\n                  }\n                }\n              }\n            }\n          },\n          willUnmount: function (question, el) {\n            var input = el.querySelector(\"input\") || el;\n\n            if (!!input && !!input.inputmask) {\n              input.inputmask.remove();\n            }\n          }\n        };\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget);\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"default\"] = init;\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports) {\n      module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n\n      function init(Survey, $) {\n        $ = $ || window.$;\n        var widget = {\n          name: \"barrating\",\n          title: \"Bar rating\",\n          iconName: \"icon-barrating\",\n          widgetIsLoaded: function () {\n            return typeof $ == \"function\" && !!$.fn.barrating;\n          },\n          defaultJSON: {\n            choices: [1, 2, 3, 4, 5]\n          },\n          isFit: function (question) {\n            return question.getType() === \"barrating\";\n          },\n          isDefaultRender: true,\n          activatedByChanged: function (activatedBy) {\n            Survey.JsonObject.metaData.addClass(\"barrating\", [{\n              name: \"hasOther\",\n              visible: false\n            }, {\n              name: \"otherText\",\n              visible: false\n            }, {\n              name: \"optionsCaption\",\n              visible: false\n            }, {\n              name: \"otherErrorText\",\n              visible: false\n            }, {\n              name: \"storeOthersAsComment\",\n              visible: false\n            }, {\n              name: \"renderAs\",\n              visible: false\n            }, {\n              name: \"select2Config\",\n              visible: false\n            }], null, \"dropdown\");\n            Survey.JsonObject.metaData.addProperty(\"barrating\", {\n              name: \"showValues:boolean\",\n              default: false\n            });\n            Survey.JsonObject.metaData.addProperty(\"barrating\", {\n              name: \"ratingTheme\",\n              default: \"css-stars\",\n              choices: [\"fontawesome-stars\", \"css-stars\", \"bars-pill\", \"bars-1to10\", \"bars-movie\", \"bars-reversed\", \"bars-horizontal\", \"fontawesome-stars-o\"]\n            });\n          },\n          afterRender: function (question, el) {\n            var $customSelect;\n            var $questionInput;\n            var contentContainer = $(el).is(\"select\") ? $(el).parent().parent()[0] : $(el).parent()[0];\n\n            var renderCustomSelect = function () {\n              $customSelect = $(\"<select class='sv-widget-select'></select>\");\n              question.visibleChoices.forEach(function (choice) {\n                $customSelect.append('<option value=\"{0}\">{1}</option>'.format(choice.value, choice.text));\n              });\n              $questionInput = $(contentContainer).find('[id=\"{0}\"]'.format(question.inputId));\n              $questionInput.css(\"display\", \"none\");\n              $questionInput.after($customSelect);\n              $customSelect[0].selectedIndex = -1;\n            };\n\n            var removeCustomSelect = function () {\n              $questionInput.css(\"display\", \"\");\n              $customSelect.barrating(\"destroy\");\n              $customSelect.remove();\n            };\n\n            var renderBarrating = function () {\n              $customSelect.barrating(\"show\", {\n                theme: question.ratingTheme,\n                initialRating: question.value,\n                showValues: question.showValues,\n                showSelectedRating: false,\n                readonly: question.isReadOnly,\n                onSelect: function (value, text) {\n                  valueChangingByWidget = true;\n                  question.value = value;\n                  valueChangingByWidget = false;\n                }\n              });\n            };\n\n            renderCustomSelect();\n            renderBarrating();\n            if (!!$customSelect.parents()[0]) $customSelect.parents()[0].style.marginBottom = \"3px\";\n            var valueChangingByWidget = false;\n\n            question.valueChangedCallback = function () {\n              if (!valueChangingByWidget && $(contentContainer).find(\"select.sv-widget-select\")[0].value !== question.value) {\n                $(contentContainer).find(\"select.sv-widget-select\").barrating(\"set\", question.value);\n              }\n            };\n\n            question.__barratingOnPropertyChangedCallback = function (sender, options) {\n              if (options.name == \"ratingTheme\") {\n                $customSelect.barrating(\"destroy\");\n                renderBarrating();\n              }\n            };\n\n            question.onPropertyChanged.add(question.__barratingOnPropertyChangedCallback);\n\n            question.readOnlyChangedCallback = function () {\n              removeCustomSelect();\n              renderCustomSelect();\n              renderBarrating();\n            };\n\n            question.visibleChoicesChangedCallback = function () {\n              renderBarrating();\n            };\n          },\n          willUnmount: function (question, el) {\n            var $contentContainer = $(el).is(\"select\") ? $(el).parent().parent() : $(el).parent();\n            var $el = $contentContainer.find(\"select.sv-widget-select\");\n            $el.barrating(\"destroy\");\n            $el.remove();\n            question.valueChangedCallback = undefined;\n            question.onPropertyChanged.remove(question.__barratingOnPropertyChangedCallback);\n            question.__barratingOnPropertyChangedCallback = undefined;\n          },\n          pdfQuestionType: \"dropdown\"\n        };\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey, window.$);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"default\"] = init;\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n\n      function init(Survey, $) {\n        $ = $ || window.$;\n\n        if (!$.fn.bootstrapDP && !!$.fn.datepicker && !!$.fn.datepicker.noConflict) {\n          $.fn.bootstrapDP = $.fn.datepicker.noConflict();\n\n          if (!$.fn.datepicker) {\n            $.fn.datepicker = $.fn.bootstrapDP;\n          }\n        }\n\n        var widget = {\n          name: \"datepicker\",\n          title: \"Date picker\",\n          iconName: \"icon-datepicker\",\n          widgetIsLoaded: function () {\n            return !!$ && !!$.fn.datepicker && !$.fn.datepicker.noConflict;\n          },\n          isFit: function (question) {\n            return question.getType() === \"datepicker\";\n          },\n          htmlTemplate: \"<input class='form-control widget-datepicker' type='text'>\",\n          activatedByChanged: function (activatedBy) {\n            Survey.JsonObject.metaData.addClass(\"datepicker\", [{\n              name: \"inputType\",\n              visible: false\n            }, {\n              name: \"inputFormat\",\n              visible: false\n            }, {\n              name: \"inputMask\",\n              visible: false\n            }], null, \"text\");\n            Survey.JsonObject.metaData.addProperty(\"datepicker\", {\n              name: \"dateFormat\"\n            });\n            Survey.JsonObject.metaData.addProperty(\"datepicker\", {\n              name: \"config\",\n              default: null\n            });\n          },\n          afterRender: function (question, el) {\n            var $el = $(el).is(\".widget-datepicker\") ? $(el) : $(el).find(\".widget-datepicker\");\n            $el.addClass(question.css.text.root);\n            var isSelecting = false;\n            var config = $.extend(true, {}, question.config || {});\n\n            if (!!question.placeHolder) {\n              $el.attr(\"placeholder\", question.placeHolder);\n            }\n\n            if (config.dateFormat === undefined) {\n              config.dateFormat = !!question.dateFormat ? question.dateFormat : undefined;\n            }\n\n            if (config.option === undefined) {\n              config.option = {\n                minDate: null,\n                maxDate: null\n              };\n            }\n\n            if (config.onSelect === undefined) {\n              config.onSelect = function (dateText) {\n                isSelecting = true;\n                question.value = dateText;\n                isSelecting = false;\n                this.fixFocusIE = true;\n              };\n            }\n\n            config.fixFocusIE = false;\n\n            config.onClose = function (dateText, inst) {\n              this.fixFocusIE = true;\n            };\n\n            config.beforeShow = function (input, inst) {\n              var result = !!navigator.userAgent.match(/Trident\\/7\\./) ? !this.fixFocusIE : true;\n              this.fixFocusIE = false;\n              return result;\n            };\n\n            var pickerWidget = $el.datepicker(config);\n            $el.keyup(function (e) {\n              if (e.keyCode == 8 || e.keyCode == 46) {\n                $.datepicker._clearDate(this);\n              }\n            });\n\n            question.readOnlyChangedCallback = function () {\n              $el.datepicker(\"option\", \"disabled\", question.isReadOnly);\n            };\n\n            function updateDate() {\n              if (question.value) {\n                pickerWidget.datepicker(\"setDate\", question.value);\n              } else {\n                pickerWidget.datepicker(\"setDate\", null);\n              }\n            }\n\n            question.registerFunctionOnPropertyValueChanged(\"dateFormat\", function () {\n              question.dateFormat && pickerWidget.datepicker(\"option\", \"dateFormat\", question.dateFormat);\n              updateDate();\n            });\n\n            question.valueChangedCallback = function () {\n              if (!isSelecting) {\n                updateDate();\n                $el.blur();\n              }\n            };\n\n            question.valueChangedCallback();\n          },\n          willUnmount: function (question, el) {\n            var $el = $(el).is(\".widget-datepicker\") ? $(el) : $(el).find(\".widget-datepicker\");\n            $el.datepicker(\"destroy\");\n          },\n          pdfQuestionType: \"text\"\n        };\n        Survey.matrixDropdownColumnTypes.datepicker = {\n          properties: [\"placeHolder\"]\n        };\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey, window.$);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"default\"] = init;\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n      /* harmony import */\n\n      var __WEBPACK_IMPORTED_MODULE_0_nouislider__ = __webpack_require__(7);\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_0_nouislider___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_nouislider__);\n\n      function init(Survey) {\n        var widget = {\n          name: \"nouislider\",\n          title: \"noUiSlider\",\n          iconName: \"icon-nouislider\",\n          widgetIsLoaded: function () {\n            return typeof __WEBPACK_IMPORTED_MODULE_0_nouislider___default.a != \"undefined\";\n          },\n          isFit: function (question) {\n            return question.getType() === \"nouislider\";\n          },\n          htmlTemplate: \"<div><div></div></div><style>.noUi-origin { width: 0; }</style>\",\n          activatedByChanged: function (activatedBy) {\n            Survey.JsonObject.metaData.addClass(\"nouislider\", [], null, \"empty\");\n            Survey.JsonObject.metaData.addProperties(\"nouislider\", [{\n              name: \"step:number\",\n              default: 1\n            }, {\n              name: \"rangeMin:number\",\n              default: 0\n            }, {\n              name: \"rangeMax:number\",\n              default: 100\n            }, {\n              name: \"pipsMode\",\n              default: \"positions\"\n            }, {\n              name: \"pipsValues:itemvalues\",\n              default: [0, 25, 50, 75, 100]\n            }, {\n              name: \"pipsText:itemvalues\",\n              default: [0, 25, 50, 75, 100]\n            }, {\n              name: \"pipsDensity:number\",\n              default: 5\n            }, {\n              name: \"orientation:string\",\n              default: \"horizontal\"\n            }, {\n              name: \"direction:string\",\n              default: \"ltr\"\n            }, {\n              name: \"tooltips:boolean\",\n              default: true\n            }]);\n          },\n          afterRender: function (question, el) {\n            el.style.paddingBottom = \"19px\";\n            el.style.paddingLeft = \"20px\";\n            el.style.paddingRight = \"20px\";\n            el.style.paddingTop = \"44px\";\n            el = el.children[0];\n            el.style.marginBottom = \"60px\";\n\n            if (question.orientation === \"vertical\") {\n              el.style.height = \"250px\";\n            }\n\n            var slider = __WEBPACK_IMPORTED_MODULE_0_nouislider___default.a.create(el, {\n              start: question.value || (question.rangeMin + question.rangeMax) / 2,\n              connect: [true, false],\n              step: question.step,\n              tooltips: question.tooltips,\n              pips: {\n                mode: question.pipsMode || \"positions\",\n                values: question.pipsValues.map(function (pVal) {\n                  var pipValue = pVal;\n\n                  if (pVal.value !== undefined) {\n                    pipValue = pVal.value;\n                  }\n\n                  return parseInt(pipValue);\n                }),\n                density: question.pipsDensity || 5,\n                format: {\n                  to: function (pVal) {\n                    var pipText = pVal;\n                    question.pipsText.map(function (el) {\n                      if (el.text !== undefined && pVal === el.value) {\n                        pipText = el.text;\n                      }\n                    });\n                    return pipText;\n                  }\n                }\n              },\n              range: {\n                min: question.rangeMin,\n                max: question.rangeMax\n              },\n              orientation: question.orientation,\n              direction: question.direction\n            });\n\n            slider.on(\"change\", function () {\n              question.value = Number(slider.get());\n            });\n\n            var updateValueHandler = function () {\n              slider.set(question.value);\n            };\n\n            if (question.isReadOnly) {\n              el.setAttribute(\"disabled\", true);\n            }\n\n            updateValueHandler();\n            question.noUiSlider = slider;\n            question.valueChangedCallback = updateValueHandler;\n\n            question.readOnlyChangedCallback = function () {\n              if (question.isReadOnly) {\n                el.setAttribute(\"disabled\", true);\n              } else {\n                el.removeAttribute(\"disabled\");\n              }\n            };\n          },\n          willUnmount: function (question, el) {\n            if (!!question.noUiSlider) {\n              question.noUiSlider.destroy();\n              question.noUiSlider = null;\n            }\n\n            question.readOnlyChangedCallback = null;\n          },\n          pdfRender: function (_, options) {\n            if (options.question.getType() === \"nouislider\") {\n              var point = options.module.SurveyHelper.createPoint(options.module.SurveyHelper.mergeRects.apply(null, options.bricks));\n              point.xLeft += options.controller.unitWidth;\n              point.yTop += options.controller.unitHeight * options.module.FlatQuestion.CONTENT_GAP_VERT_SCALE;\n              var rect = options.module.SurveyHelper.createTextFieldRect(point, options.controller);\n              var textboxBrick = new options.module.TextFieldBrick(options.question, options.controller, rect, true, options.question.id, options.question.value || options.question.defaultValue || \"\", \"\", options.question.isReadOnly, false, \"text\");\n              options.bricks.push(textboxBrick);\n            }\n          }\n        };\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"default\"] = init;\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports) {\n      module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n      /***/\n    },\n    /* 8 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n\n      function init(Survey, $) {\n        $ = $ || window.$;\n        var widget = {\n          name: \"tagbox\",\n          title: \"Tag box\",\n          iconName: \"icon-tagbox\",\n          widgetIsLoaded: function () {\n            return typeof $ == \"function\" && !!$.fn.select2;\n          },\n          defaultJSON: {\n            choices: [\"Item 1\", \"Item 2\", \"Item 3\"]\n          },\n          htmlTemplate: \"<div><select multiple='multiple' style='width: 100%;'></select><textarea></textarea></div>\",\n          isFit: function (question) {\n            return question.getType() === \"tagbox\";\n          },\n          activatedByChanged: function (activatedBy) {\n            Survey.JsonObject.metaData.addClass(\"tagbox\", [{\n              name: \"hasOther:boolean\",\n              visible: false\n            }, {\n              name: \"hasSelectAll:boolean\",\n              visible: false\n            }, {\n              name: \"hasNone:boolean\",\n              visible: false\n            }, {\n              name: \"otherText\",\n              visible: false\n            }, {\n              name: \"selectAllText\",\n              visible: false\n            }, {\n              name: \"noneText\",\n              visible: false\n            }], null, \"checkbox\");\n            Survey.JsonObject.metaData.addProperty(\"tagbox\", {\n              name: \"select2Config\",\n              default: null\n            });\n            Survey.JsonObject.metaData.addProperty(\"tagbox\", {\n              name: \"placeholder\",\n              default: \"\"\n            });\n            Survey.matrixDropdownColumnTypes.tagbox = {\n              properties: [\"choices\", \"choicesOrder\", \"choicesByUrl\", \"optionsCaption\", \"otherText\", \"choicesVisibleIf\"]\n            };\n          },\n          fixStyles: function (el) {\n            el.parentElement.querySelector(\".select2-search__field\").style.border = \"none\";\n          },\n          afterRender: function (question, el) {\n            var self = this;\n            var select2Config = question.select2Config;\n            var settings = select2Config && typeof select2Config == \"string\" ? JSON.parse(select2Config) : select2Config;\n            var placeholder = question.placeholder;\n            var $el = $(el).is(\"select\") ? $(el) : $(el).find(\"select\");\n            self.willUnmount(question, el);\n            $el.select2({\n              tags: \"true\",\n              disabled: question.isReadOnly,\n              theme: \"classic\"\n            });\n            var $otherElement = $(el).find(\"textarea\");\n\n            if (!!question.survey && !!question.survey.css && !!question.survey.css.checkbox) {\n              $otherElement.addClass(question.survey.css.checkbox.other);\n            }\n\n            $otherElement.bind(\"input propertychange\", function () {\n              question.comment = $otherElement.val();\n            });\n\n            var updateComment = function () {\n              $otherElement.val(question.comment);\n\n              if (question.isOtherSelected) {\n                $otherElement.show();\n              } else {\n                $otherElement.hide();\n              }\n            };\n\n            self.fixStyles(el);\n            var question;\n\n            var updateValueHandler = function () {\n              if (question.hasSelectAll && question.isAllSelected) {\n                $el.val([question.selectAllItemValue.value].concat(question.value)).trigger(\"change\");\n              } else {\n                $el.val(question.value).trigger(\"change\");\n              }\n\n              self.fixStyles(el);\n              updateComment();\n            };\n\n            var updateChoices = function () {\n              $el.select2().empty();\n\n              if (settings) {\n                if (placeholder) settings.placeholder = placeholder;\n\n                if (settings.ajax) {\n                  $el.select2(settings);\n                } else {\n                  settings.data = question.visibleChoices.map(function (choice) {\n                    return {\n                      id: choice.value,\n                      text: choice.text\n                    };\n                  });\n                  $el.select2(settings);\n                }\n              } else {\n                $el.select2({\n                  placeholder: placeholder,\n                  data: question.visibleChoices.map(function (choice) {\n                    return {\n                      id: choice.value,\n                      text: choice.text\n                    };\n                  })\n                });\n              }\n\n              updateValueHandler();\n            };\n\n            var isAllItemSelected = function (value) {\n              return question.hasSelectAll && value === question.selectAllItemValue.value;\n            };\n\n            question._propertyValueChangedFnSelect2 = function () {\n              updateChoices();\n            };\n\n            $otherElement.prop(\"disabled\", question.isReadOnly);\n\n            question.readOnlyChangedCallback = function () {\n              $el.prop(\"disabled\", question.isReadOnly);\n              $otherElement.prop(\"disabled\", question.isReadOnly);\n            };\n\n            question.registerFunctionOnPropertyValueChanged(\"visibleChoices\", question._propertyValueChangedFnSelect2);\n            question.valueChangedCallback = updateValueHandler;\n            $el.on(\"select2:select\", function (e) {\n              if (isAllItemSelected(e.params.data.id)) {\n                question.selectAll();\n              } else {\n                question.value = (question.value || []).concat(e.params.data.id);\n              }\n\n              updateComment();\n            });\n            $el.on(\"select2:unselect\", function (e) {\n              var index = (question.value || []).indexOf(e.params.data.id);\n\n              if (isAllItemSelected(e.params.data.id)) {\n                question.clearValue();\n              } else if (index !== -1) {\n                var val = [].concat(question.value);\n                val.splice(index, 1);\n                question.value = val;\n              }\n\n              updateComment();\n            });\n            updateChoices();\n          },\n          willUnmount: function (question, el) {\n            if (!question._propertyValueChangedFnSelect2) return;\n            $(el).find(\"select\").off(\"select2:select\").select2(\"destroy\");\n            question.readOnlyChangedCallback = null;\n            question.valueChangedCallback = null;\n            question.unRegisterFunctionOnPropertyValueChanged(\"visibleChoices\", question._propertyValueChangedFnSelect2);\n            question._propertyValueChangedFnSelect2 = undefined;\n          },\n          pdfQuestionType: \"checkbox\"\n        };\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey, window.$);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"default\"] = init;\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n      /* harmony import */\n\n      var __WEBPACK_IMPORTED_MODULE_0_sortablejs__ = __webpack_require__(10);\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_0_sortablejs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_sortablejs__);\n\n      function init(Survey) {\n        var widget = {\n          name: \"sortablelist\",\n          title: \"Sortable list\",\n          iconName: \"icon-sortablejs\",\n          widgetIsLoaded: function () {\n            return typeof __WEBPACK_IMPORTED_MODULE_0_sortablejs___default.a != \"undefined\";\n          },\n          defaultJSON: {\n            choices: [\"Item 1\", \"Item 2\", \"Item 3\"]\n          },\n          rootStyle: \"width:100%:\",\n          areaStyle: \"border: 1px solid #1ab394; width:100%; min-height:50px; margin-top:10px;\",\n          itemStyle: \"background-color:#1ab394;color:#fff;margin:5px;padding:10px;\",\n          isFit: function (question) {\n            return question.getType() === \"sortablelist\";\n          },\n          htmlTemplate: \"<div></div>\",\n          activatedByChanged: function (activatedBy) {\n            Survey.JsonObject.metaData.addClass(\"sortablelist\", [{\n              name: \"hasOther\",\n              visible: false\n            }, {\n              name: \"storeOthersAsComment\",\n              visible: false\n            }, {\n              name: \"hasNone\",\n              visible: false\n            }, {\n              name: \"renderAs\",\n              visible: false\n            }], null, \"checkbox\");\n            Survey.JsonObject.metaData.addProperty(\"sortablelist\", {\n              name: \"emptyText\",\n              default: \"Move items here.\"\n            });\n            Survey.JsonObject.metaData.addProperty(\"sortablelist\", {\n              name: \"useDefaultTheme\",\n              default: true\n            });\n            Survey.JsonObject.metaData.addProperty(\"sortablelist\", {\n              name: \"maxAnswersCount:number\",\n              default: -1\n            });\n          },\n          afterRender: function (question, el) {\n            var self = this;\n\n            if (!question.useDefaultTheme) {\n              self.rootStyle = \"\";\n              self.itemStyle = \"\";\n              self.areaStyle = \"\";\n            }\n\n            el.style.cssText = self.rootStyle;\n            el.className = \"sjs-sortablejs-root\";\n            var source, result;\n            var resultEl = document.createElement(\"div\");\n            var emptyEl = document.createElement(\"span\");\n            var sourceEl = document.createElement(\"div\");\n            resultEl.style.cssText = self.areaStyle;\n            resultEl.style.boxSizing = \"border-box\";\n            resultEl.className = \"sjs-sortablejs-result\";\n            emptyEl.innerHTML = question.emptyText;\n            resultEl.appendChild(emptyEl);\n            sourceEl.style.cssText = self.areaStyle;\n            sourceEl.style.boxSizing = \"border-box\";\n            sourceEl.className = \"sjs-sortablejs-source\";\n            el.appendChild(resultEl);\n            el.appendChild(sourceEl);\n\n            var hasValueInResults = function (val) {\n              var res = question.value;\n              if (!Array.isArray(res)) return false;\n\n              for (var i = 0; i < res.length; i++) {\n                if (res[i] == val) return true;\n              }\n\n              return false;\n            };\n\n            var addChoiceToWidget = function (choice, inResults) {\n              var srcEl = inResults ? resultEl : sourceEl;\n              var newEl = document.createElement(\"div\");\n              newEl.innerHTML = \"<div class='sjs-sortablejs-item' style='\" + self.itemStyle + \"'>\" + choice.text + \"</div>\";\n              newEl.dataset[\"value\"] = choice.value;\n              srcEl.appendChild(newEl);\n            };\n\n            var getChoicesNotInResults = function () {\n              var res = [];\n              question.visibleChoices.forEach(function (choice) {\n                if (!hasValueInResults(choice.value)) {\n                  res.push(choice);\n                }\n              });\n              return res;\n            };\n\n            var getChoicesInResults = function () {\n              var res = [];\n              var val = question.value;\n              if (!Array.isArray(val)) return res;\n\n              for (var i = 0; i < val.length; i++) {\n                var item = Survey.ItemValue.getItemByValue(question.visibleChoices, val[i]);\n\n                if (!!item) {\n                  res.push(item);\n                }\n              }\n\n              return res;\n            };\n\n            var isUpdatingQuestionValue = false;\n\n            var updateValueHandler = function () {\n              if (isUpdatingQuestionValue) return;\n              resultEl.innerHTML = \"\";\n              resultEl.appendChild(emptyEl);\n              sourceEl.innerHTML = \"\";\n              var notInResults = getChoicesNotInResults();\n              var inResults = getChoicesInResults();\n              emptyEl.style.display = inResults.length > 0 ? \"none\" : \"\";\n              inResults.forEach(function (choice) {\n                addChoiceToWidget(choice, true);\n              });\n              notInResults.forEach(function (choice) {\n                addChoiceToWidget(choice, false);\n              });\n            };\n\n            result = question.resultEl = __WEBPACK_IMPORTED_MODULE_0_sortablejs___default.a.create(resultEl, {\n              animation: 150,\n              disabled: question.isReadOnly,\n              group: {\n                name: question.name,\n                put: function (to) {\n                  return question.maxAnswersCount < 0 || to.el.children.length <= question.maxAnswersCount;\n                }\n              },\n              onSort: function (evt) {\n                var result = [];\n\n                if (resultEl.children.length === 1) {\n                  emptyEl.style.display = \"\";\n                } else {\n                  emptyEl.style.display = \"none\";\n\n                  for (var i = 0; i < resultEl.children.length; i++) {\n                    if (typeof resultEl.children[i].dataset.value === \"undefined\") continue;\n                    result.push(resultEl.children[i].dataset.value);\n                  }\n                }\n\n                isUpdatingQuestionValue = true;\n                question.value = result;\n                isUpdatingQuestionValue = false;\n              }\n            });\n            source = question.sourceEl = __WEBPACK_IMPORTED_MODULE_0_sortablejs___default.a.create(sourceEl, {\n              animation: 150,\n              disabled: question.isReadOnly,\n              group: question.name\n            });\n            question.valueChangedCallback = updateValueHandler;\n\n            question.readOnlyChangedCallback = function () {\n              if (question.isReadOnly) {\n                result.options.disabled = true;\n                source.options.disabled = true;\n              } else {\n                result.options.disabled = false;\n                source.options.disabled = false;\n              }\n            };\n\n            updateValueHandler();\n          },\n          willUnmount: function (question, el) {\n            question.resultEl.destroy();\n            question.sourceEl.destroy();\n            question.readOnlyChangedCallback = null;\n          },\n          pdfQuestionType: \"checkbox\"\n        };\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"default\"] = init;\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports) {\n      module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n      /***/\n    },\n    /* 11 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n\n      function init(Survey) {\n        var widget = {\n          name: \"editor\",\n          title: \"Editor\",\n          iconName: \"icon-editor\",\n          widgetIsLoaded: function () {\n            return typeof CKEDITOR != \"undefined\";\n          },\n          isFit: function (question) {\n            return question.getType() === \"editor\";\n          },\n          htmlTemplate: \"<textarea rows='10' cols='80' style: {width:'100%'}></textarea>\",\n          activatedByChanged: function (activatedBy) {\n            Survey.JsonObject.metaData.addClass(\"editor\", [], null, \"empty\");\n            Survey.JsonObject.metaData.addProperty(\"editor\", {\n              name: \"height\",\n              default: 300\n            });\n          },\n          afterRender: function (question, el) {\n            var name = question.name;\n\n            CKEDITOR.editorConfig = function (config) {\n              config.language = \"es\";\n              config.height = question.height;\n              config.toolbarCanCollapse = true;\n            };\n\n            el.name = name;\n\n            if (CKEDITOR.instances[name]) {\n              CKEDITOR.instances[name].removeAllListeners();\n              CKEDITOR.remove(CKEDITOR.instances[name]);\n            }\n\n            var editor = CKEDITOR.replace(el);\n            CKEDITOR.instances[name].config.readOnly = question.isReadOnly;\n            var isValueChanging = false;\n\n            var updateValueHandler = function () {\n              if (isValueChanging || typeof question.value === \"undefined\") return;\n              editor.setData(question.value);\n            };\n\n            editor.on(\"change\", function () {\n              isValueChanging = true;\n              question.value = editor.getData();\n              isValueChanging = false;\n            });\n            question.valueChangedCallback = updateValueHandler;\n\n            question.readOnlyChangedCallback = function () {\n              if (question.isReadOnly) {\n                editor.setReadOnly(true);\n              } else {\n                editor.setReadOnly(false);\n              }\n            };\n\n            updateValueHandler();\n          },\n          willUnmount: function (question, el) {\n            question.readOnlyChangedCallback = null;\n            CKEDITOR.instances[question.name].destroy(false);\n          },\n          pdfRender: function (_, options) {\n            if (options.question.getType() === \"editor\") {\n              var point = options.module.SurveyHelper.createPoint(options.module.SurveyHelper.mergeRects.apply(null, options.bricks));\n              point.xLeft += options.controller.unitWidth;\n              point.yTop += options.controller.unitHeight * options.module.FlatQuestion.CONTENT_GAP_VERT_SCALE;\n              var html = options.module.SurveyHelper.createDivBlock(options.question.value, options.controller);\n              return new Promise(function (resolve) {\n                options.module.SurveyHelper.createHTMLFlat(point, options.question, options.controller, html).then(function (htmlFlat) {\n                  var htmlBrick = options.module.SurveyHelper.splitHtmlRect(options.controller, htmlFlat);\n                  options.bricks.push(htmlBrick);\n                  resolve();\n                });\n              });\n            }\n          }\n        };\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"default\"] = init;\n      /***/\n    },\n    /* 12 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n\n      function init(Survey, $) {\n        $ = $ || window.$;\n        var widget = {\n          name: \"autocomplete\",\n          widgetIsLoaded: function () {\n            return typeof $ == \"function\" && !!$.fn.easyAutocomplete;\n          },\n          isFit: function (question) {\n            return question.getType() === \"text\";\n          },\n          isDefaultRender: true,\n          activatedByChanged: function (activatedBy) {\n            if (Survey.JsonObject.metaData.findProperty(\"text\", \"choices\") !== null || Survey.JsonObject.metaData.findProperty(\"text\", \"choicesByUrl\") !== null) {\n              return;\n            }\n\n            Survey.JsonObject.metaData.addProperty(\"text\", \"choices:itemvalues\");\n            Survey.JsonObject.metaData.addProperty(\"text\", {\n              name: \"choicesByUrl:restfull\",\n              className: \"ChoicesRestfull\"\n            });\n            Array.prototype.push.apply(Survey.matrixDropdownColumnTypes.text.properties, [\"choices\", \"choicesOrder\", \"choicesByUrl\", \"otherText\"]);\n          },\n          afterRender: function (question, el) {\n            var $el = $(el).is(\"input\") ? $(el) : $(el).find(\"input\");\n\n            var getCssSelectorFromClassesString = function (classesString) {\n              if (!classesString) return \"\";\n              var cssSelector = classesString.replace(/(^\\s*)|(\\s+)/g, \".\"); // replace whitespaces with '.'\n\n              return cssSelector;\n            };\n\n            var questionRootClasses = getCssSelectorFromClassesString(question.cssRoot);\n\n            if (!!questionRootClasses) {\n              $el.parents(questionRootClasses)[0].style.overflow = \"visible\";\n            }\n\n            var options = {\n              data: (question.choices || []).map(function (item) {\n                return item.text;\n              }),\n              adjustWidth: false,\n              list: {\n                sort: {\n                  enabled: true\n                },\n                match: {\n                  enabled: true\n                }\n              },\n              placeholder: question.placeholder\n            };\n\n            if (!!question.choicesByUrl) {\n              options.url = function (phrase) {\n                return question.choicesByUrl.url;\n              };\n\n              options.getValue = question.choicesByUrl.valueName; // options.ajaxSettings = {\n              //   dataType: \"jsonp\"\n              // };\n            }\n\n            $el.easyAutocomplete(options);\n\n            $el[0].oninput = function () {\n              question.customWidgetData.isNeedRender = true;\n            };\n\n            var updateHandler = function () {\n              $el[0].value = typeof question.value === \"undefined\" ? \"\" : question.value;\n            };\n\n            question.valueChangedCallback = updateHandler;\n            updateHandler();\n          },\n          willUnmount: function (question, el) {// var $el = $(el).find(\"input\");\n            // $el.autocomplete(\"destroy\");\n          }\n        };\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"type\");\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey, window.$);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"default\"] = init;\n      /***/\n    },\n    /* 13 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n\n      function init(Survey) {\n        var widget = {\n          settings: {\n            supportedTypes: [\"radiogroup\", \"checkbox\", \"boolean\"],\n            radiogroup: {\n              rootClass: \"pretty p-default p-round\",\n              inputType: \"radio\",\n              states: [{\n                stateClass: \"state p-success\",\n                addOn: \"\"\n              }]\n            },\n            checkbox: {\n              rootClass: \"pretty p-default\",\n              inputType: \"checkbox\",\n              states: [{\n                stateClass: \"state p-success\",\n                addOn: \"\"\n              }]\n            },\n            boolean: {\n              rootClass: \"pretty p-icon p-default p-has-indeterminate\",\n              inputType: \"checkbox\",\n              states: [{\n                stateClass: \"state p-success\",\n                addOn: \"\"\n              }, {\n                stateClass: \"state p-success p-is-indeterminate\",\n                iconClass: \"icon mdi mdi-minus\",\n                addOn: \"\"\n              }]\n            }\n          },\n          name: \"pretty-checkbox\",\n          activatedBy: \"property\",\n          widgetIsLoaded: function () {\n            return true;\n          },\n          htmlTemplate: \"<fieldset></fieldset>\",\n          isFit: function (question) {\n            var isFitByType = widget.settings.supportedTypes.indexOf(question.getType()) !== -1;\n\n            if (widget.activatedBy === \"property\") {\n              return question[\"renderAs\"] === \"prettycheckbox\" && isFitByType;\n            } else if (widget.activatedBy === \"type\") {\n              return isFitByType;\n            }\n\n            return false;\n          },\n          activatedByChanged: function (value) {\n            if (this.widgetIsLoaded()) {\n              widget.activatedBy = value;\n              widget.settings.supportedTypes.forEach(function (supportedType) {\n                Survey.JsonObject.metaData.removeProperty(supportedType, \"renderAs\");\n\n                if (value === \"property\") {\n                  Survey.JsonObject.metaData.addProperty(supportedType, {\n                    name: \"renderAs\",\n                    default: \"standard\",\n                    choices: [\"standard\", \"prettycheckbox\"]\n                  });\n                }\n              });\n            }\n          },\n          isDefaultRender: false,\n          afterRender: function (question, element) {\n            var itemInputs = {};\n            var questionType = question.getType();\n            var options = this.settings[questionType];\n            var checkboxType = questionType === \"checkbox\";\n            var radiogroupType = questionType === \"radiogroup\";\n            var booleanType = questionType === \"boolean\";\n            var inChangeHandler = false;\n\n            var changeHandler = function (event) {\n              inChangeHandler = true;\n\n              try {\n                var target = arguments[0].target;\n                var targetValue = target.value;\n                var targetChecked = target.checked;\n\n                if (checkboxType) {\n                  var questionValue = question.createValueCopy() || [];\n                  var valueIndex = questionValue.indexOf(targetValue);\n\n                  if (targetChecked) {\n                    if (valueIndex === -1) {\n                      questionValue.push(targetValue);\n                    }\n                  } else {\n                    if (valueIndex !== -1) {\n                      questionValue.splice(valueIndex, 1);\n                    }\n                  }\n\n                  question.value = questionValue;\n                } else if (radiogroupType) {\n                  question.value = targetValue;\n                } else {\n                  question.value = targetChecked;\n                }\n              } finally {\n                inChangeHandler = false;\n              }\n            };\n\n            var itemWidth = question.colCount > 0 ? 100 / question.colCount + \"%\" : \"\";\n            var choices = booleanType ? [{\n              locText: question.locTitle,\n              value: !!question.value\n            }] : question.visibleChoices;\n            choices.forEach(function (choiceItem, index) {\n              var input = document.createElement(\"input\");\n              input.type = options.inputType;\n              input.name = question.name + (checkboxType ? \"\" + index : \"\");\n              input.onchange = changeHandler;\n              input.value = choiceItem.value;\n\n              if (booleanType && question.value === null) {\n                input.indeterminate = question.defaultValue === \"indeterminate\";\n              }\n\n              var controlRoot = document.createElement(\"div\");\n              controlRoot.className = options.rootClass;\n              controlRoot.appendChild(input);\n              options.states.forEach(function (state) {\n                var stateRoot = document.createElement(\"div\");\n                stateRoot.className = state.stateClass;\n\n                if (!!state.iconClass) {\n                  var icon = document.createElement(\"i\");\n                  icon.className = state.iconClass;\n                  stateRoot.appendChild(icon);\n                }\n\n                var label = document.createElement(\"label\");\n\n                if (choiceItem.locText.hasHtml) {\n                  label.innerHTML = choiceItem.locText.html;\n                } else {\n                  label.textContent = choiceItem.locText.renderedText;\n                }\n\n                stateRoot.appendChild(label);\n                controlRoot.appendChild(stateRoot);\n\n                if (!!state.addOn) {\n                  stateRoot.insertAdjacentHTML(\"afterbegin\", state.addOn);\n                }\n              });\n              var itemRoot = document.createElement(\"div\");\n              itemRoot.className = \"sv_cw_pretty_checkbox_\" + questionType;\n              itemRoot.style.display = \"inline-block\";\n              itemRoot.style.width = itemWidth;\n              itemRoot.appendChild(controlRoot);\n              element.appendChild(itemRoot);\n              itemInputs[choiceItem.value] = input;\n            });\n\n            var updateValueHandler = function (newValue) {\n              if (!inChangeHandler) {\n                var checkedItems = newValue || [];\n\n                if (radiogroupType || booleanType) {\n                  checkedItems = [newValue && newValue.toString()];\n                }\n\n                Object.values(itemInputs).forEach(function (inputItem) {\n                  if (checkedItems.indexOf(inputItem.value) !== -1) {\n                    inputItem.setAttribute(\"checked\", undefined);\n                  } else {\n                    inputItem.removeAttribute(\"checked\");\n                  }\n                });\n              }\n            };\n\n            var readOnlyHandler = function () {\n              Object.values(itemInputs).forEach(function (inputItem) {\n                if (question.isReadOnly) {\n                  inputItem.setAttribute(\"disabled\", true);\n                } else {\n                  inputItem.removeAttribute(\"disabled\");\n                }\n              });\n            };\n\n            question.valueChangedCallback = updateValueHandler;\n            question.readOnlyChangedCallback = readOnlyHandler;\n            updateValueHandler(question.value);\n            readOnlyHandler();\n          },\n          willUnmount: function (question, el) {\n            question.valueChangedCallback = undefined;\n            question.readOnlyChangedCallback = undefined;\n          }\n        };\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"property\");\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"default\"] = init;\n      /***/\n    },\n    /* 14 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n\n      var Slider = __webpack_require__(15);\n\n      function init(Survey) {\n        var widget = {\n          name: \"bootstrapslider\",\n          title: \"Bootstrap Slider\",\n          iconName: \"icon-bootstrap-slider\",\n          widgetIsLoaded: function () {\n            return typeof Slider !== \"undefined\";\n          },\n          isFit: function (question) {\n            return question.getType() === \"bootstrapslider\";\n          },\n          htmlTemplate: \"<div></div>\",\n          activatedByChanged: function (activatedBy) {\n            Survey.JsonObject.metaData.addClass(\"bootstrapslider\", [], null, \"empty\");\n            Survey.JsonObject.metaData.addProperties(\"bootstrapslider\", [{\n              name: \"step:number\",\n              default: 1\n            }, {\n              name: \"rangeMin:number\",\n              default: 0\n            }, {\n              name: \"rangeMax:number\",\n              default: 100\n            }]);\n            Survey.JsonObject.metaData.addProperty(\"bootstrapslider\", {\n              name: \"config\",\n              default: null\n            });\n          },\n          afterRender: function (question, el) {\n            el.style.paddingTop = '20px';\n            el.style.paddingBottom = '17px';\n            el.style.paddingLeft = '10px';\n            var inputEl = document.createElement(\"input\");\n            inputEl.id = question.id;\n            inputEl.type = \"text\";\n            inputEl.setAttribute(\"data-slider-id\", question.name + \"_\" + question.id);\n            inputEl.setAttribute(\"data-slider-min\", question.rangeMin);\n            inputEl.setAttribute(\"data-slider-max\", question.rangeMax);\n            inputEl.setAttribute(\"data-slider-step\", question.step);\n            inputEl.setAttribute(\"data-slider-value\", question.value || question.rangeMin);\n            el.appendChild(inputEl);\n            var config = question.config || {};\n\n            if (config.id === undefined) {\n              config.id = question.name + \"_\" + question.id;\n            }\n\n            if (config.min === undefined) {\n              config.min = question.rangeMin;\n            }\n\n            if (config.max === undefined) {\n              config.max = question.rangeMax;\n            }\n\n            if (config.step === undefined) {\n              config.step = question.step;\n            }\n\n            if (config.enabled === undefined) {\n              config.enabled = !question.isReadOnly;\n            }\n\n            if (config.value === undefined) {\n              config.value = question.value || question.rangeMin;\n            }\n\n            var slider = new Slider(inputEl, config);\n            slider.on(\"change\", function (valueObj) {\n              question.value = slider.getValue();\n            });\n\n            var updateValueHandler = function () {\n              slider.setValue(question.value || question.rangeMin);\n            };\n\n            question.readOnlyChangedCallback = function () {\n              if (question.isReadOnly) {\n                slider.disable();\n              } else {\n                slider.enable();\n              }\n            };\n\n            question.bootstrapSlider = slider;\n            question.valueChangedCallback = updateValueHandler;\n          },\n          willUnmount: function (question, el) {\n            question.bootstrapSlider && question.bootstrapSlider.destroy();\n            question.bootstrapSlider = null;\n            question.readOnlyChangedCallback = null;\n          },\n          pdfRender: function (_, options) {\n            if (options.question.getType() === \"bootstrapslider\") {\n              var point = options.module.SurveyHelper.createPoint(options.module.SurveyHelper.mergeRects.apply(null, options.bricks));\n              point.xLeft += options.controller.unitWidth;\n              point.yTop += options.controller.unitHeight * options.module.FlatQuestion.CONTENT_GAP_VERT_SCALE;\n              var rect = options.module.SurveyHelper.createTextFieldRect(point, options.controller);\n              var textboxBrick = new options.module.TextFieldBrick(options.question, options.controller, rect, true, options.question.id, (options.question.value || options.question.defaultValue || \"\").toString(), \"\", options.question.isReadOnly, false, \"text\");\n              options.bricks.push(textboxBrick);\n            }\n          }\n        };\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"default\"] = init;\n      /***/\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports) {\n      module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n      /***/\n    },\n    /* 16 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n      /* harmony import */\n\n      var __WEBPACK_IMPORTED_MODULE_0_recordrtc__ = __webpack_require__(17);\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_0_recordrtc___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_recordrtc__);\n\n      function init(Survey) {\n        var widget = {\n          name: \"microphone\",\n          title: \"Microphone\",\n          iconName: \"icon-microphone\",\n          widgetIsLoaded: function () {\n            return typeof __WEBPACK_IMPORTED_MODULE_0_recordrtc___default.a != \"undefined\";\n          },\n          isFit: function (question) {\n            return question.getType() === \"microphone\";\n          },\n          htmlTemplate: \"<div style='height: 39px'>\" + \"<button type='button'  title='Record' style='vertical-align: top; margin-top: 3px' ><i class='fa fa-microphone' aria-hidden='true'></i></button>\" + \"&nbsp;<button type='button' title='Save' style='vertical-align: top; margin-top: 3px'><i class='fa fa-cloud' aria-hidden='true' ></i></button>\" + \"&nbsp;<audio style='\" + \"vertical-align: top;\" + \"margin-left: 10px;\" + \"height:35px;\" + \"-moz-box-shadow: 2px 2px 4px 0px #006773;\" + \"-webkit-box-shadow:  2px 2px 4px 0px #006773;\" + \"box-shadow: 2px 2px 4px 0px #006773;\" + \"' \" + \"controls='true' >\" + \"</audio>\" + \"</div>\",\n          activatedByChanged: function (activatedBy) {\n            Survey.JsonObject.metaData.addClass(\"microphone\", [], null, \"empty\");\n          },\n          afterRender: function (question, el) {\n            var rootWidget = this;\n            var buttonStartEl = el.getElementsByTagName(\"button\")[0];\n            var buttonStopEl = el.getElementsByTagName(\"button\")[1];\n            var audioEl = el.getElementsByTagName(\"audio\")[0]; //////////  RecordRTC logic\n\n            var successCallback = function (stream) {\n              var options = {\n                type: \"audio\",\n                mimeType: \"audio/webm\",\n                audioBitsPerSecond: 44100,\n                sampleRate: 44100,\n                bufferSize: 16384,\n                numberOfAudioChannels: 1\n              };\n              console.log(\"successCallback\");\n              question.survey.mystream = stream;\n              question.survey.recordRTC = __WEBPACK_IMPORTED_MODULE_0_recordrtc___default()(question.survey.mystream, options);\n\n              if (typeof question.survey.recordRTC != \"undefined\") {\n                console.log(\"startRecording\");\n                question.survey.recordRTC.startRecording();\n              }\n            };\n\n            var errorCallback = function () {\n              alert(\"No microphone\");\n              question.survey.recordRTC = undefined;\n              question.survey.mystream = undefined;\n            };\n\n            var processAudio = function (audioVideoWebMURL) {\n              console.log(\"processAudio\");\n              var recordedBlob = question.survey.recordRTC.getBlob();\n              var fileReader = new FileReader();\n\n              fileReader.onload = function (event) {\n                var dataUri = event.target.result;\n                console.log(\"dataUri: \" + dataUri);\n                question.value = dataUri;\n                audioEl.src = dataUri;\n                console.log(\"cleaning\");\n                question.survey.recordRTC = undefined;\n                question.survey.mystream = undefined;\n              };\n\n              fileReader.readAsDataURL(recordedBlob);\n            };\n\n            var startRecording = function () {\n              // erase previous data\n              question.value = undefined; // if recorder open on another question\t- try to stop recording\n\n              if (typeof question.survey.recordRTC != \"undefined\") {\n                question.survey.recordRTC.stopRecording(doNothingHandler);\n\n                if (typeof question.survey.mystream != \"undefined\") {\n                  question.survey.mystream.getAudioTracks().forEach(function (track) {\n                    track.stop();\n                  });\n                }\n              }\n\n              var mediaConstraints = {\n                video: false,\n                audio: true\n              };\n              navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback.bind(this), errorCallback.bind(this));\n            };\n\n            var stopRecording = function () {\n              console.log(\"stopRecording\");\n\n              if (typeof question.survey.recordRTC != \"undefined\") {\n                question.survey.recordRTC.stopRecording(processAudio.bind(this));\n\n                if (typeof question.survey.mystream != \"undefined\") {\n                  question.survey.mystream.getAudioTracks().forEach(function (track) {\n                    track.stop();\n                  });\n                }\n              }\n            }; //////////////  end RTC logic //////////////////\n\n\n            if (!question.isReadOnly) {\n              buttonStartEl.onclick = startRecording;\n            } else {\n              buttonStartEl.parentNode.removeChild(buttonStartEl);\n            }\n\n            if (!question.isReadOnly) {\n              buttonStopEl.onclick = stopRecording;\n            } else {\n              buttonStopEl.parentNode.removeChild(buttonStopEl);\n            }\n\n            audioEl.src = question.value;\n\n            var updateValueHandler = function () {};\n\n            var doNothingHandler = function () {};\n\n            question.valueChangedCallback = updateValueHandler;\n            updateValueHandler();\n          },\n          willUnmount: function (question, el) {\n            console.log(\"unmount microphone no record \");\n\n            if (typeof question.survey.recordRTC != \"undefined\") {\n              question.survey.recordRTC.stopRecording(doNothingHandler);\n\n              if (typeof question.survey.mystream != \"undefined\") {\n                question.survey.mystream.getAudioTracks().forEach(function (track) {\n                  track.stop();\n                });\n              }\n\n              question.value = undefined;\n              question.survey.recordRTC = undefined;\n              question.survey.mystream = undefined;\n            }\n          }\n        };\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"default\"] = init;\n      /***/\n    },\n    /* 17 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /* WEBPACK VAR INJECTION */\n\n      (function (global, process) {\n        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; // Last time updated: 2020-02-26 1:11:47 PM UTC\n        // ________________\n        // RecordRTC v5.5.9\n        // Open-Sourced: https://github.com/muaz-khan/RecordRTC\n        // --------------------------------------------------\n        // Muaz Khan     - www.MuazKhan.com\n        // MIT License   - www.WebRTC-Experiment.com/licence\n        // --------------------------------------------------\n        // ____________\n        // RecordRTC.js\n\n        /**\r\n         * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \r\n         * @summary Record audio, video or screen inside the browser.\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://MuazKhan.com|Muaz Khan}\r\n         * @typedef RecordRTC\r\n         * @class\r\n         * @example\r\n         * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\r\n         *     type: 'video', // audio or video or gif or canvas\r\n         *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\r\n         * });\r\n         * recorder.startRecording();\r\n         * @see For further information:\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n         * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\r\n         */\n\n\n        function RecordRTC(mediaStream, config) {\n          if (!mediaStream) {\n            throw 'First parameter is required.';\n          }\n\n          config = config || {\n            type: 'video'\n          };\n          config = new RecordRTCConfiguration(mediaStream, config); // a reference to user's recordRTC object\n\n          var self = this;\n\n          function startRecording(config2) {\n            if (!config.disableLogs) {\n              console.log('RecordRTC version: ', self.version);\n            }\n\n            if (!!config2) {\n              // allow users to set options using startRecording method\n              // config2 is similar to main \"config\" object (second parameter over RecordRTC constructor)\n              config = new RecordRTCConfiguration(mediaStream, config2);\n            }\n\n            if (!config.disableLogs) {\n              console.log('started recording ' + config.type + ' stream.');\n            }\n\n            if (mediaRecorder) {\n              mediaRecorder.clearRecordedData();\n              mediaRecorder.record();\n              setState('recording');\n\n              if (self.recordingDuration) {\n                handleRecordingDuration();\n              }\n\n              return self;\n            }\n\n            initRecorder(function () {\n              if (self.recordingDuration) {\n                handleRecordingDuration();\n              }\n            });\n            return self;\n          }\n\n          function initRecorder(initCallback) {\n            if (initCallback) {\n              config.initCallback = function () {\n                initCallback();\n                initCallback = config.initCallback = null; // recorder.initRecorder should be call-backed once.\n              };\n            }\n\n            var Recorder = new GetRecorderType(mediaStream, config);\n            mediaRecorder = new Recorder(mediaStream, config);\n            mediaRecorder.record();\n            setState('recording');\n\n            if (!config.disableLogs) {\n              console.log('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\n            }\n          }\n\n          function stopRecording(callback) {\n            callback = callback || function () {};\n\n            if (!mediaRecorder) {\n              warningLog();\n              return;\n            }\n\n            if (self.state === 'paused') {\n              self.resumeRecording();\n              setTimeout(function () {\n                stopRecording(callback);\n              }, 1);\n              return;\n            }\n\n            if (self.state !== 'recording' && !config.disableLogs) {\n              console.warn('Recording state should be: \"recording\", however current state is: ', self.state);\n            }\n\n            if (!config.disableLogs) {\n              console.log('Stopped recording ' + config.type + ' stream.');\n            }\n\n            if (config.type !== 'gif') {\n              mediaRecorder.stop(_callback);\n            } else {\n              mediaRecorder.stop();\n\n              _callback();\n            }\n\n            setState('stopped');\n\n            function _callback(__blob) {\n              if (!mediaRecorder) {\n                if (typeof callback.call === 'function') {\n                  callback.call(self, '');\n                } else {\n                  callback('');\n                }\n\n                return;\n              }\n\n              Object.keys(mediaRecorder).forEach(function (key) {\n                if (typeof mediaRecorder[key] === 'function') {\n                  return;\n                }\n\n                self[key] = mediaRecorder[key];\n              });\n              var blob = mediaRecorder.blob;\n\n              if (!blob) {\n                if (__blob) {\n                  mediaRecorder.blob = blob = __blob;\n                } else {\n                  throw 'Recording failed.';\n                }\n              }\n\n              if (blob && !config.disableLogs) {\n                console.log(blob.type, '->', bytesToSize(blob.size));\n              }\n\n              if (callback) {\n                var url;\n\n                try {\n                  url = URL.createObjectURL(blob);\n                } catch (e) {}\n\n                if (typeof callback.call === 'function') {\n                  callback.call(self, url);\n                } else {\n                  callback(url);\n                }\n              }\n\n              if (!config.autoWriteToDisk) {\n                return;\n              }\n\n              getDataURL(function (dataURL) {\n                var parameter = {};\n                parameter[config.type + 'Blob'] = dataURL;\n                DiskStorage.Store(parameter);\n              });\n            }\n          }\n\n          function pauseRecording() {\n            if (!mediaRecorder) {\n              warningLog();\n              return;\n            }\n\n            if (self.state !== 'recording') {\n              if (!config.disableLogs) {\n                console.warn('Unable to pause the recording. Recording state: ', self.state);\n              }\n\n              return;\n            }\n\n            setState('paused');\n            mediaRecorder.pause();\n\n            if (!config.disableLogs) {\n              console.log('Paused recording.');\n            }\n          }\n\n          function resumeRecording() {\n            if (!mediaRecorder) {\n              warningLog();\n              return;\n            }\n\n            if (self.state !== 'paused') {\n              if (!config.disableLogs) {\n                console.warn('Unable to resume the recording. Recording state: ', self.state);\n              }\n\n              return;\n            }\n\n            setState('recording'); // not all libs have this method yet\n\n            mediaRecorder.resume();\n\n            if (!config.disableLogs) {\n              console.log('Resumed recording.');\n            }\n          }\n\n          function readFile(_blob) {\n            postMessage(new FileReaderSync().readAsDataURL(_blob));\n          }\n\n          function getDataURL(callback, _mediaRecorder) {\n            if (!callback) {\n              throw 'Pass a callback function over getDataURL.';\n            }\n\n            var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\n\n            if (!blob) {\n              if (!config.disableLogs) {\n                console.warn('Blob encoder did not finish its job yet.');\n              }\n\n              setTimeout(function () {\n                getDataURL(callback, _mediaRecorder);\n              }, 1000);\n              return;\n            }\n\n            if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\n              var webWorker = processInWebWorker(readFile);\n\n              webWorker.onmessage = function (event) {\n                callback(event.data);\n              };\n\n              webWorker.postMessage(blob);\n            } else {\n              var reader = new FileReader();\n              reader.readAsDataURL(blob);\n\n              reader.onload = function (event) {\n                callback(event.target.result);\n              };\n            }\n\n            function processInWebWorker(_function) {\n              try {\n                var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n                  type: 'application/javascript'\n                }));\n                var worker = new Worker(blob);\n                URL.revokeObjectURL(blob);\n                return worker;\n              } catch (e) {}\n            }\n          }\n\n          function handleRecordingDuration(counter) {\n            counter = counter || 0;\n\n            if (self.state === 'paused') {\n              setTimeout(function () {\n                handleRecordingDuration(counter);\n              }, 1000);\n              return;\n            }\n\n            if (self.state === 'stopped') {\n              return;\n            }\n\n            if (counter >= self.recordingDuration) {\n              stopRecording(self.onRecordingStopped);\n              return;\n            }\n\n            counter += 1000; // 1-second\n\n            setTimeout(function () {\n              handleRecordingDuration(counter);\n            }, 1000);\n          }\n\n          function setState(state) {\n            if (!self) {\n              return;\n            }\n\n            self.state = state;\n\n            if (typeof self.onStateChanged.call === 'function') {\n              self.onStateChanged.call(self, state);\n            } else {\n              self.onStateChanged(state);\n            }\n          }\n\n          var WARNING = 'It seems that recorder is destroyed or \"startRecording\" is not invoked for ' + config.type + ' recorder.';\n\n          function warningLog() {\n            if (config.disableLogs === true) {\n              return;\n            }\n\n            console.warn(WARNING);\n          }\n\n          var mediaRecorder;\n          var returnObject = {\n            /**\r\n             * This method starts the recording.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @example\r\n             * var recorder = RecordRTC(mediaStream, {\r\n             *     type: 'video'\r\n             * });\r\n             * recorder.startRecording();\r\n             */\n            startRecording: startRecording,\n\n            /**\r\n             * This method stops the recording. It is strongly recommended to get \"blob\" or \"URI\" inside the callback to make sure all recorders finished their job.\r\n             * @param {function} callback - Callback to get the recorded blob.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @example\r\n             * recorder.stopRecording(function() {\r\n             *     // use either \"this\" or \"recorder\" object; both are identical\r\n             *     video.src = this.toURL();\r\n             *     var blob = this.getBlob();\r\n             * });\r\n             */\n            stopRecording: stopRecording,\n\n            /**\r\n             * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @todo Firefox is unable to pause the recording. Fix it.\r\n             * @example\r\n             * recorder.pauseRecording();  // pause the recording\r\n             * recorder.resumeRecording(); // resume again\r\n             */\n            pauseRecording: pauseRecording,\n\n            /**\r\n             * This method resumes the recording.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @example\r\n             * recorder.pauseRecording();  // first of all, pause the recording\r\n             * recorder.resumeRecording(); // now resume it\r\n             */\n            resumeRecording: resumeRecording,\n\n            /**\r\n             * This method initializes the recording.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @todo This method should be deprecated.\r\n             * @example\r\n             * recorder.initRecorder();\r\n             */\n            initRecorder: initRecorder,\n\n            /**\r\n             * Ask RecordRTC to auto-stop the recording after 5 minutes.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @example\r\n             * var fiveMinutes = 5 * 1000 * 60;\r\n             * recorder.setRecordingDuration(fiveMinutes, function() {\r\n             *    var blob = this.getBlob();\r\n             *    video.src = this.toURL();\r\n             * });\r\n             * \r\n             * // or otherwise\r\n             * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {\r\n             *    var blob = this.getBlob();\r\n             *    video.src = this.toURL();\r\n             * });\r\n             */\n            setRecordingDuration: function (recordingDuration, callback) {\n              if (typeof recordingDuration === 'undefined') {\n                throw 'recordingDuration is required.';\n              }\n\n              if (typeof recordingDuration !== 'number') {\n                throw 'recordingDuration must be a number.';\n              }\n\n              self.recordingDuration = recordingDuration;\n\n              self.onRecordingStopped = callback || function () {};\n\n              return {\n                onRecordingStopped: function (callback) {\n                  self.onRecordingStopped = callback;\n                }\n              };\n            },\n\n            /**\r\n             * This method can be used to clear/reset all the recorded data.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @todo Figure out the difference between \"reset\" and \"clearRecordedData\" methods.\r\n             * @example\r\n             * recorder.clearRecordedData();\r\n             */\n            clearRecordedData: function () {\n              if (!mediaRecorder) {\n                warningLog();\n                return;\n              }\n\n              mediaRecorder.clearRecordedData();\n\n              if (!config.disableLogs) {\n                console.log('Cleared old recorded data.');\n              }\n            },\n\n            /**\r\n             * Get the recorded blob. Use this method inside the \"stopRecording\" callback.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @example\r\n             * recorder.stopRecording(function() {\r\n             *     var blob = this.getBlob();\r\n             *\r\n             *     var file = new File([blob], 'filename.webm', {\r\n             *         type: 'video/webm'\r\n             *     });\r\n             *\r\n             *     var formData = new FormData();\r\n             *     formData.append('file', file); // upload \"File\" object rather than a \"Blob\"\r\n             *     uploadToServer(formData);\r\n             * });\r\n             * @returns {Blob} Returns recorded data as \"Blob\" object.\r\n             */\n            getBlob: function () {\n              if (!mediaRecorder) {\n                warningLog();\n                return;\n              }\n\n              return mediaRecorder.blob;\n            },\n\n            /**\r\n             * Get data-URI instead of Blob.\r\n             * @param {function} callback - Callback to get the Data-URI.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @example\r\n             * recorder.stopRecording(function() {\r\n             *     recorder.getDataURL(function(dataURI) {\r\n             *         video.src = dataURI;\r\n             *     });\r\n             * });\r\n             */\n            getDataURL: getDataURL,\n\n            /**\r\n             * Get virtual/temporary URL. Usage of this URL is limited to current tab.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @example\r\n             * recorder.stopRecording(function() {\r\n             *     video.src = this.toURL();\r\n             * });\r\n             * @returns {String} Returns a virtual/temporary URL for the recorded \"Blob\".\r\n             */\n            toURL: function () {\n              if (!mediaRecorder) {\n                warningLog();\n                return;\n              }\n\n              return URL.createObjectURL(mediaRecorder.blob);\n            },\n\n            /**\r\n             * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @example\r\n             * var internalRecorder = recorder.getInternalRecorder();\r\n             * if(internalRecorder instanceof MultiStreamRecorder) {\r\n             *     internalRecorder.addStreams([newAudioStream]);\r\n             *     internalRecorder.resetVideoStreams([screenStream]);\r\n             * }\r\n             * @returns {Object} Returns internal recording object.\r\n             */\n            getInternalRecorder: function () {\n              return mediaRecorder;\n            },\n\n            /**\r\n             * Invoke save-as dialog to save the recorded blob into your disk.\r\n             * @param {string} fileName - Set your own file name.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @example\r\n             * recorder.stopRecording(function() {\r\n             *     this.save('file-name');\r\n             *\r\n             *     // or manually:\r\n             *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');\r\n             * });\r\n             */\n            save: function (fileName) {\n              if (!mediaRecorder) {\n                warningLog();\n                return;\n              }\n\n              invokeSaveAsDialog(mediaRecorder.blob, fileName);\n            },\n\n            /**\r\n             * This method gets a blob from indexed-DB storage.\r\n             * @param {function} callback - Callback to get the recorded blob.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @example\r\n             * recorder.getFromDisk(function(dataURL) {\r\n             *     video.src = dataURL;\r\n             * });\r\n             */\n            getFromDisk: function (callback) {\n              if (!mediaRecorder) {\n                warningLog();\n                return;\n              }\n\n              RecordRTC.getFromDisk(config.type, callback);\n            },\n\n            /**\r\n             * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\r\n             * @type {Array.<Array>}\r\n             * @param {Array} arrayOfWebPImages - Array of webp images.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @todo This method should be deprecated.\r\n             * @example\r\n             * var arrayOfWebPImages = [];\r\n             * arrayOfWebPImages.push({\r\n             *     duration: index,\r\n             *     image: 'data:image/webp;base64,...'\r\n             * });\r\n             * recorder.setAdvertisementArray(arrayOfWebPImages);\r\n             */\n            setAdvertisementArray: function (arrayOfWebPImages) {\n              config.advertisement = [];\n              var length = arrayOfWebPImages.length;\n\n              for (var i = 0; i < length; i++) {\n                config.advertisement.push({\n                  duration: i,\n                  image: arrayOfWebPImages[i]\n                });\n              }\n            },\n\n            /**\r\n             * It is equivalent to <code class=\"str\">\"recorder.getBlob()\"</code> method. Usage of \"getBlob\" is recommended, though.\r\n             * @property {Blob} blob - Recorded Blob can be accessed using this property.\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @readonly\r\n             * @example\r\n             * recorder.stopRecording(function() {\r\n             *     var blob = this.blob;\r\n             *\r\n             *     // below one is recommended\r\n             *     var blob = this.getBlob();\r\n             * });\r\n             */\n            blob: null,\n\n            /**\r\n             * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n             * @property {number} bufferSize - Buffer-size used to encode the WAV container\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @readonly\r\n             * @example\r\n             * recorder.stopRecording(function() {\r\n             *     alert('Recorder used this buffer-size: ' + this.bufferSize);\r\n             * });\r\n             */\n            bufferSize: 0,\n\n            /**\r\n             * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n             * @property {number} sampleRate - Sample-rates used to encode the WAV container\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @readonly\r\n             * @example\r\n             * recorder.stopRecording(function() {\r\n             *     alert('Recorder used these sample-rates: ' + this.sampleRate);\r\n             * });\r\n             */\n            sampleRate: 0,\n\n            /**\r\n             * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\r\n             * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @readonly\r\n             * @example\r\n             * recorder.stopRecording(function() {\r\n             *     var arrayBuffer = this.buffer;\r\n             *     alert(arrayBuffer.byteLength);\r\n             * });\r\n             */\n            buffer: null,\n\n            /**\r\n             * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @example\r\n             * recorder.reset();\r\n             * recorder.startRecording();\r\n             */\n            reset: function () {\n              if (self.state === 'recording' && !config.disableLogs) {\n                console.warn('Stop an active recorder.');\n              }\n\n              if (mediaRecorder && typeof mediaRecorder.clearRecordedData === 'function') {\n                mediaRecorder.clearRecordedData();\n              }\n\n              mediaRecorder = null;\n              setState('inactive');\n              self.blob = null;\n            },\n\n            /**\r\n             * This method is called whenever recorder's state changes. Use this as an \"event\".\r\n             * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @instance\r\n             * @example\r\n             * recorder.onStateChanged = function(state) {\r\n             *     console.log('Recorder state: ', state);\r\n             * };\r\n             */\n            onStateChanged: function (state) {\n              if (!config.disableLogs) {\n                console.log('Recorder state changed:', state);\n              }\n            },\n\n            /**\r\n             * A recorder can have inactive, recording, paused or stopped states.\r\n             * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n             * @memberof RecordRTC\r\n             * @static\r\n             * @readonly\r\n             * @example\r\n             * // this looper function will keep you updated about the recorder's states.\r\n             * (function looper() {\r\n             *     document.querySelector('h1').innerHTML = 'Recorder\\'s state is: ' + recorder.state;\r\n             *     if(recorder.state === 'stopped') return; // ignore+stop\r\n             *     setTimeout(looper, 1000); // update after every 3-seconds\r\n             * })();\r\n             * recorder.startRecording();\r\n             */\n            state: 'inactive',\n\n            /**\r\n             * Get recorder's readonly state.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @example\r\n             * var state = recorder.getState();\r\n             * @returns {String} Returns recording state.\r\n             */\n            getState: function () {\n              return self.state;\n            },\n\n            /**\r\n             * Destroy RecordRTC instance. Clear all recorders and objects.\r\n             * @method\r\n             * @memberof RecordRTC\r\n             * @example\r\n             * recorder.destroy();\r\n             */\n            destroy: function () {\n              var disableLogsCache = config.disableLogs;\n              config = {\n                disableLogs: true\n              };\n              self.reset();\n              setState('destroyed');\n              returnObject = self = null;\n\n              if (Storage.AudioContextConstructor) {\n                Storage.AudioContextConstructor.close();\n                Storage.AudioContextConstructor = null;\n              }\n\n              config.disableLogs = disableLogsCache;\n\n              if (!config.disableLogs) {\n                console.log('RecordRTC is destroyed.');\n              }\n            },\n\n            /**\r\n             * RecordRTC version number\r\n             * @property {String} version - Release version number.\r\n             * @memberof RecordRTC\r\n             * @static\r\n             * @readonly\r\n             * @example\r\n             * alert(recorder.version);\r\n             */\n            version: '5.5.9'\n          };\n\n          if (!this) {\n            self = returnObject;\n            return returnObject;\n          } // if someone wants to use RecordRTC with the \"new\" keyword.\n\n\n          for (var prop in returnObject) {\n            this[prop] = returnObject[prop];\n          }\n\n          self = this;\n          return returnObject;\n        }\n\n        RecordRTC.version = '5.5.9';\n\n        if (true\n        /* && !!module.exports*/\n        ) {\n            module.exports = RecordRTC;\n          }\n\n        if (true) {\n          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return RecordRTC;\n          }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        }\n\n        RecordRTC.getFromDisk = function (type, callback) {\n          if (!callback) {\n            throw 'callback is mandatory.';\n          }\n\n          console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\n          DiskStorage.Fetch(function (dataURL, _type) {\n            if (type !== 'all' && _type === type + 'Blob' && callback) {\n              callback(dataURL);\n            }\n\n            if (type === 'all' && callback) {\n              callback(dataURL, _type.replace('Blob', ''));\n            }\n          });\n        };\n        /**\r\n         * This method can be used to store recorded blobs into IndexedDB storage.\r\n         * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * RecordRTC.writeToDisk({\r\n         *     audio: audioBlob,\r\n         *     video: videoBlob,\r\n         *     gif  : gifBlob\r\n         * });\r\n         */\n\n\n        RecordRTC.writeToDisk = function (options) {\n          console.log('Writing recorded blob(s) to disk!');\n          options = options || {};\n\n          if (options.audio && options.video && options.gif) {\n            options.audio.getDataURL(function (audioDataURL) {\n              options.video.getDataURL(function (videoDataURL) {\n                options.gif.getDataURL(function (gifDataURL) {\n                  DiskStorage.Store({\n                    audioBlob: audioDataURL,\n                    videoBlob: videoDataURL,\n                    gifBlob: gifDataURL\n                  });\n                });\n              });\n            });\n          } else if (options.audio && options.video) {\n            options.audio.getDataURL(function (audioDataURL) {\n              options.video.getDataURL(function (videoDataURL) {\n                DiskStorage.Store({\n                  audioBlob: audioDataURL,\n                  videoBlob: videoDataURL\n                });\n              });\n            });\n          } else if (options.audio && options.gif) {\n            options.audio.getDataURL(function (audioDataURL) {\n              options.gif.getDataURL(function (gifDataURL) {\n                DiskStorage.Store({\n                  audioBlob: audioDataURL,\n                  gifBlob: gifDataURL\n                });\n              });\n            });\n          } else if (options.video && options.gif) {\n            options.video.getDataURL(function (videoDataURL) {\n              options.gif.getDataURL(function (gifDataURL) {\n                DiskStorage.Store({\n                  videoBlob: videoDataURL,\n                  gifBlob: gifDataURL\n                });\n              });\n            });\n          } else if (options.audio) {\n            options.audio.getDataURL(function (audioDataURL) {\n              DiskStorage.Store({\n                audioBlob: audioDataURL\n              });\n            });\n          } else if (options.video) {\n            options.video.getDataURL(function (videoDataURL) {\n              DiskStorage.Store({\n                videoBlob: videoDataURL\n              });\n            });\n          } else if (options.gif) {\n            options.gif.getDataURL(function (gifDataURL) {\n              DiskStorage.Store({\n                gifBlob: gifDataURL\n              });\n            });\n          }\n        }; // __________________________\n        // RecordRTC-Configuration.js\n\n        /**\r\n         * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\r\n         * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://MuazKhan.com|Muaz Khan}\r\n         * @typedef RecordRTCConfiguration\r\n         * @class\r\n         * @example\r\n         * var options = RecordRTCConfiguration(mediaStream, options);\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n         * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\r\n         */\n\n\n        function RecordRTCConfiguration(mediaStream, config) {\n          if (!config.recorderType && !config.type) {\n            if (!!config.audio && !!config.video) {\n              config.type = 'video';\n            } else if (!!config.audio && !config.video) {\n              config.type = 'audio';\n            }\n          }\n\n          if (config.recorderType && !config.type) {\n            if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder || typeof WebAssemblyRecorder !== 'undefined' && config.recorderType === WebAssemblyRecorder) {\n              config.type = 'video';\n            } else if (config.recorderType === GifRecorder) {\n              config.type = 'gif';\n            } else if (config.recorderType === StereoAudioRecorder) {\n              config.type = 'audio';\n            } else if (config.recorderType === MediaStreamRecorder) {\n              if (getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\n                config.type = 'video';\n              } else if (!getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\n                config.type = 'video';\n              } else if (getTracks(mediaStream, 'audio').length && !getTracks(mediaStream, 'video').length) {\n                config.type = 'audio';\n              } else {// config.type = 'UnKnown';\n              }\n            }\n          }\n\n          if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n            if (!config.mimeType) {\n              config.mimeType = 'video/webm';\n            }\n\n            if (!config.type) {\n              config.type = config.mimeType.split('/')[0];\n            }\n\n            if (!config.bitsPerSecond) {// config.bitsPerSecond = 128000;\n            }\n          } // consider default type=audio\n\n\n          if (!config.type) {\n            if (config.mimeType) {\n              config.type = config.mimeType.split('/')[0];\n            }\n\n            if (!config.type) {\n              config.type = 'audio';\n            }\n          }\n\n          return config;\n        } // __________________\n        // GetRecorderType.js\n\n        /**\r\n         * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\r\n         * @summary It returns best recorder-type available for your browser.\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://MuazKhan.com|Muaz Khan}\r\n         * @typedef GetRecorderType\r\n         * @class\r\n         * @example\r\n         * var RecorderType = GetRecorderType(options);\r\n         * var recorder = new RecorderType(options);\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n         * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n         */\n\n\n        function GetRecorderType(mediaStream, config) {\n          var recorder; // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\n          // todo: detect if it is Edge, then auto use: StereoAudioRecorder\n\n          if (isChrome || isEdge || isOpera) {\n            // Media Stream Recording API has not been implemented in chrome yet;\n            // That's why using WebAudio API to record stereo audio in WAV format\n            recorder = StereoAudioRecorder;\n          }\n\n          if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\n            recorder = MediaStreamRecorder;\n          } // video recorder (in WebM format)\n\n\n          if (config.type === 'video' && (isChrome || isOpera)) {\n            recorder = WhammyRecorder;\n\n            if (typeof WebAssemblyRecorder !== 'undefined' && typeof ReadableStream !== 'undefined') {\n              recorder = WebAssemblyRecorder;\n            }\n          } // video recorder (in Gif format)\n\n\n          if (config.type === 'gif') {\n            recorder = GifRecorder;\n          } // html2canvas recording!\n\n\n          if (config.type === 'canvas') {\n            recorder = CanvasRecorder;\n          }\n\n          if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n            if (getTracks(mediaStream, 'video').length || getTracks(mediaStream, 'audio').length) {\n              // audio-only recording\n              if (config.type === 'audio') {\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\n                  recorder = MediaStreamRecorder;\n                } // else recorder = StereoAudioRecorder;\n\n              } else {\n                // video or screen tracks\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\n                  recorder = MediaStreamRecorder;\n                }\n              }\n            }\n          }\n\n          if (mediaStream instanceof Array && mediaStream.length) {\n            recorder = MultiStreamRecorder;\n          }\n\n          if (config.recorderType) {\n            recorder = config.recorderType;\n          }\n\n          if (!config.disableLogs && !!recorder && !!recorder.name) {\n            console.log('Using recorderType:', recorder.name || recorder.constructor.name);\n          }\n\n          if (!recorder && isSafari) {\n            recorder = MediaStreamRecorder;\n          }\n\n          return recorder;\n        } // _____________\n        // MRecordRTC.js\n\n        /**\r\n         * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\r\n         * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://MuazKhan.com|Muaz Khan}\r\n         * @typedef MRecordRTC\r\n         * @class\r\n         * @example\r\n         * var recorder = new MRecordRTC();\r\n         * recorder.addStream(MediaStream);\r\n         * recorder.mediaType = {\r\n         *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\r\n         *     video: true, // or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n         *     gif: true    // or GifRecorder\r\n         * };\r\n         * // mimeType is optional and should be set only in advance cases.\r\n         * recorder.mimeType = {\r\n         *     audio: 'audio/wav',\r\n         *     video: 'video/webm',\r\n         *     gif:   'image/gif'\r\n         * };\r\n         * recorder.startRecording();\r\n         * @see For further information:\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\r\n         * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n         * @requires {@link RecordRTC}\r\n         */\n\n\n        function MRecordRTC(mediaStream) {\n          /**\r\n           * This method attaches MediaStream object to {@link MRecordRTC}.\r\n           * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\r\n           * @method\r\n           * @memberof MRecordRTC\r\n           * @example\r\n           * recorder.addStream(MediaStream);\r\n           */\n          this.addStream = function (_mediaStream) {\n            if (_mediaStream) {\n              mediaStream = _mediaStream;\n            }\n          };\n          /**\r\n           * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\r\n           * @property {object} mediaType - {audio: true, video: true, gif: true}\r\n           * @memberof MRecordRTC\r\n           * @example\r\n           * var recorder = new MRecordRTC();\r\n           * recorder.mediaType = {\r\n           *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\r\n           *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n           *     gif  : true  // TRUE or GifRecorder\r\n           * };\r\n           */\n\n\n          this.mediaType = {\n            audio: true,\n            video: true\n          };\n          /**\r\n           * This method starts recording.\r\n           * @method\r\n           * @memberof MRecordRTC\r\n           * @example\r\n           * recorder.startRecording();\r\n           */\n\n          this.startRecording = function () {\n            var mediaType = this.mediaType;\n            var recorderType;\n            var mimeType = this.mimeType || {\n              audio: null,\n              video: null,\n              gif: null\n            };\n\n            if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'audio').length) {\n              mediaType.audio = false;\n            }\n\n            if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\n              mediaType.video = false;\n            }\n\n            if (typeof mediaType.gif !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\n              mediaType.gif = false;\n            }\n\n            if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\n              throw 'MediaStream must have either audio or video tracks.';\n            }\n\n            if (!!mediaType.audio) {\n              recorderType = null;\n\n              if (typeof mediaType.audio === 'function') {\n                recorderType = mediaType.audio;\n              }\n\n              this.audioRecorder = new RecordRTC(mediaStream, {\n                type: 'audio',\n                bufferSize: this.bufferSize,\n                sampleRate: this.sampleRate,\n                numberOfAudioChannels: this.numberOfAudioChannels || 2,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.audio,\n                timeSlice: this.timeSlice,\n                onTimeStamp: this.onTimeStamp\n              });\n\n              if (!mediaType.video) {\n                this.audioRecorder.startRecording();\n              }\n            }\n\n            if (!!mediaType.video) {\n              recorderType = null;\n\n              if (typeof mediaType.video === 'function') {\n                recorderType = mediaType.video;\n              }\n\n              var newStream = mediaStream;\n\n              if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\n                var videoTrack = getTracks(mediaStream, 'video')[0];\n\n                if (isFirefox) {\n                  newStream = new MediaStream();\n                  newStream.addTrack(videoTrack);\n\n                  if (recorderType && recorderType === WhammyRecorder) {\n                    // Firefox does NOT supports webp-encoding yet\n                    // But Firefox do supports WebAssemblyRecorder\n                    recorderType = MediaStreamRecorder;\n                  }\n                } else {\n                  newStream = new MediaStream();\n                  newStream.addTrack(videoTrack);\n                }\n              }\n\n              this.videoRecorder = new RecordRTC(newStream, {\n                type: 'video',\n                video: this.video,\n                canvas: this.canvas,\n                frameInterval: this.frameInterval || 10,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.video,\n                timeSlice: this.timeSlice,\n                onTimeStamp: this.onTimeStamp,\n                workerPath: this.workerPath,\n                webAssemblyPath: this.webAssemblyPath,\n                frameRate: this.frameRate,\n                // used by WebAssemblyRecorder; values: usually 30; accepts any.\n                bitrate: this.bitrate // used by WebAssemblyRecorder; values: 0 to 1000+\n\n              });\n\n              if (!mediaType.audio) {\n                this.videoRecorder.startRecording();\n              }\n            }\n\n            if (!!mediaType.audio && !!mediaType.video) {\n              var self = this;\n              var isSingleRecorder = isMediaRecorderCompatible() === true;\n\n              if (mediaType.audio instanceof StereoAudioRecorder && !!mediaType.video) {\n                isSingleRecorder = false;\n              } else if (mediaType.audio !== true && mediaType.video !== true && mediaType.audio !== mediaType.video) {\n                isSingleRecorder = false;\n              }\n\n              if (isSingleRecorder === true) {\n                self.audioRecorder = null;\n                self.videoRecorder.startRecording();\n              } else {\n                self.videoRecorder.initRecorder(function () {\n                  self.audioRecorder.initRecorder(function () {\n                    // Both recorders are ready to record things accurately\n                    self.videoRecorder.startRecording();\n                    self.audioRecorder.startRecording();\n                  });\n                });\n              }\n            }\n\n            if (!!mediaType.gif) {\n              recorderType = null;\n\n              if (typeof mediaType.gif === 'function') {\n                recorderType = mediaType.gif;\n              }\n\n              this.gifRecorder = new RecordRTC(mediaStream, {\n                type: 'gif',\n                frameRate: this.frameRate || 200,\n                quality: this.quality || 10,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.gif\n              });\n              this.gifRecorder.startRecording();\n            }\n          };\n          /**\r\n           * This method stops recording.\r\n           * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\r\n           * @method\r\n           * @memberof MRecordRTC\r\n           * @example\r\n           * recorder.stopRecording(function(recording){\r\n           *     var audioBlob = recording.audio;\r\n           *     var videoBlob = recording.video;\r\n           *     var gifBlob   = recording.gif;\r\n           * });\r\n           */\n\n\n          this.stopRecording = function (callback) {\n            callback = callback || function () {};\n\n            if (this.audioRecorder) {\n              this.audioRecorder.stopRecording(function (blobURL) {\n                callback(blobURL, 'audio');\n              });\n            }\n\n            if (this.videoRecorder) {\n              this.videoRecorder.stopRecording(function (blobURL) {\n                callback(blobURL, 'video');\n              });\n            }\n\n            if (this.gifRecorder) {\n              this.gifRecorder.stopRecording(function (blobURL) {\n                callback(blobURL, 'gif');\n              });\n            }\n          };\n          /**\r\n           * This method pauses recording.\r\n           * @method\r\n           * @memberof MRecordRTC\r\n           * @example\r\n           * recorder.pauseRecording();\r\n           */\n\n\n          this.pauseRecording = function () {\n            if (this.audioRecorder) {\n              this.audioRecorder.pauseRecording();\n            }\n\n            if (this.videoRecorder) {\n              this.videoRecorder.pauseRecording();\n            }\n\n            if (this.gifRecorder) {\n              this.gifRecorder.pauseRecording();\n            }\n          };\n          /**\r\n           * This method resumes recording.\r\n           * @method\r\n           * @memberof MRecordRTC\r\n           * @example\r\n           * recorder.resumeRecording();\r\n           */\n\n\n          this.resumeRecording = function () {\n            if (this.audioRecorder) {\n              this.audioRecorder.resumeRecording();\n            }\n\n            if (this.videoRecorder) {\n              this.videoRecorder.resumeRecording();\n            }\n\n            if (this.gifRecorder) {\n              this.gifRecorder.resumeRecording();\n            }\n          };\n          /**\r\n           * This method can be used to manually get all recorded blobs.\r\n           * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\r\n           * @method\r\n           * @memberof MRecordRTC\r\n           * @example\r\n           * recorder.getBlob(function(recording){\r\n           *     var audioBlob = recording.audio;\r\n           *     var videoBlob = recording.video;\r\n           *     var gifBlob   = recording.gif;\r\n           * });\r\n           * // or\r\n           * var audioBlob = recorder.getBlob().audio;\r\n           * var videoBlob = recorder.getBlob().video;\r\n           */\n\n\n          this.getBlob = function (callback) {\n            var output = {};\n\n            if (this.audioRecorder) {\n              output.audio = this.audioRecorder.getBlob();\n            }\n\n            if (this.videoRecorder) {\n              output.video = this.videoRecorder.getBlob();\n            }\n\n            if (this.gifRecorder) {\n              output.gif = this.gifRecorder.getBlob();\n            }\n\n            if (callback) {\n              callback(output);\n            }\n\n            return output;\n          };\n          /**\r\n           * Destroy all recorder instances.\r\n           * @method\r\n           * @memberof MRecordRTC\r\n           * @example\r\n           * recorder.destroy();\r\n           */\n\n\n          this.destroy = function () {\n            if (this.audioRecorder) {\n              this.audioRecorder.destroy();\n              this.audioRecorder = null;\n            }\n\n            if (this.videoRecorder) {\n              this.videoRecorder.destroy();\n              this.videoRecorder = null;\n            }\n\n            if (this.gifRecorder) {\n              this.gifRecorder.destroy();\n              this.gifRecorder = null;\n            }\n          };\n          /**\r\n           * This method can be used to manually get all recorded blobs' DataURLs.\r\n           * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\r\n           * @method\r\n           * @memberof MRecordRTC\r\n           * @example\r\n           * recorder.getDataURL(function(recording){\r\n           *     var audioDataURL = recording.audio;\r\n           *     var videoDataURL = recording.video;\r\n           *     var gifDataURL   = recording.gif;\r\n           * });\r\n           */\n\n\n          this.getDataURL = function (callback) {\n            this.getBlob(function (blob) {\n              if (blob.audio && blob.video) {\n                getDataURL(blob.audio, function (_audioDataURL) {\n                  getDataURL(blob.video, function (_videoDataURL) {\n                    callback({\n                      audio: _audioDataURL,\n                      video: _videoDataURL\n                    });\n                  });\n                });\n              } else if (blob.audio) {\n                getDataURL(blob.audio, function (_audioDataURL) {\n                  callback({\n                    audio: _audioDataURL\n                  });\n                });\n              } else if (blob.video) {\n                getDataURL(blob.video, function (_videoDataURL) {\n                  callback({\n                    video: _videoDataURL\n                  });\n                });\n              }\n            });\n\n            function getDataURL(blob, callback00) {\n              if (typeof Worker !== 'undefined') {\n                var webWorker = processInWebWorker(function readFile(_blob) {\n                  postMessage(new FileReaderSync().readAsDataURL(_blob));\n                });\n\n                webWorker.onmessage = function (event) {\n                  callback00(event.data);\n                };\n\n                webWorker.postMessage(blob);\n              } else {\n                var reader = new FileReader();\n                reader.readAsDataURL(blob);\n\n                reader.onload = function (event) {\n                  callback00(event.target.result);\n                };\n              }\n            }\n\n            function processInWebWorker(_function) {\n              var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n                type: 'application/javascript'\n              }));\n              var worker = new Worker(blob);\n              var url;\n\n              if (typeof URL !== 'undefined') {\n                url = URL;\n              } else if (typeof webkitURL !== 'undefined') {\n                url = webkitURL;\n              } else {\n                throw 'Neither URL nor webkitURL detected.';\n              }\n\n              url.revokeObjectURL(blob);\n              return worker;\n            }\n          };\n          /**\r\n           * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\r\n           * @method\r\n           * @memberof MRecordRTC\r\n           * @example\r\n           * recorder.writeToDisk();\r\n           */\n\n\n          this.writeToDisk = function () {\n            RecordRTC.writeToDisk({\n              audio: this.audioRecorder,\n              video: this.videoRecorder,\n              gif: this.gifRecorder\n            });\n          };\n          /**\r\n           * This method can be used to invoke a save-as dialog for all recorded blobs.\r\n           * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\r\n           * @method\r\n           * @memberof MRecordRTC\r\n           * @example\r\n           * recorder.save({\r\n           *     audio: 'audio-file-name',\r\n           *     video: 'video-file-name',\r\n           *     gif  : 'gif-file-name'\r\n           * });\r\n           */\n\n\n          this.save = function (args) {\n            args = args || {\n              audio: true,\n              video: true,\n              gif: true\n            };\n\n            if (!!args.audio && this.audioRecorder) {\n              this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\n            }\n\n            if (!!args.video && this.videoRecorder) {\n              this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\n            }\n\n            if (!!args.gif && this.gifRecorder) {\n              this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\n            }\n          };\n        }\n        /**\r\n         * This method can be used to get all recorded blobs from IndexedDB storage.\r\n         * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\r\n         * @param {function} callback - Callback function to get all stored blobs.\r\n         * @method\r\n         * @memberof MRecordRTC\r\n         * @example\r\n         * MRecordRTC.getFromDisk('all', function(dataURL, type){\r\n         *     if(type === 'audio') { }\r\n         *     if(type === 'video') { }\r\n         *     if(type === 'gif')   { }\r\n         * });\r\n         */\n\n\n        MRecordRTC.getFromDisk = RecordRTC.getFromDisk;\n        /**\r\n         * This method can be used to store recorded blobs into IndexedDB storage.\r\n         * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n         * @method\r\n         * @memberof MRecordRTC\r\n         * @example\r\n         * MRecordRTC.writeToDisk({\r\n         *     audio: audioBlob,\r\n         *     video: videoBlob,\r\n         *     gif  : gifBlob\r\n         * });\r\n         */\n\n        MRecordRTC.writeToDisk = RecordRTC.writeToDisk;\n\n        if (typeof RecordRTC !== 'undefined') {\n          RecordRTC.MRecordRTC = MRecordRTC;\n        }\n\n        var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n\n        (function (that) {\n          if (!that) {\n            return;\n          }\n\n          if (typeof window !== 'undefined') {\n            return;\n          }\n\n          if (typeof global === 'undefined') {\n            return;\n          }\n\n          global.navigator = {\n            userAgent: browserFakeUserAgent,\n            getUserMedia: function () {}\n          };\n\n          if (!global.console) {\n            global.console = {};\n          }\n\n          if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\n            global.console.error = global.console.log = global.console.log || function () {\n              console.log(arguments);\n            };\n          }\n\n          if (typeof document === 'undefined') {\n            /*global document:true */\n            that.document = {\n              documentElement: {\n                appendChild: function () {\n                  return '';\n                }\n              }\n            };\n\n            document.createElement = document.captureStream = document.mozCaptureStream = function () {\n              var obj = {\n                getContext: function () {\n                  return obj;\n                },\n                play: function () {},\n                pause: function () {},\n                drawImage: function () {},\n                toDataURL: function () {\n                  return '';\n                },\n                style: {}\n              };\n              return obj;\n            };\n\n            that.HTMLVideoElement = function () {};\n          }\n\n          if (typeof location === 'undefined') {\n            /*global location:true */\n            that.location = {\n              protocol: 'file:',\n              href: '',\n              hash: ''\n            };\n          }\n\n          if (typeof screen === 'undefined') {\n            /*global screen:true */\n            that.screen = {\n              width: 0,\n              height: 0\n            };\n          }\n\n          if (typeof URL === 'undefined') {\n            /*global screen:true */\n            that.URL = {\n              createObjectURL: function () {\n                return '';\n              },\n              revokeObjectURL: function () {\n                return '';\n              }\n            };\n          }\n          /*global window:true */\n\n\n          that.window = global;\n        })(typeof global !== 'undefined' ? global : null); // _____________________________\n        // Cross-Browser-Declarations.js\n        // animation-frame used in WebM recording\n\n        /*jshint -W079 */\n\n\n        var requestAnimationFrame = window.requestAnimationFrame;\n\n        if (typeof requestAnimationFrame === 'undefined') {\n          if (typeof webkitRequestAnimationFrame !== 'undefined') {\n            /*global requestAnimationFrame:true */\n            requestAnimationFrame = webkitRequestAnimationFrame;\n          } else if (typeof mozRequestAnimationFrame !== 'undefined') {\n            /*global requestAnimationFrame:true */\n            requestAnimationFrame = mozRequestAnimationFrame;\n          } else if (typeof msRequestAnimationFrame !== 'undefined') {\n            /*global requestAnimationFrame:true */\n            requestAnimationFrame = msRequestAnimationFrame;\n          } else if (typeof requestAnimationFrame === 'undefined') {\n            // via: https://gist.github.com/paulirish/1579671\n            var lastTime = 0;\n            /*global requestAnimationFrame:true */\n\n            requestAnimationFrame = function (callback, element) {\n              var currTime = new Date().getTime();\n              var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n              var id = setTimeout(function () {\n                callback(currTime + timeToCall);\n              }, timeToCall);\n              lastTime = currTime + timeToCall;\n              return id;\n            };\n          }\n        }\n        /*jshint -W079 */\n\n\n        var cancelAnimationFrame = window.cancelAnimationFrame;\n\n        if (typeof cancelAnimationFrame === 'undefined') {\n          if (typeof webkitCancelAnimationFrame !== 'undefined') {\n            /*global cancelAnimationFrame:true */\n            cancelAnimationFrame = webkitCancelAnimationFrame;\n          } else if (typeof mozCancelAnimationFrame !== 'undefined') {\n            /*global cancelAnimationFrame:true */\n            cancelAnimationFrame = mozCancelAnimationFrame;\n          } else if (typeof msCancelAnimationFrame !== 'undefined') {\n            /*global cancelAnimationFrame:true */\n            cancelAnimationFrame = msCancelAnimationFrame;\n          } else if (typeof cancelAnimationFrame === 'undefined') {\n            /*global cancelAnimationFrame:true */\n            cancelAnimationFrame = function (id) {\n              clearTimeout(id);\n            };\n          }\n        } // WebAudio API representer\n\n\n        var AudioContext = window.AudioContext;\n\n        if (typeof AudioContext === 'undefined') {\n          if (typeof webkitAudioContext !== 'undefined') {\n            /*global AudioContext:true */\n            AudioContext = webkitAudioContext;\n          }\n\n          if (typeof mozAudioContext !== 'undefined') {\n            /*global AudioContext:true */\n            AudioContext = mozAudioContext;\n          }\n        }\n        /*jshint -W079 */\n\n\n        var URL = window.URL;\n\n        if (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\n          /*global URL:true */\n          URL = webkitURL;\n        }\n\n        if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') {\n          // maybe window.navigator?\n          if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n            navigator.getUserMedia = navigator.webkitGetUserMedia;\n          }\n\n          if (typeof navigator.mozGetUserMedia !== 'undefined') {\n            navigator.getUserMedia = navigator.mozGetUserMedia;\n          }\n        }\n\n        var isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\n        var isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\n        var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && 'netscape' in window && / rv:/.test(navigator.userAgent);\n        var isChrome = !isOpera && !isEdge && !!navigator.webkitGetUserMedia || isElectron() || navigator.userAgent.toLowerCase().indexOf('chrome/') !== -1;\n        var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\n        if (isSafari && !isChrome && navigator.userAgent.indexOf('CriOS') !== -1) {\n          isSafari = false;\n          isChrome = true;\n        }\n\n        var MediaStream = window.MediaStream;\n\n        if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n          MediaStream = webkitMediaStream;\n        }\n        /*global MediaStream:true */\n\n\n        if (typeof MediaStream !== 'undefined') {\n          // override \"stop\" method for all browsers\n          if (typeof MediaStream.prototype.stop === 'undefined') {\n            MediaStream.prototype.stop = function () {\n              this.getTracks().forEach(function (track) {\n                track.stop();\n              });\n            };\n          }\n        } // below function via: http://goo.gl/B3ae8c\n\n        /**\r\n         * Return human-readable file size.\r\n         * @param {number} bytes - Pass bytes and get formatted string.\r\n         * @returns {string} - formatted string\r\n         * @example\r\n         * bytesToSize(1024*1024*5) === '5 GB'\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         */\n\n\n        function bytesToSize(bytes) {\n          var k = 1000;\n          var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n\n          if (bytes === 0) {\n            return '0 Bytes';\n          }\n\n          var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\n          return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\n        }\n        /**\r\n         * @param {Blob} file - File or Blob object. This parameter is required.\r\n         * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\r\n         * @example\r\n         * invokeSaveAsDialog(blob or file, [optional] fileName);\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         */\n\n\n        function invokeSaveAsDialog(file, fileName) {\n          if (!file) {\n            throw 'Blob object is required.';\n          }\n\n          if (!file.type) {\n            try {\n              file.type = 'video/webm';\n            } catch (e) {}\n          }\n\n          var fileExtension = (file.type || 'video/webm').split('/')[1];\n\n          if (fileName && fileName.indexOf('.') !== -1) {\n            var splitted = fileName.split('.');\n            fileName = splitted[0];\n            fileExtension = splitted[1];\n          }\n\n          var fileFullName = (fileName || Math.round(Math.random() * 9999999999) + 888888888) + '.' + fileExtension;\n\n          if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\n            return navigator.msSaveOrOpenBlob(file, fileFullName);\n          } else if (typeof navigator.msSaveBlob !== 'undefined') {\n            return navigator.msSaveBlob(file, fileFullName);\n          }\n\n          var hyperlink = document.createElement('a');\n          hyperlink.href = URL.createObjectURL(file);\n          hyperlink.download = fileFullName;\n          hyperlink.style = 'display:none;opacity:0;color:transparent;';\n          (document.body || document.documentElement).appendChild(hyperlink);\n\n          if (typeof hyperlink.click === 'function') {\n            hyperlink.click();\n          } else {\n            hyperlink.target = '_blank';\n            hyperlink.dispatchEvent(new MouseEvent('click', {\n              view: window,\n              bubbles: true,\n              cancelable: true\n            }));\n          }\n\n          URL.revokeObjectURL(hyperlink.href);\n        }\n        /**\r\n         * from: https://github.com/cheton/is-electron/blob/master/index.js\r\n         **/\n\n\n        function isElectron() {\n          // Renderer process\n          if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n            return true;\n          } // Main process\n\n\n          if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\n            return true;\n          } // Detect the user agent when the `nodeIntegration` option is set to true\n\n\n          if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n            return true;\n          }\n\n          return false;\n        }\n\n        function getTracks(stream, kind) {\n          if (!stream || !stream.getTracks) {\n            return [];\n          }\n\n          return stream.getTracks().filter(function (t) {\n            return t.kind === (kind || 'audio');\n          });\n        }\n\n        function setSrcObject(stream, element) {\n          if ('srcObject' in element) {\n            element.srcObject = stream;\n          } else if ('mozSrcObject' in element) {\n            element.mozSrcObject = stream;\n          } else {\n            element.srcObject = stream;\n          }\n        }\n        /**\r\n         * @param {Blob} file - File or Blob object.\r\n         * @param {function} callback - Callback function.\r\n         * @example\r\n         * getSeekableBlob(blob or file, callback);\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         */\n\n\n        function getSeekableBlob(inputBlob, callback) {\n          // EBML.js copyrights goes to: https://github.com/legokichi/ts-ebml\n          if (typeof EBML === 'undefined') {\n            throw new Error('Please link: https://www.webrtc-experiment.com/EBML.js');\n          }\n\n          var reader = new EBML.Reader();\n          var decoder = new EBML.Decoder();\n          var tools = EBML.tools;\n          var fileReader = new FileReader();\n\n          fileReader.onload = function (e) {\n            var ebmlElms = decoder.decode(this.result);\n            ebmlElms.forEach(function (element) {\n              reader.read(element);\n            });\n            reader.stop();\n            var refinedMetadataBuf = tools.makeMetadataSeekable(reader.metadatas, reader.duration, reader.cues);\n            var body = this.result.slice(reader.metadataSize);\n            var newBlob = new Blob([refinedMetadataBuf, body], {\n              type: 'video/webm'\n            });\n            callback(newBlob);\n          };\n\n          fileReader.readAsArrayBuffer(inputBlob);\n        }\n\n        if (typeof RecordRTC !== 'undefined') {\n          RecordRTC.invokeSaveAsDialog = invokeSaveAsDialog;\n          RecordRTC.getTracks = getTracks;\n          RecordRTC.getSeekableBlob = getSeekableBlob;\n          RecordRTC.bytesToSize = bytesToSize;\n          RecordRTC.isElectron = isElectron;\n        } // __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\n        // Storage.js\n\n        /**\r\n         * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://MuazKhan.com|Muaz Khan}\r\n         * @example\r\n         * Storage.AudioContext === webkitAudioContext\r\n         * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         */\n\n\n        var Storage = {};\n\n        if (typeof AudioContext !== 'undefined') {\n          Storage.AudioContext = AudioContext;\n        } else if (typeof webkitAudioContext !== 'undefined') {\n          Storage.AudioContext = webkitAudioContext;\n        }\n\n        if (typeof RecordRTC !== 'undefined') {\n          RecordRTC.Storage = Storage;\n        }\n\n        function isMediaRecorderCompatible() {\n          if (isFirefox || isSafari || isEdge) {\n            return true;\n          }\n\n          var nVer = navigator.appVersion;\n          var nAgt = navigator.userAgent;\n          var fullVersion = '' + parseFloat(navigator.appVersion);\n          var majorVersion = parseInt(navigator.appVersion, 10);\n          var nameOffset, verOffset, ix;\n\n          if (isChrome || isOpera) {\n            verOffset = nAgt.indexOf('Chrome');\n            fullVersion = nAgt.substring(verOffset + 7);\n          } // trim the fullVersion string at semicolon/space if present\n\n\n          if ((ix = fullVersion.indexOf(';')) !== -1) {\n            fullVersion = fullVersion.substring(0, ix);\n          }\n\n          if ((ix = fullVersion.indexOf(' ')) !== -1) {\n            fullVersion = fullVersion.substring(0, ix);\n          }\n\n          majorVersion = parseInt('' + fullVersion, 10);\n\n          if (isNaN(majorVersion)) {\n            fullVersion = '' + parseFloat(navigator.appVersion);\n            majorVersion = parseInt(navigator.appVersion, 10);\n          }\n\n          return majorVersion >= 49;\n        } // ______________________\n        // MediaStreamRecorder.js\n\n        /**\r\n         * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.\r\n         * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://github.com/muaz-khan|Muaz Khan}\r\n         * @typedef MediaStreamRecorder\r\n         * @class\r\n         * @example\r\n         * var config = {\r\n         *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\r\n         *     audioBitsPerSecond : 256 * 8 * 1024,\r\n         *     videoBitsPerSecond : 256 * 8 * 1024,\r\n         *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\r\n         *     checkForInactiveTracks: true,\r\n         *     timeSlice: 1000, // concatenate intervals based blobs\r\n         *     ondataavailable: function() {} // get intervals based blobs\r\n         * }\r\n         * var recorder = new MediaStreamRecorder(mediaStream, config);\r\n         * recorder.record();\r\n         * recorder.stop(function(blob) {\r\n         *     video.src = URL.createObjectURL(blob);\r\n         *\r\n         *     // or\r\n         *     var blob = recorder.blob;\r\n         * });\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n         * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\r\n         * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\r\n         */\n\n\n        function MediaStreamRecorder(mediaStream, config) {\n          var self = this;\n\n          if (typeof mediaStream === 'undefined') {\n            throw 'First argument \"MediaStream\" is required.';\n          }\n\n          if (typeof MediaRecorder === 'undefined') {\n            throw 'Your browser does not support the Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\n          }\n\n          config = config || {\n            // bitsPerSecond: 256 * 8 * 1024,\n            mimeType: 'video/webm'\n          };\n\n          if (config.type === 'audio') {\n            if (getTracks(mediaStream, 'video').length && getTracks(mediaStream, 'audio').length) {\n              var stream;\n\n              if (!!navigator.mozGetUserMedia) {\n                stream = new MediaStream();\n                stream.addTrack(getTracks(mediaStream, 'audio')[0]);\n              } else {\n                // webkitMediaStream\n                stream = new MediaStream(getTracks(mediaStream, 'audio'));\n              }\n\n              mediaStream = stream;\n            }\n\n            if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\n              config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\n            }\n\n            if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\n              // forcing better codecs on Firefox (via #166)\n              config.mimeType = 'audio/ogg';\n            }\n          }\n\n          var arrayOfBlobs = [];\n          /**\r\n           * This method returns array of blobs. Use only with \"timeSlice\". Its useful to preview recording anytime, without using the \"stop\" method.\r\n           * @method\r\n           * @memberof MediaStreamRecorder\r\n           * @example\r\n           * var arrayOfBlobs = recorder.getArrayOfBlobs();\r\n           * @returns {Array} Returns array of recorded blobs.\r\n           */\n\n          this.getArrayOfBlobs = function () {\n            return arrayOfBlobs;\n          };\n          /**\r\n           * This method records MediaStream.\r\n           * @method\r\n           * @memberof MediaStreamRecorder\r\n           * @example\r\n           * recorder.record();\r\n           */\n\n\n          this.record = function () {\n            // set defaults\n            self.blob = null;\n            self.clearRecordedData();\n            self.timestamps = [];\n            allStates = [];\n            arrayOfBlobs = [];\n            var recorderHints = config;\n\n            if (!config.disableLogs) {\n              console.log('Passing following config over MediaRecorder API.', recorderHints);\n            }\n\n            if (mediaRecorder) {\n              // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\n              mediaRecorder = null;\n            }\n\n            if (isChrome && !isMediaRecorderCompatible()) {\n              // to support video-only recording on stable\n              recorderHints = 'video/vp8';\n            }\n\n            if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\n              if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\n                if (!config.disableLogs) {\n                  console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n                }\n\n                recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\n              }\n            } // using MediaRecorder API here\n\n\n            try {\n              mediaRecorder = new MediaRecorder(mediaStream, recorderHints); // reset\n\n              config.mimeType = recorderHints.mimeType;\n            } catch (e) {\n              // chrome-based fallback\n              mediaRecorder = new MediaRecorder(mediaStream);\n            } // old hack?\n\n\n            if (recorderHints.mimeType && !MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(recorderHints.mimeType) === false) {\n              if (!config.disableLogs) {\n                console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n              }\n            } // Dispatching OnDataAvailable Handler\n\n\n            mediaRecorder.ondataavailable = function (e) {\n              if (e.data) {\n                allStates.push('ondataavailable: ' + bytesToSize(e.data.size));\n              }\n\n              if (typeof config.timeSlice === 'number') {\n                if (e.data && e.data.size && e.data.size > 100) {\n                  arrayOfBlobs.push(e.data);\n                  updateTimeStamp();\n\n                  if (typeof config.ondataavailable === 'function') {\n                    // intervals based blobs\n                    var blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n                      type: getMimeType(recorderHints)\n                    });\n                    config.ondataavailable(blob);\n                  }\n                }\n\n                return;\n              }\n\n              if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\n                // make sure that stopRecording always getting fired\n                // even if there is invalid data\n                if (self.recordingCallback) {\n                  self.recordingCallback(new Blob([], {\n                    type: getMimeType(recorderHints)\n                  }));\n                  self.recordingCallback = null;\n                }\n\n                return;\n              }\n\n              self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n                type: getMimeType(recorderHints)\n              });\n\n              if (self.recordingCallback) {\n                self.recordingCallback(self.blob);\n                self.recordingCallback = null;\n              }\n            };\n\n            mediaRecorder.onstart = function () {\n              allStates.push('started');\n            };\n\n            mediaRecorder.onpause = function () {\n              allStates.push('paused');\n            };\n\n            mediaRecorder.onresume = function () {\n              allStates.push('resumed');\n            };\n\n            mediaRecorder.onstop = function () {\n              allStates.push('stopped');\n            };\n\n            mediaRecorder.onerror = function (error) {\n              if (!error) {\n                return;\n              }\n\n              if (!error.name) {\n                error.name = 'UnknownError';\n              }\n\n              allStates.push('error: ' + error);\n\n              if (!config.disableLogs) {\n                // via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary\n                if (error.name.toString().toLowerCase().indexOf('invalidstate') !== -1) {\n                  console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.', error);\n                } else if (error.name.toString().toLowerCase().indexOf('notsupported') !== -1) {\n                  console.error('MIME type (', recorderHints.mimeType, ') is not supported.', error);\n                } else if (error.name.toString().toLowerCase().indexOf('security') !== -1) {\n                  console.error('MediaRecorder security error', error);\n                } // older code below\n                else if (error.name === 'OutOfMemory') {\n                    console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                  } else if (error.name === 'IllegalStreamModification') {\n                    console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                  } else if (error.name === 'OtherRecordingError') {\n                    console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                  } else if (error.name === 'GenericError') {\n                    console.error('The UA cannot provide the codec or recording option that has been requested.', error);\n                  } else {\n                    console.error('MediaRecorder Error', error);\n                  }\n              }\n\n              (function (looper) {\n                if (!self.manuallyStopped && mediaRecorder && mediaRecorder.state === 'inactive') {\n                  delete config.timeslice; // 10 minutes, enough?\n\n                  mediaRecorder.start(10 * 60 * 1000);\n                  return;\n                }\n\n                setTimeout(looper, 1000);\n              })();\n\n              if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\n                mediaRecorder.stop();\n              }\n            };\n\n            if (typeof config.timeSlice === 'number') {\n              updateTimeStamp();\n              mediaRecorder.start(config.timeSlice);\n            } else {\n              // default is 60 minutes; enough?\n              // use config => {timeSlice: 1000} otherwise\n              mediaRecorder.start(3.6e+6);\n            }\n\n            if (config.initCallback) {\n              config.initCallback(); // old code\n            }\n          };\n          /**\r\n           * @property {Array} timestamps - Array of time stamps\r\n           * @memberof MediaStreamRecorder\r\n           * @example\r\n           * console.log(recorder.timestamps);\r\n           */\n\n\n          this.timestamps = [];\n\n          function updateTimeStamp() {\n            self.timestamps.push(new Date().getTime());\n\n            if (typeof config.onTimeStamp === 'function') {\n              config.onTimeStamp(self.timestamps[self.timestamps.length - 1], self.timestamps);\n            }\n          }\n\n          function getMimeType(secondObject) {\n            if (mediaRecorder && mediaRecorder.mimeType) {\n              return mediaRecorder.mimeType;\n            }\n\n            return secondObject.mimeType || 'video/webm';\n          }\n          /**\r\n           * This method stops recording MediaStream.\r\n           * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n           * @method\r\n           * @memberof MediaStreamRecorder\r\n           * @example\r\n           * recorder.stop(function(blob) {\r\n           *     video.src = URL.createObjectURL(blob);\r\n           * });\r\n           */\n\n\n          this.stop = function (callback) {\n            callback = callback || function () {};\n\n            self.manuallyStopped = true; // used inside the mediaRecorder.onerror\n\n            if (!mediaRecorder) {\n              return;\n            }\n\n            this.recordingCallback = callback;\n\n            if (mediaRecorder.state === 'recording') {\n              mediaRecorder.stop();\n            }\n\n            if (typeof config.timeSlice === 'number') {\n              setTimeout(function () {\n                self.blob = new Blob(arrayOfBlobs, {\n                  type: getMimeType(config)\n                });\n                self.recordingCallback(self.blob);\n              }, 100);\n            }\n          };\n          /**\r\n           * This method pauses the recording process.\r\n           * @method\r\n           * @memberof MediaStreamRecorder\r\n           * @example\r\n           * recorder.pause();\r\n           */\n\n\n          this.pause = function () {\n            if (!mediaRecorder) {\n              return;\n            }\n\n            if (mediaRecorder.state === 'recording') {\n              mediaRecorder.pause();\n            }\n          };\n          /**\r\n           * This method resumes the recording process.\r\n           * @method\r\n           * @memberof MediaStreamRecorder\r\n           * @example\r\n           * recorder.resume();\r\n           */\n\n\n          this.resume = function () {\n            if (!mediaRecorder) {\n              return;\n            }\n\n            if (mediaRecorder.state === 'paused') {\n              mediaRecorder.resume();\n            }\n          };\n          /**\r\n           * This method resets currently recorded data.\r\n           * @method\r\n           * @memberof MediaStreamRecorder\r\n           * @example\r\n           * recorder.clearRecordedData();\r\n           */\n\n\n          this.clearRecordedData = function () {\n            if (mediaRecorder && mediaRecorder.state === 'recording') {\n              self.stop(clearRecordedDataCB);\n            }\n\n            clearRecordedDataCB();\n          };\n\n          function clearRecordedDataCB() {\n            arrayOfBlobs = [];\n            mediaRecorder = null;\n            self.timestamps = [];\n          } // Reference to \"MediaRecorder\" object\n\n\n          var mediaRecorder;\n          /**\r\n           * Access to native MediaRecorder API\r\n           * @method\r\n           * @memberof MediaStreamRecorder\r\n           * @instance\r\n           * @example\r\n           * var internal = recorder.getInternalRecorder();\r\n           * internal.ondataavailable = function() {}; // override\r\n           * internal.stream, internal.onpause, internal.onstop, etc.\r\n           * @returns {Object} Returns internal recording object.\r\n           */\n\n          this.getInternalRecorder = function () {\n            return mediaRecorder;\n          };\n\n          function isMediaStreamActive() {\n            if ('active' in mediaStream) {\n              if (!mediaStream.active) {\n                return false;\n              }\n            } else if ('ended' in mediaStream) {\n              // old hack\n              if (mediaStream.ended) {\n                return false;\n              }\n            }\n\n            return true;\n          }\n          /**\r\n           * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n           * @memberof MediaStreamRecorder\r\n           * @example\r\n           * recorder.stop(function() {\r\n           *     var blob = recorder.blob;\r\n           * });\r\n           */\n\n\n          this.blob = null;\n          /**\r\n           * Get MediaRecorder readonly state.\r\n           * @method\r\n           * @memberof MediaStreamRecorder\r\n           * @example\r\n           * var state = recorder.getState();\r\n           * @returns {String} Returns recording state.\r\n           */\n\n          this.getState = function () {\n            if (!mediaRecorder) {\n              return 'inactive';\n            }\n\n            return mediaRecorder.state || 'inactive';\n          }; // list of all recording states\n\n\n          var allStates = [];\n          /**\r\n           * Get MediaRecorder all recording states.\r\n           * @method\r\n           * @memberof MediaStreamRecorder\r\n           * @example\r\n           * var state = recorder.getAllStates();\r\n           * @returns {Array} Returns all recording states\r\n           */\n\n          this.getAllStates = function () {\n            return allStates;\n          }; // if any Track within the MediaStream is muted or not enabled at any time, \n          // the browser will only record black frames \n          // or silence since that is the content produced by the Track\n          // so we need to stopRecording as soon as any single track ends.\n\n\n          if (typeof config.checkForInactiveTracks === 'undefined') {\n            config.checkForInactiveTracks = false; // disable to minimize CPU usage\n          }\n\n          var self = this; // this method checks if media stream is stopped\n          // or if any track is ended.\n\n          (function looper() {\n            if (!mediaRecorder || config.checkForInactiveTracks === false) {\n              return;\n            }\n\n            if (isMediaStreamActive() === false) {\n              if (!config.disableLogs) {\n                console.log('MediaStream seems stopped.');\n              }\n\n              self.stop();\n              return;\n            }\n\n            setTimeout(looper, 1000); // check every second\n          })(); // for debugging\n\n\n          this.name = 'MediaStreamRecorder';\n\n          this.toString = function () {\n            return this.name;\n          };\n        }\n\n        if (typeof RecordRTC !== 'undefined') {\n          RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\n        } // source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\n        // https://github.com/mattdiamond/Recorderjs#license-mit\n        // ______________________\n        // StereoAudioRecorder.js\n\n        /**\r\n         * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\r\n         * @summary JavaScript standalone object for stereo audio recording.\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://MuazKhan.com|Muaz Khan}\r\n         * @typedef StereoAudioRecorder\r\n         * @class\r\n         * @example\r\n         * var recorder = new StereoAudioRecorder(MediaStream, {\r\n         *     sampleRate: 44100,\r\n         *     bufferSize: 4096\r\n         * });\r\n         * recorder.record();\r\n         * recorder.stop(function(blob) {\r\n         *     video.src = URL.createObjectURL(blob);\r\n         * });\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n         * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\r\n         */\n\n\n        function StereoAudioRecorder(mediaStream, config) {\n          if (!getTracks(mediaStream, 'audio').length) {\n            throw 'Your stream has no audio tracks.';\n          }\n\n          config = config || {};\n          var self = this; // variables\n\n          var leftchannel = [];\n          var rightchannel = [];\n          var recording = false;\n          var recordingLength = 0;\n          var jsAudioNode;\n          var numberOfAudioChannels = 2;\n          /**\r\n           * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\r\n           * @property {number} desiredSampRate - Desired Bits per sample * 1000\r\n           * @memberof StereoAudioRecorder\r\n           * @instance\r\n           * @example\r\n           * var recorder = StereoAudioRecorder(mediaStream, {\r\n           *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\r\n           * });\r\n           */\n\n          var desiredSampRate = config.desiredSampRate; // backward compatibility\n\n          if (config.leftChannel === true) {\n            numberOfAudioChannels = 1;\n          }\n\n          if (config.numberOfAudioChannels === 1) {\n            numberOfAudioChannels = 1;\n          }\n\n          if (!numberOfAudioChannels || numberOfAudioChannels < 1) {\n            numberOfAudioChannels = 2;\n          }\n\n          if (!config.disableLogs) {\n            console.log('StereoAudioRecorder is set to record number of channels: ' + numberOfAudioChannels);\n          } // if any Track within the MediaStream is muted or not enabled at any time, \n          // the browser will only record black frames \n          // or silence since that is the content produced by the Track\n          // so we need to stopRecording as soon as any single track ends.\n\n\n          if (typeof config.checkForInactiveTracks === 'undefined') {\n            config.checkForInactiveTracks = true;\n          }\n\n          function isMediaStreamActive() {\n            if (config.checkForInactiveTracks === false) {\n              // always return \"true\"\n              return true;\n            }\n\n            if ('active' in mediaStream) {\n              if (!mediaStream.active) {\n                return false;\n              }\n            } else if ('ended' in mediaStream) {\n              // old hack\n              if (mediaStream.ended) {\n                return false;\n              }\n            }\n\n            return true;\n          }\n          /**\r\n           * This method records MediaStream.\r\n           * @method\r\n           * @memberof StereoAudioRecorder\r\n           * @example\r\n           * recorder.record();\r\n           */\n\n\n          this.record = function () {\n            if (isMediaStreamActive() === false) {\n              throw 'Please make sure MediaStream is active.';\n            }\n\n            resetVariables();\n            isAudioProcessStarted = isPaused = false;\n            recording = true;\n\n            if (typeof config.timeSlice !== 'undefined') {\n              looper();\n            }\n          };\n\n          function mergeLeftRightBuffers(config, callback) {\n            function mergeAudioBuffers(config, cb) {\n              var numberOfAudioChannels = config.numberOfAudioChannels; // todo: \"slice(0)\" --- is it causes loop? Should be removed?\n\n              var leftBuffers = config.leftBuffers.slice(0);\n              var rightBuffers = config.rightBuffers.slice(0);\n              var sampleRate = config.sampleRate;\n              var internalInterleavedLength = config.internalInterleavedLength;\n              var desiredSampRate = config.desiredSampRate;\n\n              if (numberOfAudioChannels === 2) {\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n                rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\n\n                if (desiredSampRate) {\n                  leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\n                  rightBuffers = interpolateArray(rightBuffers, desiredSampRate, sampleRate);\n                }\n              }\n\n              if (numberOfAudioChannels === 1) {\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n\n                if (desiredSampRate) {\n                  leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\n                }\n              } // set sample rate as desired sample rate\n\n\n              if (desiredSampRate) {\n                sampleRate = desiredSampRate;\n              } // for changing the sampling rate, reference:\n              // http://stackoverflow.com/a/28977136/552182\n\n\n              function interpolateArray(data, newSampleRate, oldSampleRate) {\n                var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));\n                var newData = [];\n                var springFactor = Number((data.length - 1) / (fitCount - 1));\n                newData[0] = data[0];\n\n                for (var i = 1; i < fitCount - 1; i++) {\n                  var tmp = i * springFactor;\n                  var before = Number(Math.floor(tmp)).toFixed();\n                  var after = Number(Math.ceil(tmp)).toFixed();\n                  var atPoint = tmp - before;\n                  newData[i] = linearInterpolate(data[before], data[after], atPoint);\n                }\n\n                newData[fitCount - 1] = data[data.length - 1];\n                return newData;\n              }\n\n              function linearInterpolate(before, after, atPoint) {\n                return before + (after - before) * atPoint;\n              }\n\n              function mergeBuffers(channelBuffer, rLength) {\n                var result = new Float64Array(rLength);\n                var offset = 0;\n                var lng = channelBuffer.length;\n\n                for (var i = 0; i < lng; i++) {\n                  var buffer = channelBuffer[i];\n                  result.set(buffer, offset);\n                  offset += buffer.length;\n                }\n\n                return result;\n              }\n\n              function interleave(leftChannel, rightChannel) {\n                var length = leftChannel.length + rightChannel.length;\n                var result = new Float64Array(length);\n                var inputIndex = 0;\n\n                for (var index = 0; index < length;) {\n                  result[index++] = leftChannel[inputIndex];\n                  result[index++] = rightChannel[inputIndex];\n                  inputIndex++;\n                }\n\n                return result;\n              }\n\n              function writeUTFBytes(view, offset, string) {\n                var lng = string.length;\n\n                for (var i = 0; i < lng; i++) {\n                  view.setUint8(offset + i, string.charCodeAt(i));\n                }\n              } // interleave both channels together\n\n\n              var interleaved;\n\n              if (numberOfAudioChannels === 2) {\n                interleaved = interleave(leftBuffers, rightBuffers);\n              }\n\n              if (numberOfAudioChannels === 1) {\n                interleaved = leftBuffers;\n              }\n\n              var interleavedLength = interleaved.length; // create wav file\n\n              var resultingBufferLength = 44 + interleavedLength * 2;\n              var buffer = new ArrayBuffer(resultingBufferLength);\n              var view = new DataView(buffer); // RIFF chunk descriptor/identifier \n\n              writeUTFBytes(view, 0, 'RIFF'); // RIFF chunk length\n              // changed \"44\" to \"36\" via #401\n\n              view.setUint32(4, 36 + interleavedLength * 2, true); // RIFF type \n\n              writeUTFBytes(view, 8, 'WAVE'); // format chunk identifier \n              // FMT sub-chunk\n\n              writeUTFBytes(view, 12, 'fmt '); // format chunk length \n\n              view.setUint32(16, 16, true); // sample format (raw)\n\n              view.setUint16(20, 1, true); // stereo (2 channels)\n\n              view.setUint16(22, numberOfAudioChannels, true); // sample rate \n\n              view.setUint32(24, sampleRate, true); // byte rate (sample rate * block align)\n\n              view.setUint32(28, sampleRate * 2, true); // block align (channel count * bytes per sample) \n\n              view.setUint16(32, numberOfAudioChannels * 2, true); // bits per sample \n\n              view.setUint16(34, 16, true); // data sub-chunk\n              // data chunk identifier \n\n              writeUTFBytes(view, 36, 'data'); // data chunk length \n\n              view.setUint32(40, interleavedLength * 2, true); // write the PCM samples\n\n              var lng = interleavedLength;\n              var index = 44;\n              var volume = 1;\n\n              for (var i = 0; i < lng; i++) {\n                view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\n                index += 2;\n              }\n\n              if (cb) {\n                return cb({\n                  buffer: buffer,\n                  view: view\n                });\n              }\n\n              postMessage({\n                buffer: buffer,\n                view: view\n              });\n            }\n\n            if (config.noWorker) {\n              mergeAudioBuffers(config, function (data) {\n                callback(data.buffer, data.view);\n              });\n              return;\n            }\n\n            var webWorker = processInWebWorker(mergeAudioBuffers);\n\n            webWorker.onmessage = function (event) {\n              callback(event.data.buffer, event.data.view); // release memory\n\n              URL.revokeObjectURL(webWorker.workerURL); // kill webworker (or Chrome will kill your page after ~25 calls)\n\n              webWorker.terminate();\n            };\n\n            webWorker.postMessage(config);\n          }\n\n          function processInWebWorker(_function) {\n            var workerURL = URL.createObjectURL(new Blob([_function.toString(), ';this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n              type: 'application/javascript'\n            }));\n            var worker = new Worker(workerURL);\n            worker.workerURL = workerURL;\n            return worker;\n          }\n          /**\r\n           * This method stops recording MediaStream.\r\n           * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n           * @method\r\n           * @memberof StereoAudioRecorder\r\n           * @example\r\n           * recorder.stop(function(blob) {\r\n           *     video.src = URL.createObjectURL(blob);\r\n           * });\r\n           */\n\n\n          this.stop = function (callback) {\n            callback = callback || function () {}; // stop recording\n\n\n            recording = false;\n            mergeLeftRightBuffers({\n              desiredSampRate: desiredSampRate,\n              sampleRate: sampleRate,\n              numberOfAudioChannels: numberOfAudioChannels,\n              internalInterleavedLength: recordingLength,\n              leftBuffers: leftchannel,\n              rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel,\n              noWorker: config.noWorker\n            }, function (buffer, view) {\n              /**\r\n               * @property {Blob} blob - The recorded blob object.\r\n               * @memberof StereoAudioRecorder\r\n               * @example\r\n               * recorder.stop(function(){\r\n               *     var blob = recorder.blob;\r\n               * });\r\n               */\n              self.blob = new Blob([view], {\n                type: 'audio/wav'\n              });\n              /**\r\n               * @property {ArrayBuffer} buffer - The recorded buffer object.\r\n               * @memberof StereoAudioRecorder\r\n               * @example\r\n               * recorder.stop(function(){\r\n               *     var buffer = recorder.buffer;\r\n               * });\r\n               */\n\n              self.buffer = new ArrayBuffer(view.buffer.byteLength);\n              /**\r\n               * @property {DataView} view - The recorded data-view object.\r\n               * @memberof StereoAudioRecorder\r\n               * @example\r\n               * recorder.stop(function(){\r\n               *     var view = recorder.view;\r\n               * });\r\n               */\n\n              self.view = view;\n              self.sampleRate = desiredSampRate || sampleRate;\n              self.bufferSize = bufferSize; // recorded audio length\n\n              self.length = recordingLength;\n              isAudioProcessStarted = false;\n\n              if (callback) {\n                callback(self.blob);\n              }\n            });\n          };\n\n          if (typeof RecordRTC.Storage === 'undefined') {\n            RecordRTC.Storage = {\n              AudioContextConstructor: null,\n              AudioContext: window.AudioContext || window.webkitAudioContext\n            };\n          }\n\n          if (!RecordRTC.Storage.AudioContextConstructor || RecordRTC.Storage.AudioContextConstructor.state === 'closed') {\n            RecordRTC.Storage.AudioContextConstructor = new RecordRTC.Storage.AudioContext();\n          }\n\n          var context = RecordRTC.Storage.AudioContextConstructor; // creates an audio node from the microphone incoming stream\n\n          var audioInput = context.createMediaStreamSource(mediaStream);\n          var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\n          /**\r\n           * From the spec: This value controls how frequently the audioprocess event is\r\n           * dispatched and how many sample-frames need to be processed each call.\r\n           * Lower values for buffer size will result in a lower (better) latency.\r\n           * Higher values will be necessary to avoid audio breakup and glitches\r\n           * The size of the buffer (in sample-frames) which needs to\r\n           * be processed each time onprocessaudio is called.\r\n           * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\r\n           * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\r\n           * @memberof StereoAudioRecorder\r\n           * @example\r\n           * recorder = new StereoAudioRecorder(mediaStream, {\r\n           *     bufferSize: 4096\r\n           * });\r\n           */\n          // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\n\n          var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\n\n          if (legalBufferValues.indexOf(bufferSize) === -1) {\n            if (!config.disableLogs) {\n              console.log('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\n            }\n          }\n\n          if (context.createJavaScriptNode) {\n            jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n          } else if (context.createScriptProcessor) {\n            jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n          } else {\n            throw 'WebAudio API has no support on this browser.';\n          } // connect the stream to the script processor\n\n\n          audioInput.connect(jsAudioNode);\n\n          if (!config.bufferSize) {\n            bufferSize = jsAudioNode.bufferSize; // device buffer-size\n          }\n          /**\r\n           * The sample rate (in sample-frames per second) at which the\r\n           * AudioContext handles audio. It is assumed that all AudioNodes\r\n           * in the context run at this rate. In making this assumption,\r\n           * sample-rate converters or \"varispeed\" processors are not supported\r\n           * in real-time processing.\r\n           * The sampleRate parameter describes the sample-rate of the\r\n           * linear PCM audio data in the buffer in sample-frames per second.\r\n           * An implementation must support sample-rates in at least\r\n           * the range 22050 to 96000.\r\n           * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\r\n           * @memberof StereoAudioRecorder\r\n           * @example\r\n           * recorder = new StereoAudioRecorder(mediaStream, {\r\n           *     sampleRate: 44100\r\n           * });\r\n           */\n\n\n          var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\n\n          if (sampleRate < 22050 || sampleRate > 96000) {\n            // Ref: http://stackoverflow.com/a/26303918/552182\n            if (!config.disableLogs) {\n              console.log('sample-rate must be under range 22050 and 96000.');\n            }\n          }\n\n          if (!config.disableLogs) {\n            if (config.desiredSampRate) {\n              console.log('Desired sample-rate: ' + config.desiredSampRate);\n            }\n          }\n\n          var isPaused = false;\n          /**\r\n           * This method pauses the recording process.\r\n           * @method\r\n           * @memberof StereoAudioRecorder\r\n           * @example\r\n           * recorder.pause();\r\n           */\n\n          this.pause = function () {\n            isPaused = true;\n          };\n          /**\r\n           * This method resumes the recording process.\r\n           * @method\r\n           * @memberof StereoAudioRecorder\r\n           * @example\r\n           * recorder.resume();\r\n           */\n\n\n          this.resume = function () {\n            if (isMediaStreamActive() === false) {\n              throw 'Please make sure MediaStream is active.';\n            }\n\n            if (!recording) {\n              if (!config.disableLogs) {\n                console.log('Seems recording has been restarted.');\n              }\n\n              this.record();\n              return;\n            }\n\n            isPaused = false;\n          };\n          /**\r\n           * This method resets currently recorded data.\r\n           * @method\r\n           * @memberof StereoAudioRecorder\r\n           * @example\r\n           * recorder.clearRecordedData();\r\n           */\n\n\n          this.clearRecordedData = function () {\n            config.checkForInactiveTracks = false;\n\n            if (recording) {\n              this.stop(clearRecordedDataCB);\n            }\n\n            clearRecordedDataCB();\n          };\n\n          function resetVariables() {\n            leftchannel = [];\n            rightchannel = [];\n            recordingLength = 0;\n            isAudioProcessStarted = false;\n            recording = false;\n            isPaused = false;\n            context = null;\n            self.leftchannel = leftchannel;\n            self.rightchannel = rightchannel;\n            self.numberOfAudioChannels = numberOfAudioChannels;\n            self.desiredSampRate = desiredSampRate;\n            self.sampleRate = sampleRate;\n            self.recordingLength = recordingLength;\n            intervalsBasedBuffers = {\n              left: [],\n              right: [],\n              recordingLength: 0\n            };\n          }\n\n          function clearRecordedDataCB() {\n            if (jsAudioNode) {\n              jsAudioNode.onaudioprocess = null;\n              jsAudioNode.disconnect();\n              jsAudioNode = null;\n            }\n\n            if (audioInput) {\n              audioInput.disconnect();\n              audioInput = null;\n            }\n\n            resetVariables();\n          } // for debugging\n\n\n          this.name = 'StereoAudioRecorder';\n\n          this.toString = function () {\n            return this.name;\n          };\n\n          var isAudioProcessStarted = false;\n\n          function onAudioProcessDataAvailable(e) {\n            if (isPaused) {\n              return;\n            }\n\n            if (isMediaStreamActive() === false) {\n              if (!config.disableLogs) {\n                console.log('MediaStream seems stopped.');\n              }\n\n              jsAudioNode.disconnect();\n              recording = false;\n            }\n\n            if (!recording) {\n              if (audioInput) {\n                audioInput.disconnect();\n                audioInput = null;\n              }\n\n              return;\n            }\n            /**\r\n             * This method is called on \"onaudioprocess\" event's first invocation.\r\n             * @method {function} onAudioProcessStarted\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.onAudioProcessStarted: function() { };\r\n             */\n\n\n            if (!isAudioProcessStarted) {\n              isAudioProcessStarted = true;\n\n              if (config.onAudioProcessStarted) {\n                config.onAudioProcessStarted();\n              }\n\n              if (config.initCallback) {\n                config.initCallback();\n              }\n            }\n\n            var left = e.inputBuffer.getChannelData(0); // we clone the samples\n\n            var chLeft = new Float32Array(left);\n            leftchannel.push(chLeft);\n\n            if (numberOfAudioChannels === 2) {\n              var right = e.inputBuffer.getChannelData(1);\n              var chRight = new Float32Array(right);\n              rightchannel.push(chRight);\n            }\n\n            recordingLength += bufferSize; // export raw PCM\n\n            self.recordingLength = recordingLength;\n\n            if (typeof config.timeSlice !== 'undefined') {\n              intervalsBasedBuffers.recordingLength += bufferSize;\n              intervalsBasedBuffers.left.push(chLeft);\n\n              if (numberOfAudioChannels === 2) {\n                intervalsBasedBuffers.right.push(chRight);\n              }\n            }\n          }\n\n          jsAudioNode.onaudioprocess = onAudioProcessDataAvailable; // to prevent self audio to be connected with speakers\n\n          if (context.createMediaStreamDestination) {\n            jsAudioNode.connect(context.createMediaStreamDestination());\n          } else {\n            jsAudioNode.connect(context.destination);\n          } // export raw PCM\n\n\n          this.leftchannel = leftchannel;\n          this.rightchannel = rightchannel;\n          this.numberOfAudioChannels = numberOfAudioChannels;\n          this.desiredSampRate = desiredSampRate;\n          this.sampleRate = sampleRate;\n          self.recordingLength = recordingLength; // helper for intervals based blobs\n\n          var intervalsBasedBuffers = {\n            left: [],\n            right: [],\n            recordingLength: 0\n          }; // this looper is used to support intervals based blobs (via timeSlice+ondataavailable)\n\n          function looper() {\n            if (!recording || typeof config.ondataavailable !== 'function' || typeof config.timeSlice === 'undefined') {\n              return;\n            }\n\n            if (intervalsBasedBuffers.left.length) {\n              mergeLeftRightBuffers({\n                desiredSampRate: desiredSampRate,\n                sampleRate: sampleRate,\n                numberOfAudioChannels: numberOfAudioChannels,\n                internalInterleavedLength: intervalsBasedBuffers.recordingLength,\n                leftBuffers: intervalsBasedBuffers.left,\n                rightBuffers: numberOfAudioChannels === 1 ? [] : intervalsBasedBuffers.right\n              }, function (buffer, view) {\n                var blob = new Blob([view], {\n                  type: 'audio/wav'\n                });\n                config.ondataavailable(blob);\n                setTimeout(looper, config.timeSlice);\n              });\n              intervalsBasedBuffers = {\n                left: [],\n                right: [],\n                recordingLength: 0\n              };\n            } else {\n              setTimeout(looper, config.timeSlice);\n            }\n          }\n        }\n\n        if (typeof RecordRTC !== 'undefined') {\n          RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\n        } // _________________\n        // CanvasRecorder.js\n\n        /**\r\n         * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\r\n         * @summary HTML2Canvas recording into video WebM.\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://MuazKhan.com|Muaz Khan}\r\n         * @typedef CanvasRecorder\r\n         * @class\r\n         * @example\r\n         * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });\r\n         * recorder.record();\r\n         * recorder.stop(function(blob) {\r\n         *     video.src = URL.createObjectURL(blob);\r\n         * });\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\r\n         * @param {object} config - {disableLogs:true, initCallback: function}\r\n         */\n\n\n        function CanvasRecorder(htmlElement, config) {\n          if (typeof html2canvas === 'undefined') {\n            throw 'Please link: https://www.webrtc-experiment.com/screenshot.js';\n          }\n\n          config = config || {};\n\n          if (!config.frameInterval) {\n            config.frameInterval = 10;\n          } // via DetectRTC.js\n\n\n          var isCanvasSupportsStreamCapturing = false;\n          ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function (item) {\n            if (item in document.createElement('canvas')) {\n              isCanvasSupportsStreamCapturing = true;\n            }\n          });\n\n          var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\n\n          var chromeVersion = 50;\n          var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n\n          if (_isChrome && matchArray && matchArray[2]) {\n            chromeVersion = parseInt(matchArray[2], 10);\n          }\n\n          if (_isChrome && chromeVersion < 52) {\n            isCanvasSupportsStreamCapturing = false;\n          }\n\n          if (config.useWhammyRecorder) {\n            isCanvasSupportsStreamCapturing = false;\n          }\n\n          var globalCanvas, mediaStreamRecorder;\n\n          if (isCanvasSupportsStreamCapturing) {\n            if (!config.disableLogs) {\n              console.log('Your browser supports both MediRecorder API and canvas.captureStream!');\n            }\n\n            if (htmlElement instanceof HTMLCanvasElement) {\n              globalCanvas = htmlElement;\n            } else if (htmlElement instanceof CanvasRenderingContext2D) {\n              globalCanvas = htmlElement.canvas;\n            } else {\n              throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\n            }\n          } else if (!!navigator.mozGetUserMedia) {\n            if (!config.disableLogs) {\n              console.error('Canvas recording is NOT supported in Firefox.');\n            }\n          }\n\n          var isRecording;\n          /**\r\n           * This method records Canvas.\r\n           * @method\r\n           * @memberof CanvasRecorder\r\n           * @example\r\n           * recorder.record();\r\n           */\n\n          this.record = function () {\n            isRecording = true;\n\n            if (isCanvasSupportsStreamCapturing && !config.useWhammyRecorder) {\n              // CanvasCaptureMediaStream\n              var canvasMediaStream;\n\n              if ('captureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\n              } else if ('mozCaptureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.mozCaptureStream(25);\n              } else if ('webkitCaptureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.webkitCaptureStream(25);\n              }\n\n              try {\n                var mdStream = new MediaStream();\n                mdStream.addTrack(getTracks(canvasMediaStream, 'video')[0]);\n                canvasMediaStream = mdStream;\n              } catch (e) {}\n\n              if (!canvasMediaStream) {\n                throw 'captureStream API are NOT available.';\n              } // Note: Jan 18, 2016 status is that, \n              // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\n\n\n              mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\n                mimeType: config.mimeType || 'video/webm'\n              });\n              mediaStreamRecorder.record();\n            } else {\n              whammy.frames = [];\n              lastTime = new Date().getTime();\n              drawCanvasFrame();\n            }\n\n            if (config.initCallback) {\n              config.initCallback();\n            }\n          };\n\n          this.getWebPImages = function (callback) {\n            if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\n              callback();\n              return;\n            }\n\n            var framesLength = whammy.frames.length;\n            whammy.frames.forEach(function (frame, idx) {\n              var framesRemaining = framesLength - idx;\n\n              if (!config.disableLogs) {\n                console.log(framesRemaining + '/' + framesLength + ' frames remaining');\n              }\n\n              if (config.onEncodingCallback) {\n                config.onEncodingCallback(framesRemaining, framesLength);\n              }\n\n              var webp = frame.image.toDataURL('image/webp', 1);\n              whammy.frames[idx].image = webp;\n            });\n\n            if (!config.disableLogs) {\n              console.log('Generating WebM');\n            }\n\n            callback();\n          };\n          /**\r\n           * This method stops recording Canvas.\r\n           * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n           * @method\r\n           * @memberof CanvasRecorder\r\n           * @example\r\n           * recorder.stop(function(blob) {\r\n           *     video.src = URL.createObjectURL(blob);\r\n           * });\r\n           */\n\n\n          this.stop = function (callback) {\n            isRecording = false;\n            var that = this;\n\n            if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\n              mediaStreamRecorder.stop(callback);\n              return;\n            }\n\n            this.getWebPImages(function () {\n              /**\r\n               * @property {Blob} blob - Recorded frames in video/webm blob.\r\n               * @memberof CanvasRecorder\r\n               * @example\r\n               * recorder.stop(function() {\r\n               *     var blob = recorder.blob;\r\n               * });\r\n               */\n              whammy.compile(function (blob) {\n                if (!config.disableLogs) {\n                  console.log('Recording finished!');\n                }\n\n                that.blob = blob;\n\n                if (that.blob.forEach) {\n                  that.blob = new Blob([], {\n                    type: 'video/webm'\n                  });\n                }\n\n                if (callback) {\n                  callback(that.blob);\n                }\n\n                whammy.frames = [];\n              });\n            });\n          };\n\n          var isPausedRecording = false;\n          /**\r\n           * This method pauses the recording process.\r\n           * @method\r\n           * @memberof CanvasRecorder\r\n           * @example\r\n           * recorder.pause();\r\n           */\n\n          this.pause = function () {\n            isPausedRecording = true;\n\n            if (mediaStreamRecorder instanceof MediaStreamRecorder) {\n              mediaStreamRecorder.pause();\n              return;\n            }\n          };\n          /**\r\n           * This method resumes the recording process.\r\n           * @method\r\n           * @memberof CanvasRecorder\r\n           * @example\r\n           * recorder.resume();\r\n           */\n\n\n          this.resume = function () {\n            isPausedRecording = false;\n\n            if (mediaStreamRecorder instanceof MediaStreamRecorder) {\n              mediaStreamRecorder.resume();\n              return;\n            }\n\n            if (!isRecording) {\n              this.record();\n            }\n          };\n          /**\r\n           * This method resets currently recorded data.\r\n           * @method\r\n           * @memberof CanvasRecorder\r\n           * @example\r\n           * recorder.clearRecordedData();\r\n           */\n\n\n          this.clearRecordedData = function () {\n            if (isRecording) {\n              this.stop(clearRecordedDataCB);\n            }\n\n            clearRecordedDataCB();\n          };\n\n          function clearRecordedDataCB() {\n            whammy.frames = [];\n            isRecording = false;\n            isPausedRecording = false;\n          } // for debugging\n\n\n          this.name = 'CanvasRecorder';\n\n          this.toString = function () {\n            return this.name;\n          };\n\n          function cloneCanvas() {\n            //create a new canvas\n            var newCanvas = document.createElement('canvas');\n            var context = newCanvas.getContext('2d'); //set dimensions\n\n            newCanvas.width = htmlElement.width;\n            newCanvas.height = htmlElement.height; //apply the old canvas to the new one\n\n            context.drawImage(htmlElement, 0, 0); //return the new canvas\n\n            return newCanvas;\n          }\n\n          function drawCanvasFrame() {\n            if (isPausedRecording) {\n              lastTime = new Date().getTime();\n              return setTimeout(drawCanvasFrame, 500);\n            }\n\n            if (htmlElement.nodeName.toLowerCase() === 'canvas') {\n              var duration = new Date().getTime() - lastTime; // via #206, by Jack i.e. @Seymourr\n\n              lastTime = new Date().getTime();\n              whammy.frames.push({\n                image: cloneCanvas(),\n                duration: duration\n              });\n\n              if (isRecording) {\n                setTimeout(drawCanvasFrame, config.frameInterval);\n              }\n\n              return;\n            }\n\n            html2canvas(htmlElement, {\n              grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\n              onrendered: function (canvas) {\n                var duration = new Date().getTime() - lastTime;\n\n                if (!duration) {\n                  return setTimeout(drawCanvasFrame, config.frameInterval);\n                } // via #206, by Jack i.e. @Seymourr\n\n\n                lastTime = new Date().getTime();\n                whammy.frames.push({\n                  image: canvas.toDataURL('image/webp', 1),\n                  duration: duration\n                });\n\n                if (isRecording) {\n                  setTimeout(drawCanvasFrame, config.frameInterval);\n                }\n              }\n            });\n          }\n\n          var lastTime = new Date().getTime();\n          var whammy = new Whammy.Video(100);\n        }\n\n        if (typeof RecordRTC !== 'undefined') {\n          RecordRTC.CanvasRecorder = CanvasRecorder;\n        } // _________________\n        // WhammyRecorder.js\n\n        /**\r\n         * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\r\n         * @summary Video recording feature in Chrome.\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://MuazKhan.com|Muaz Khan}\r\n         * @typedef WhammyRecorder\r\n         * @class\r\n         * @example\r\n         * var recorder = new WhammyRecorder(mediaStream);\r\n         * recorder.record();\r\n         * recorder.stop(function(blob) {\r\n         *     video.src = URL.createObjectURL(blob);\r\n         * });\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n         * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\r\n         */\n\n\n        function WhammyRecorder(mediaStream, config) {\n          config = config || {};\n\n          if (!config.frameInterval) {\n            config.frameInterval = 10;\n          }\n\n          if (!config.disableLogs) {\n            console.log('Using frames-interval:', config.frameInterval);\n          }\n          /**\r\n           * This method records video.\r\n           * @method\r\n           * @memberof WhammyRecorder\r\n           * @example\r\n           * recorder.record();\r\n           */\n\n\n          this.record = function () {\n            if (!config.width) {\n              config.width = 320;\n            }\n\n            if (!config.height) {\n              config.height = 240;\n            }\n\n            if (!config.video) {\n              config.video = {\n                width: config.width,\n                height: config.height\n              };\n            }\n\n            if (!config.canvas) {\n              config.canvas = {\n                width: config.width,\n                height: config.height\n              };\n            }\n\n            canvas.width = config.canvas.width || 320;\n            canvas.height = config.canvas.height || 240;\n            context = canvas.getContext('2d'); // setting defaults\n\n            if (config.video && config.video instanceof HTMLVideoElement) {\n              video = config.video.cloneNode();\n\n              if (config.initCallback) {\n                config.initCallback();\n              }\n            } else {\n              video = document.createElement('video');\n              setSrcObject(mediaStream, video);\n\n              video.onloadedmetadata = function () {\n                // \"onloadedmetadata\" may NOT work in FF?\n                if (config.initCallback) {\n                  config.initCallback();\n                }\n              };\n\n              video.width = config.video.width;\n              video.height = config.video.height;\n            }\n\n            video.muted = true;\n            video.play();\n            lastTime = new Date().getTime();\n            whammy = new Whammy.Video();\n\n            if (!config.disableLogs) {\n              console.log('canvas resolutions', canvas.width, '*', canvas.height);\n              console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\n            }\n\n            drawFrames(config.frameInterval);\n          };\n          /**\r\n           * Draw and push frames to Whammy\r\n           * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\r\n           */\n\n\n          function drawFrames(frameInterval) {\n            frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\n            var duration = new Date().getTime() - lastTime;\n\n            if (!duration) {\n              return setTimeout(drawFrames, frameInterval, frameInterval);\n            }\n\n            if (isPausedRecording) {\n              lastTime = new Date().getTime();\n              return setTimeout(drawFrames, 100);\n            } // via #206, by Jack i.e. @Seymourr\n\n\n            lastTime = new Date().getTime();\n\n            if (video.paused) {\n              // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n              // Tweak for Android Chrome\n              video.play();\n            }\n\n            context.drawImage(video, 0, 0, canvas.width, canvas.height);\n            whammy.frames.push({\n              duration: duration,\n              image: canvas.toDataURL('image/webp')\n            });\n\n            if (!isStopDrawing) {\n              setTimeout(drawFrames, frameInterval, frameInterval);\n            }\n          }\n\n          function asyncLoop(o) {\n            var i = -1,\n                length = o.length;\n\n            (function loop() {\n              i++;\n\n              if (i === length) {\n                o.callback();\n                return;\n              } // \"setTimeout\" added by Jim McLeod\n\n\n              setTimeout(function () {\n                o.functionToLoop(loop, i);\n              }, 1);\n            })();\n          }\n          /**\r\n           * remove black frames from the beginning to the specified frame\r\n           * @param {Array} _frames - array of frames to be checked\r\n           * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\r\n           * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\r\n           * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\r\n           * @returns {Array} - array of frames\r\n           */\n          // pull#293 by @volodalexey\n\n\n          function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, callback) {\n            var localCanvas = document.createElement('canvas');\n            localCanvas.width = canvas.width;\n            localCanvas.height = canvas.height;\n            var context2d = localCanvas.getContext('2d');\n            var resultFrames = [];\n            var checkUntilNotBlack = _framesToCheck === -1;\n            var endCheckFrame = _framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length ? _framesToCheck : _frames.length;\n            var sampleColor = {\n              r: 0,\n              g: 0,\n              b: 0\n            };\n            var maxColorDifference = Math.sqrt(Math.pow(255, 2) + Math.pow(255, 2) + Math.pow(255, 2));\n            var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\n            var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\n            var doNotCheckNext = false;\n            asyncLoop({\n              length: endCheckFrame,\n              functionToLoop: function (loop, f) {\n                var matchPixCount, endPixCheck, maxPixCount;\n\n                var finishImage = function () {\n                  if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {// console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\n                  } else {\n                    // console.log('frame is passed : ' + f);\n                    if (checkUntilNotBlack) {\n                      doNotCheckNext = true;\n                    }\n\n                    resultFrames.push(_frames[f]);\n                  }\n\n                  loop();\n                };\n\n                if (!doNotCheckNext) {\n                  var image = new Image();\n\n                  image.onload = function () {\n                    context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\n                    var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\n                    matchPixCount = 0;\n                    endPixCheck = imageData.data.length;\n                    maxPixCount = imageData.data.length / 4;\n\n                    for (var pix = 0; pix < endPixCheck; pix += 4) {\n                      var currentColor = {\n                        r: imageData.data[pix],\n                        g: imageData.data[pix + 1],\n                        b: imageData.data[pix + 2]\n                      };\n                      var colorDifference = Math.sqrt(Math.pow(currentColor.r - sampleColor.r, 2) + Math.pow(currentColor.g - sampleColor.g, 2) + Math.pow(currentColor.b - sampleColor.b, 2)); // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\n\n                      if (colorDifference <= maxColorDifference * pixTolerance) {\n                        matchPixCount++;\n                      }\n                    }\n\n                    finishImage();\n                  };\n\n                  image.src = _frames[f].image;\n                } else {\n                  finishImage();\n                }\n              },\n              callback: function () {\n                resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\n\n                if (resultFrames.length <= 0) {\n                  // at least one last frame should be available for next manipulation\n                  // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\n                  resultFrames.push(_frames[_frames.length - 1]);\n                }\n\n                callback(resultFrames);\n              }\n            });\n          }\n\n          var isStopDrawing = false;\n          /**\r\n           * This method stops recording video.\r\n           * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n           * @method\r\n           * @memberof WhammyRecorder\r\n           * @example\r\n           * recorder.stop(function(blob) {\r\n           *     video.src = URL.createObjectURL(blob);\r\n           * });\r\n           */\n\n          this.stop = function (callback) {\n            callback = callback || function () {};\n\n            isStopDrawing = true;\n\n            var _this = this; // analyse of all frames takes some time!\n\n\n            setTimeout(function () {\n              // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\n              // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\n              // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\n              dropBlackFrames(whammy.frames, -1, null, null, function (frames) {\n                whammy.frames = frames; // to display advertisement images!\n\n                if (config.advertisement && config.advertisement.length) {\n                  whammy.frames = config.advertisement.concat(whammy.frames);\n                }\n                /**\r\n                 * @property {Blob} blob - Recorded frames in video/webm blob.\r\n                 * @memberof WhammyRecorder\r\n                 * @example\r\n                 * recorder.stop(function() {\r\n                 *     var blob = recorder.blob;\r\n                 * });\r\n                 */\n\n\n                whammy.compile(function (blob) {\n                  _this.blob = blob;\n\n                  if (_this.blob.forEach) {\n                    _this.blob = new Blob([], {\n                      type: 'video/webm'\n                    });\n                  }\n\n                  if (callback) {\n                    callback(_this.blob);\n                  }\n                });\n              });\n            }, 10);\n          };\n\n          var isPausedRecording = false;\n          /**\r\n           * This method pauses the recording process.\r\n           * @method\r\n           * @memberof WhammyRecorder\r\n           * @example\r\n           * recorder.pause();\r\n           */\n\n          this.pause = function () {\n            isPausedRecording = true;\n          };\n          /**\r\n           * This method resumes the recording process.\r\n           * @method\r\n           * @memberof WhammyRecorder\r\n           * @example\r\n           * recorder.resume();\r\n           */\n\n\n          this.resume = function () {\n            isPausedRecording = false;\n\n            if (isStopDrawing) {\n              this.record();\n            }\n          };\n          /**\r\n           * This method resets currently recorded data.\r\n           * @method\r\n           * @memberof WhammyRecorder\r\n           * @example\r\n           * recorder.clearRecordedData();\r\n           */\n\n\n          this.clearRecordedData = function () {\n            if (!isStopDrawing) {\n              this.stop(clearRecordedDataCB);\n            }\n\n            clearRecordedDataCB();\n          };\n\n          function clearRecordedDataCB() {\n            whammy.frames = [];\n            isStopDrawing = true;\n            isPausedRecording = false;\n          } // for debugging\n\n\n          this.name = 'WhammyRecorder';\n\n          this.toString = function () {\n            return this.name;\n          };\n\n          var canvas = document.createElement('canvas');\n          var context = canvas.getContext('2d');\n          var video;\n          var lastTime;\n          var whammy;\n        }\n\n        if (typeof RecordRTC !== 'undefined') {\n          RecordRTC.WhammyRecorder = WhammyRecorder;\n        } // https://github.com/antimatter15/whammy/blob/master/LICENSE\n        // _________\n        // Whammy.js\n        // todo: Firefox now supports webp for webm containers!\n        // their MediaRecorder implementation works well!\n        // should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\n\n        /**\r\n         * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\r\n         * @summary A real time javascript webm encoder based on a canvas hack.\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://MuazKhan.com|Muaz Khan}\r\n         * @typedef Whammy\r\n         * @class\r\n         * @example\r\n         * var recorder = new Whammy().Video(15);\r\n         * recorder.add(context || canvas || dataURL);\r\n         * var output = recorder.compile();\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         */\n\n\n        var Whammy = function () {\n          // a more abstract-ish API\n          function WhammyVideo(duration) {\n            this.frames = [];\n            this.duration = duration || 1;\n            this.quality = 0.8;\n          }\n          /**\r\n           * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\r\n           * @method\r\n           * @memberof Whammy\r\n           * @example\r\n           * recorder = new Whammy().Video(0.8, 100);\r\n           * recorder.add(canvas || context || 'image/webp');\r\n           * @param {string} frame - Canvas || Context || image/webp\r\n           * @param {number} duration - Stick a duration (in milliseconds)\r\n           */\n\n\n          WhammyVideo.prototype.add = function (frame, duration) {\n            if ('canvas' in frame) {\n              //CanvasRenderingContext2D\n              frame = frame.canvas;\n            }\n\n            if ('toDataURL' in frame) {\n              frame = frame.toDataURL('image/webp', this.quality);\n            }\n\n            if (!/^data:image\\/webp;base64,/ig.test(frame)) {\n              throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\n            }\n\n            this.frames.push({\n              image: frame,\n              duration: duration || this.duration\n            });\n          };\n\n          function processInWebWorker(_function) {\n            var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n              type: 'application/javascript'\n            }));\n            var worker = new Worker(blob);\n            URL.revokeObjectURL(blob);\n            return worker;\n          }\n\n          function whammyInWebWorker(frames) {\n            function ArrayToWebM(frames) {\n              var info = checkFrames(frames);\n\n              if (!info) {\n                return [];\n              }\n\n              var clusterMaxDuration = 30000;\n              var EBML = [{\n                'id': 0x1a45dfa3,\n                // EBML\n                'data': [{\n                  'data': 1,\n                  'id': 0x4286 // EBMLVersion\n\n                }, {\n                  'data': 1,\n                  'id': 0x42f7 // EBMLReadVersion\n\n                }, {\n                  'data': 4,\n                  'id': 0x42f2 // EBMLMaxIDLength\n\n                }, {\n                  'data': 8,\n                  'id': 0x42f3 // EBMLMaxSizeLength\n\n                }, {\n                  'data': 'webm',\n                  'id': 0x4282 // DocType\n\n                }, {\n                  'data': 2,\n                  'id': 0x4287 // DocTypeVersion\n\n                }, {\n                  'data': 2,\n                  'id': 0x4285 // DocTypeReadVersion\n\n                }]\n              }, {\n                'id': 0x18538067,\n                // Segment\n                'data': [{\n                  'id': 0x1549a966,\n                  // Info\n                  'data': [{\n                    'data': 1e6,\n                    //do things in millisecs (num of nanosecs for duration scale)\n                    'id': 0x2ad7b1 // TimecodeScale\n\n                  }, {\n                    'data': 'whammy',\n                    'id': 0x4d80 // MuxingApp\n\n                  }, {\n                    'data': 'whammy',\n                    'id': 0x5741 // WritingApp\n\n                  }, {\n                    'data': doubleToString(info.duration),\n                    'id': 0x4489 // Duration\n\n                  }]\n                }, {\n                  'id': 0x1654ae6b,\n                  // Tracks\n                  'data': [{\n                    'id': 0xae,\n                    // TrackEntry\n                    'data': [{\n                      'data': 1,\n                      'id': 0xd7 // TrackNumber\n\n                    }, {\n                      'data': 1,\n                      'id': 0x73c5 // TrackUID\n\n                    }, {\n                      'data': 0,\n                      'id': 0x9c // FlagLacing\n\n                    }, {\n                      'data': 'und',\n                      'id': 0x22b59c // Language\n\n                    }, {\n                      'data': 'V_VP8',\n                      'id': 0x86 // CodecID\n\n                    }, {\n                      'data': 'VP8',\n                      'id': 0x258688 // CodecName\n\n                    }, {\n                      'data': 1,\n                      'id': 0x83 // TrackType\n\n                    }, {\n                      'id': 0xe0,\n                      // Video\n                      'data': [{\n                        'data': info.width,\n                        'id': 0xb0 // PixelWidth\n\n                      }, {\n                        'data': info.height,\n                        'id': 0xba // PixelHeight\n\n                      }]\n                    }]\n                  }]\n                }]\n              }]; //Generate clusters (max duration)\n\n              var frameNumber = 0;\n              var clusterTimecode = 0;\n\n              while (frameNumber < frames.length) {\n                var clusterFrames = [];\n                var clusterDuration = 0;\n\n                do {\n                  clusterFrames.push(frames[frameNumber]);\n                  clusterDuration += frames[frameNumber].duration;\n                  frameNumber++;\n                } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\n\n                var clusterCounter = 0;\n                var cluster = {\n                  'id': 0x1f43b675,\n                  // Cluster\n                  'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\n                }; //Add cluster to segment\n\n                EBML[1].data.push(cluster);\n                clusterTimecode += clusterDuration;\n              }\n\n              return generateEBML(EBML);\n            }\n\n            function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\n              return [{\n                'data': clusterTimecode,\n                'id': 0xe7 // Timecode\n\n              }].concat(clusterFrames.map(function (webp) {\n                var block = makeSimpleBlock({\n                  discardable: 0,\n                  frame: webp.data.slice(4),\n                  invisible: 0,\n                  keyframe: 1,\n                  lacing: 0,\n                  trackNum: 1,\n                  timecode: Math.round(clusterCounter)\n                });\n                clusterCounter += webp.duration;\n                return {\n                  data: block,\n                  id: 0xa3\n                };\n              }));\n            } // sums the lengths of all the frames and gets the duration\n\n\n            function checkFrames(frames) {\n              if (!frames[0]) {\n                postMessage({\n                  error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\n                });\n                return;\n              }\n\n              var width = frames[0].width,\n                  height = frames[0].height,\n                  duration = frames[0].duration;\n\n              for (var i = 1; i < frames.length; i++) {\n                duration += frames[i].duration;\n              }\n\n              return {\n                duration: duration,\n                width: width,\n                height: height\n              };\n            }\n\n            function numToBuffer(num) {\n              var parts = [];\n\n              while (num > 0) {\n                parts.push(num & 0xff);\n                num = num >> 8;\n              }\n\n              return new Uint8Array(parts.reverse());\n            }\n\n            function strToBuffer(str) {\n              return new Uint8Array(str.split('').map(function (e) {\n                return e.charCodeAt(0);\n              }));\n            }\n\n            function bitsToBuffer(bits) {\n              var data = [];\n              var pad = bits.length % 8 ? new Array(1 + 8 - bits.length % 8).join('0') : '';\n              bits = pad + bits;\n\n              for (var i = 0; i < bits.length; i += 8) {\n                data.push(parseInt(bits.substr(i, 8), 2));\n              }\n\n              return new Uint8Array(data);\n            }\n\n            function generateEBML(json) {\n              var ebml = [];\n\n              for (var i = 0; i < json.length; i++) {\n                var data = json[i].data;\n\n                if (typeof data === 'object') {\n                  data = generateEBML(data);\n                }\n\n                if (typeof data === 'number') {\n                  data = bitsToBuffer(data.toString(2));\n                }\n\n                if (typeof data === 'string') {\n                  data = strToBuffer(data);\n                }\n\n                var len = data.size || data.byteLength || data.length;\n                var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\n                var sizeToString = len.toString(2);\n                var padded = new Array(zeroes * 7 + 7 + 1 - sizeToString.length).join('0') + sizeToString;\n                var size = new Array(zeroes).join('0') + '1' + padded;\n                ebml.push(numToBuffer(json[i].id));\n                ebml.push(bitsToBuffer(size));\n                ebml.push(data);\n              }\n\n              return new Blob(ebml, {\n                type: 'video/webm'\n              });\n            }\n\n            function toBinStrOld(bits) {\n              var data = '';\n              var pad = bits.length % 8 ? new Array(1 + 8 - bits.length % 8).join('0') : '';\n              bits = pad + bits;\n\n              for (var i = 0; i < bits.length; i += 8) {\n                data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\n              }\n\n              return data;\n            }\n\n            function makeSimpleBlock(data) {\n              var flags = 0;\n\n              if (data.keyframe) {\n                flags |= 128;\n              }\n\n              if (data.invisible) {\n                flags |= 8;\n              }\n\n              if (data.lacing) {\n                flags |= data.lacing << 1;\n              }\n\n              if (data.discardable) {\n                flags |= 1;\n              }\n\n              if (data.trackNum > 127) {\n                throw 'TrackNumber > 127 not supported';\n              }\n\n              var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function (e) {\n                return String.fromCharCode(e);\n              }).join('') + data.frame;\n              return out;\n            }\n\n            function parseWebP(riff) {\n              var VP8 = riff.RIFF[0].WEBP[0];\n              var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\n\n              for (var i = 0, c = []; i < 4; i++) {\n                c[i] = VP8.charCodeAt(frameStart + 3 + i);\n              }\n\n              var width, height, tmp; //the code below is literally copied verbatim from the bitstream spec\n\n              tmp = c[1] << 8 | c[0];\n              width = tmp & 0x3FFF;\n              tmp = c[3] << 8 | c[2];\n              height = tmp & 0x3FFF;\n              return {\n                width: width,\n                height: height,\n                data: VP8,\n                riff: riff\n              };\n            }\n\n            function getStrLength(string, offset) {\n              return parseInt(string.substr(offset + 4, 4).split('').map(function (i) {\n                var unpadded = i.charCodeAt(0).toString(2);\n                return new Array(8 - unpadded.length + 1).join('0') + unpadded;\n              }).join(''), 2);\n            }\n\n            function parseRIFF(string) {\n              var offset = 0;\n              var chunks = {};\n\n              while (offset < string.length) {\n                var id = string.substr(offset, 4);\n                var len = getStrLength(string, offset);\n                var data = string.substr(offset + 4 + 4, len);\n                offset += 4 + 4 + len;\n                chunks[id] = chunks[id] || [];\n\n                if (id === 'RIFF' || id === 'LIST') {\n                  chunks[id].push(parseRIFF(data));\n                } else {\n                  chunks[id].push(data);\n                }\n              }\n\n              return chunks;\n            }\n\n            function doubleToString(num) {\n              return [].slice.call(new Uint8Array(new Float64Array([num]).buffer), 0).map(function (e) {\n                return String.fromCharCode(e);\n              }).reverse().join('');\n            }\n\n            var webm = new ArrayToWebM(frames.map(function (frame) {\n              var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\n              webp.duration = frame.duration;\n              return webp;\n            }));\n            postMessage(webm);\n          }\n          /**\r\n           * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\r\n           * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n           * @method\r\n           * @memberof Whammy\r\n           * @example\r\n           * recorder = new Whammy().Video(0.8, 100);\r\n           * recorder.compile(function(blob) {\r\n           *    // blob.size - blob.type\r\n           * });\r\n           */\n\n\n          WhammyVideo.prototype.compile = function (callback) {\n            var webWorker = processInWebWorker(whammyInWebWorker);\n\n            webWorker.onmessage = function (event) {\n              if (event.data.error) {\n                console.error(event.data.error);\n                return;\n              }\n\n              callback(event.data);\n            };\n\n            webWorker.postMessage(this.frames);\n          };\n\n          return {\n            /**\r\n             * A more abstract-ish API.\r\n             * @method\r\n             * @memberof Whammy\r\n             * @example\r\n             * recorder = new Whammy().Video(0.8, 100);\r\n             * @param {?number} speed - 0.8\r\n             * @param {?number} quality - 100\r\n             */\n            Video: WhammyVideo\n          };\n        }();\n\n        if (typeof RecordRTC !== 'undefined') {\n          RecordRTC.Whammy = Whammy;\n        } // ______________ (indexed-db)\n        // DiskStorage.js\n\n        /**\r\n         * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\r\n         * @summary Writing blobs into IndexedDB.\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://MuazKhan.com|Muaz Khan}\r\n         * @example\r\n         * DiskStorage.Store({\r\n         *     audioBlob: yourAudioBlob,\r\n         *     videoBlob: yourVideoBlob,\r\n         *     gifBlob  : yourGifBlob\r\n         * });\r\n         * DiskStorage.Fetch(function(dataURL, type) {\r\n         *     if(type === 'audioBlob') { }\r\n         *     if(type === 'videoBlob') { }\r\n         *     if(type === 'gifBlob')   { }\r\n         * });\r\n         * // DiskStorage.dataStoreName = 'recordRTC';\r\n         * // DiskStorage.onError = function(error) { };\r\n         * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n         * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\r\n         * @property {function} Store - This method stores blobs in IndexedDB.\r\n         * @property {function} onError - This function is invoked for any known/unknown error.\r\n         * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         */\n\n\n        var DiskStorage = {\n          /**\r\n           * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n           * @method\r\n           * @memberof DiskStorage\r\n           * @internal\r\n           * @example\r\n           * DiskStorage.init();\r\n           */\n          init: function () {\n            var self = this;\n\n            if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\n              console.error('IndexedDB API are not available in this browser.');\n              return;\n            }\n\n            var dbVersion = 1;\n            var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\n                db;\n            var request = indexedDB.open(dbName, dbVersion);\n\n            function createObjectStore(dataBase) {\n              dataBase.createObjectStore(self.dataStoreName);\n            }\n\n            function putInDB() {\n              var transaction = db.transaction([self.dataStoreName], 'readwrite');\n\n              if (self.videoBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\n              }\n\n              if (self.gifBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\n              }\n\n              if (self.audioBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\n              }\n\n              function getFromStore(portionName) {\n                transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function (event) {\n                  if (self.callback) {\n                    self.callback(event.target.result, portionName);\n                  }\n                };\n              }\n\n              getFromStore('audioBlob');\n              getFromStore('videoBlob');\n              getFromStore('gifBlob');\n            }\n\n            request.onerror = self.onError;\n\n            request.onsuccess = function () {\n              db = request.result;\n              db.onerror = self.onError;\n\n              if (db.setVersion) {\n                if (db.version !== dbVersion) {\n                  var setVersion = db.setVersion(dbVersion);\n\n                  setVersion.onsuccess = function () {\n                    createObjectStore(db);\n                    putInDB();\n                  };\n                } else {\n                  putInDB();\n                }\n              } else {\n                putInDB();\n              }\n            };\n\n            request.onupgradeneeded = function (event) {\n              createObjectStore(event.target.result);\n            };\n          },\n\n          /**\r\n           * This method fetches stored blobs from IndexedDB.\r\n           * @method\r\n           * @memberof DiskStorage\r\n           * @internal\r\n           * @example\r\n           * DiskStorage.Fetch(function(dataURL, type) {\r\n           *     if(type === 'audioBlob') { }\r\n           *     if(type === 'videoBlob') { }\r\n           *     if(type === 'gifBlob')   { }\r\n           * });\r\n           */\n          Fetch: function (callback) {\n            this.callback = callback;\n            this.init();\n            return this;\n          },\n\n          /**\r\n           * This method stores blobs in IndexedDB.\r\n           * @method\r\n           * @memberof DiskStorage\r\n           * @internal\r\n           * @example\r\n           * DiskStorage.Store({\r\n           *     audioBlob: yourAudioBlob,\r\n           *     videoBlob: yourVideoBlob,\r\n           *     gifBlob  : yourGifBlob\r\n           * });\r\n           */\n          Store: function (config) {\n            this.audioBlob = config.audioBlob;\n            this.videoBlob = config.videoBlob;\n            this.gifBlob = config.gifBlob;\n            this.init();\n            return this;\n          },\n\n          /**\r\n           * This function is invoked for any known/unknown error.\r\n           * @method\r\n           * @memberof DiskStorage\r\n           * @internal\r\n           * @example\r\n           * DiskStorage.onError = function(error){\r\n           *     alerot( JSON.stringify(error) );\r\n           * };\r\n           */\n          onError: function (error) {\n            console.error(JSON.stringify(error, null, '\\t'));\n          },\n\n          /**\r\n           * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n           * @memberof DiskStorage\r\n           * @internal\r\n           * @example\r\n           * DiskStorage.dataStoreName = 'recordRTC';\r\n           */\n          dataStoreName: 'recordRTC',\n          dbName: null\n        };\n\n        if (typeof RecordRTC !== 'undefined') {\n          RecordRTC.DiskStorage = DiskStorage;\n        } // ______________\n        // GifRecorder.js\n\n        /**\r\n         * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://MuazKhan.com|Muaz Khan}\r\n         * @typedef GifRecorder\r\n         * @class\r\n         * @example\r\n         * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });\r\n         * recorder.record();\r\n         * recorder.stop(function(blob) {\r\n         *     img.src = URL.createObjectURL(blob);\r\n         * });\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\r\n         * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\r\n         */\n\n\n        function GifRecorder(mediaStream, config) {\n          if (typeof GIFEncoder === 'undefined') {\n            var script = document.createElement('script');\n            script.src = 'https://www.webrtc-experiment.com/gif-recorder.js';\n            (document.body || document.documentElement).appendChild(script);\n          }\n\n          config = config || {};\n          var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\n          /**\r\n           * This method records MediaStream.\r\n           * @method\r\n           * @memberof GifRecorder\r\n           * @example\r\n           * recorder.record();\r\n           */\n\n          this.record = function () {\n            if (typeof GIFEncoder === 'undefined') {\n              setTimeout(self.record, 1000);\n              return;\n            }\n\n            if (!isLoadedMetaData) {\n              setTimeout(self.record, 1000);\n              return;\n            }\n\n            if (!isHTMLObject) {\n              if (!config.width) {\n                config.width = video.offsetWidth || 320;\n              }\n\n              if (!config.height) {\n                config.height = video.offsetHeight || 240;\n              }\n\n              if (!config.video) {\n                config.video = {\n                  width: config.width,\n                  height: config.height\n                };\n              }\n\n              if (!config.canvas) {\n                config.canvas = {\n                  width: config.width,\n                  height: config.height\n                };\n              }\n\n              canvas.width = config.canvas.width || 320;\n              canvas.height = config.canvas.height || 240;\n              video.width = config.video.width || 320;\n              video.height = config.video.height || 240;\n            } // external library to record as GIF images\n\n\n            gifEncoder = new GIFEncoder(); // void setRepeat(int iter) \n            // Sets the number of times the set of GIF frames should be played. \n            // Default is 1; 0 means play indefinitely.\n\n            gifEncoder.setRepeat(0); // void setFrameRate(Number fps) \n            // Sets frame rate in frames per second. \n            // Equivalent to setDelay(1000/fps).\n            // Using \"setDelay\" instead of \"setFrameRate\"\n\n            gifEncoder.setDelay(config.frameRate || 200); // void setQuality(int quality) \n            // Sets quality of color quantization (conversion of images to the \n            // maximum 256 colors allowed by the GIF specification). \n            // Lower values (minimum = 1) produce better colors, \n            // but slow processing significantly. 10 is the default, \n            // and produces good color mapping at reasonable speeds. \n            // Values greater than 20 do not yield significant improvements in speed.\n\n            gifEncoder.setQuality(config.quality || 10); // Boolean start() \n            // This writes the GIF Header and returns false if it fails.\n\n            gifEncoder.start();\n\n            if (typeof config.onGifRecordingStarted === 'function') {\n              config.onGifRecordingStarted();\n            }\n\n            startTime = Date.now();\n\n            function drawVideoFrame(time) {\n              if (self.clearedRecordedData === true) {\n                return;\n              }\n\n              if (isPausedRecording) {\n                return setTimeout(function () {\n                  drawVideoFrame(time);\n                }, 100);\n              }\n\n              lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n\n              if (typeof lastFrameTime === undefined) {\n                lastFrameTime = time;\n              } // ~10 fps\n\n\n              if (time - lastFrameTime < 90) {\n                return;\n              }\n\n              if (!isHTMLObject && video.paused) {\n                // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n                // Tweak for Android Chrome\n                video.play();\n              }\n\n              if (!isHTMLObject) {\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\n              }\n\n              if (config.onGifPreview) {\n                config.onGifPreview(canvas.toDataURL('image/png'));\n              }\n\n              gifEncoder.addFrame(context);\n              lastFrameTime = time;\n            }\n\n            lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n\n            if (config.initCallback) {\n              config.initCallback();\n            }\n          };\n          /**\r\n           * This method stops recording MediaStream.\r\n           * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n           * @method\r\n           * @memberof GifRecorder\r\n           * @example\r\n           * recorder.stop(function(blob) {\r\n           *     img.src = URL.createObjectURL(blob);\r\n           * });\r\n           */\n\n\n          this.stop = function (callback) {\n            callback = callback || function () {};\n\n            if (lastAnimationFrame) {\n              cancelAnimationFrame(lastAnimationFrame);\n            }\n\n            endTime = Date.now();\n            /**\r\n             * @property {Blob} blob - The recorded blob object.\r\n             * @memberof GifRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\n\n            this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\n              type: 'image/gif'\n            });\n            callback(this.blob); // bug: find a way to clear old recorded blobs\n\n            gifEncoder.stream().bin = [];\n          };\n\n          var isPausedRecording = false;\n          /**\r\n           * This method pauses the recording process.\r\n           * @method\r\n           * @memberof GifRecorder\r\n           * @example\r\n           * recorder.pause();\r\n           */\n\n          this.pause = function () {\n            isPausedRecording = true;\n          };\n          /**\r\n           * This method resumes the recording process.\r\n           * @method\r\n           * @memberof GifRecorder\r\n           * @example\r\n           * recorder.resume();\r\n           */\n\n\n          this.resume = function () {\n            isPausedRecording = false;\n          };\n          /**\r\n           * This method resets currently recorded data.\r\n           * @method\r\n           * @memberof GifRecorder\r\n           * @example\r\n           * recorder.clearRecordedData();\r\n           */\n\n\n          this.clearRecordedData = function () {\n            self.clearedRecordedData = true;\n            clearRecordedDataCB();\n          };\n\n          function clearRecordedDataCB() {\n            if (gifEncoder) {\n              gifEncoder.stream().bin = [];\n            }\n          } // for debugging\n\n\n          this.name = 'GifRecorder';\n\n          this.toString = function () {\n            return this.name;\n          };\n\n          var canvas = document.createElement('canvas');\n          var context = canvas.getContext('2d');\n\n          if (isHTMLObject) {\n            if (mediaStream instanceof CanvasRenderingContext2D) {\n              context = mediaStream;\n              canvas = context.canvas;\n            } else if (mediaStream instanceof HTMLCanvasElement) {\n              context = mediaStream.getContext('2d');\n              canvas = mediaStream;\n            }\n          }\n\n          var isLoadedMetaData = true;\n\n          if (!isHTMLObject) {\n            var video = document.createElement('video');\n            video.muted = true;\n            video.autoplay = true;\n            video.playsInline = true;\n            isLoadedMetaData = false;\n\n            video.onloadedmetadata = function () {\n              isLoadedMetaData = true;\n            };\n\n            setSrcObject(mediaStream, video);\n            video.play();\n          }\n\n          var lastAnimationFrame = null;\n          var startTime, endTime, lastFrameTime;\n          var gifEncoder;\n          var self = this;\n        }\n\n        if (typeof RecordRTC !== 'undefined') {\n          RecordRTC.GifRecorder = GifRecorder;\n        } // Last time updated: 2019-06-21 4:09:42 AM UTC\n        // ________________________\n        // MultiStreamsMixer v1.2.2\n        // Open-Sourced: https://github.com/muaz-khan/MultiStreamsMixer\n        // --------------------------------------------------\n        // Muaz Khan     - www.MuazKhan.com\n        // MIT License   - www.WebRTC-Experiment.com/licence\n        // --------------------------------------------------\n\n\n        function MultiStreamsMixer(arrayOfMediaStreams, elementClass) {\n          var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n\n          (function (that) {\n            if (typeof RecordRTC !== 'undefined') {\n              return;\n            }\n\n            if (!that) {\n              return;\n            }\n\n            if (typeof window !== 'undefined') {\n              return;\n            }\n\n            if (typeof global === 'undefined') {\n              return;\n            }\n\n            global.navigator = {\n              userAgent: browserFakeUserAgent,\n              getUserMedia: function () {}\n            };\n\n            if (!global.console) {\n              global.console = {};\n            }\n\n            if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\n              global.console.error = global.console.log = global.console.log || function () {\n                console.log(arguments);\n              };\n            }\n\n            if (typeof document === 'undefined') {\n              /*global document:true */\n              that.document = {\n                documentElement: {\n                  appendChild: function () {\n                    return '';\n                  }\n                }\n              };\n\n              document.createElement = document.captureStream = document.mozCaptureStream = function () {\n                var obj = {\n                  getContext: function () {\n                    return obj;\n                  },\n                  play: function () {},\n                  pause: function () {},\n                  drawImage: function () {},\n                  toDataURL: function () {\n                    return '';\n                  },\n                  style: {}\n                };\n                return obj;\n              };\n\n              that.HTMLVideoElement = function () {};\n            }\n\n            if (typeof location === 'undefined') {\n              /*global location:true */\n              that.location = {\n                protocol: 'file:',\n                href: '',\n                hash: ''\n              };\n            }\n\n            if (typeof screen === 'undefined') {\n              /*global screen:true */\n              that.screen = {\n                width: 0,\n                height: 0\n              };\n            }\n\n            if (typeof URL === 'undefined') {\n              /*global screen:true */\n              that.URL = {\n                createObjectURL: function () {\n                  return '';\n                },\n                revokeObjectURL: function () {\n                  return '';\n                }\n              };\n            }\n            /*global window:true */\n\n\n            that.window = global;\n          })(typeof global !== 'undefined' ? global : null); // requires: chrome://flags/#enable-experimental-web-platform-features\n\n\n          elementClass = elementClass || 'multi-streams-mixer';\n          var videos = [];\n          var isStopDrawingFrames = false;\n          var canvas = document.createElement('canvas');\n          var context = canvas.getContext('2d');\n          canvas.style.opacity = 0;\n          canvas.style.position = 'absolute';\n          canvas.style.zIndex = -1;\n          canvas.style.top = '-1000em';\n          canvas.style.left = '-1000em';\n          canvas.className = elementClass;\n          (document.body || document.documentElement).appendChild(canvas);\n          this.disableLogs = false;\n          this.frameInterval = 10;\n          this.width = 360;\n          this.height = 240; // use gain node to prevent echo\n\n          this.useGainNode = true;\n          var self = this; // _____________________________\n          // Cross-Browser-Declarations.js\n          // WebAudio API representer\n\n          var AudioContext = window.AudioContext;\n\n          if (typeof AudioContext === 'undefined') {\n            if (typeof webkitAudioContext !== 'undefined') {\n              /*global AudioContext:true */\n              AudioContext = webkitAudioContext;\n            }\n\n            if (typeof mozAudioContext !== 'undefined') {\n              /*global AudioContext:true */\n              AudioContext = mozAudioContext;\n            }\n          }\n          /*jshint -W079 */\n\n\n          var URL = window.URL;\n\n          if (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\n            /*global URL:true */\n            URL = webkitURL;\n          }\n\n          if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') {\n            // maybe window.navigator?\n            if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n              navigator.getUserMedia = navigator.webkitGetUserMedia;\n            }\n\n            if (typeof navigator.mozGetUserMedia !== 'undefined') {\n              navigator.getUserMedia = navigator.mozGetUserMedia;\n            }\n          }\n\n          var MediaStream = window.MediaStream;\n\n          if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n            MediaStream = webkitMediaStream;\n          }\n          /*global MediaStream:true */\n\n\n          if (typeof MediaStream !== 'undefined') {\n            // override \"stop\" method for all browsers\n            if (typeof MediaStream.prototype.stop === 'undefined') {\n              MediaStream.prototype.stop = function () {\n                this.getTracks().forEach(function (track) {\n                  track.stop();\n                });\n              };\n            }\n          }\n\n          var Storage = {};\n\n          if (typeof AudioContext !== 'undefined') {\n            Storage.AudioContext = AudioContext;\n          } else if (typeof webkitAudioContext !== 'undefined') {\n            Storage.AudioContext = webkitAudioContext;\n          }\n\n          function setSrcObject(stream, element) {\n            if ('srcObject' in element) {\n              element.srcObject = stream;\n            } else if ('mozSrcObject' in element) {\n              element.mozSrcObject = stream;\n            } else {\n              element.srcObject = stream;\n            }\n          }\n\n          this.startDrawingFrames = function () {\n            drawVideosToCanvas();\n          };\n\n          function drawVideosToCanvas() {\n            if (isStopDrawingFrames) {\n              return;\n            }\n\n            var videosLength = videos.length;\n            var fullcanvas = false;\n            var remaining = [];\n            videos.forEach(function (video) {\n              if (!video.stream) {\n                video.stream = {};\n              }\n\n              if (video.stream.fullcanvas) {\n                fullcanvas = video;\n              } else {\n                // todo: video.stream.active or video.stream.live to fix blank frames issues?\n                remaining.push(video);\n              }\n            });\n\n            if (fullcanvas) {\n              canvas.width = fullcanvas.stream.width;\n              canvas.height = fullcanvas.stream.height;\n            } else if (remaining.length) {\n              canvas.width = videosLength > 1 ? remaining[0].width * 2 : remaining[0].width;\n              var height = 1;\n\n              if (videosLength === 3 || videosLength === 4) {\n                height = 2;\n              }\n\n              if (videosLength === 5 || videosLength === 6) {\n                height = 3;\n              }\n\n              if (videosLength === 7 || videosLength === 8) {\n                height = 4;\n              }\n\n              if (videosLength === 9 || videosLength === 10) {\n                height = 5;\n              }\n\n              canvas.height = remaining[0].height * height;\n            } else {\n              canvas.width = self.width || 360;\n              canvas.height = self.height || 240;\n            }\n\n            if (fullcanvas && fullcanvas instanceof HTMLVideoElement) {\n              drawImage(fullcanvas);\n            }\n\n            remaining.forEach(function (video, idx) {\n              drawImage(video, idx);\n            });\n            setTimeout(drawVideosToCanvas, self.frameInterval);\n          }\n\n          function drawImage(video, idx) {\n            if (isStopDrawingFrames) {\n              return;\n            }\n\n            var x = 0;\n            var y = 0;\n            var width = video.width;\n            var height = video.height;\n\n            if (idx === 1) {\n              x = video.width;\n            }\n\n            if (idx === 2) {\n              y = video.height;\n            }\n\n            if (idx === 3) {\n              x = video.width;\n              y = video.height;\n            }\n\n            if (idx === 4) {\n              y = video.height * 2;\n            }\n\n            if (idx === 5) {\n              x = video.width;\n              y = video.height * 2;\n            }\n\n            if (idx === 6) {\n              y = video.height * 3;\n            }\n\n            if (idx === 7) {\n              x = video.width;\n              y = video.height * 3;\n            }\n\n            if (typeof video.stream.left !== 'undefined') {\n              x = video.stream.left;\n            }\n\n            if (typeof video.stream.top !== 'undefined') {\n              y = video.stream.top;\n            }\n\n            if (typeof video.stream.width !== 'undefined') {\n              width = video.stream.width;\n            }\n\n            if (typeof video.stream.height !== 'undefined') {\n              height = video.stream.height;\n            }\n\n            context.drawImage(video, x, y, width, height);\n\n            if (typeof video.stream.onRender === 'function') {\n              video.stream.onRender(context, x, y, width, height, idx);\n            }\n          }\n\n          function getMixedStream() {\n            isStopDrawingFrames = false;\n            var mixedVideoStream = getMixedVideoStream();\n            var mixedAudioStream = getMixedAudioStream();\n\n            if (mixedAudioStream) {\n              mixedAudioStream.getTracks().filter(function (t) {\n                return t.kind === 'audio';\n              }).forEach(function (track) {\n                mixedVideoStream.addTrack(track);\n              });\n            }\n\n            var fullcanvas;\n            arrayOfMediaStreams.forEach(function (stream) {\n              if (stream.fullcanvas) {\n                fullcanvas = true;\n              }\n            }); // mixedVideoStream.prototype.appendStreams = appendStreams;\n            // mixedVideoStream.prototype.resetVideoStreams = resetVideoStreams;\n            // mixedVideoStream.prototype.clearRecordedData = clearRecordedData;\n\n            return mixedVideoStream;\n          }\n\n          function getMixedVideoStream() {\n            resetVideoStreams();\n            var capturedStream;\n\n            if ('captureStream' in canvas) {\n              capturedStream = canvas.captureStream();\n            } else if ('mozCaptureStream' in canvas) {\n              capturedStream = canvas.mozCaptureStream();\n            } else if (!self.disableLogs) {\n              console.error('Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features');\n            }\n\n            var videoStream = new MediaStream();\n            capturedStream.getTracks().filter(function (t) {\n              return t.kind === 'video';\n            }).forEach(function (track) {\n              videoStream.addTrack(track);\n            });\n            canvas.stream = videoStream;\n            return videoStream;\n          }\n\n          function getMixedAudioStream() {\n            // via: @pehrsons\n            if (!Storage.AudioContextConstructor) {\n              Storage.AudioContextConstructor = new Storage.AudioContext();\n            }\n\n            self.audioContext = Storage.AudioContextConstructor;\n            self.audioSources = [];\n\n            if (self.useGainNode === true) {\n              self.gainNode = self.audioContext.createGain();\n              self.gainNode.connect(self.audioContext.destination);\n              self.gainNode.gain.value = 0; // don't hear self\n            }\n\n            var audioTracksLength = 0;\n            arrayOfMediaStreams.forEach(function (stream) {\n              if (!stream.getTracks().filter(function (t) {\n                return t.kind === 'audio';\n              }).length) {\n                return;\n              }\n\n              audioTracksLength++;\n              var audioSource = self.audioContext.createMediaStreamSource(stream);\n\n              if (self.useGainNode === true) {\n                audioSource.connect(self.gainNode);\n              }\n\n              self.audioSources.push(audioSource);\n            });\n\n            if (!audioTracksLength) {\n              // because \"self.audioContext\" is not initialized\n              // that's why we've to ignore rest of the code\n              return;\n            }\n\n            self.audioDestination = self.audioContext.createMediaStreamDestination();\n            self.audioSources.forEach(function (audioSource) {\n              audioSource.connect(self.audioDestination);\n            });\n            return self.audioDestination.stream;\n          }\n\n          function getVideo(stream) {\n            var video = document.createElement('video');\n            setSrcObject(stream, video);\n            video.className = elementClass;\n            video.muted = true;\n            video.volume = 0;\n            video.width = stream.width || self.width || 360;\n            video.height = stream.height || self.height || 240;\n            video.play();\n            return video;\n          }\n\n          this.appendStreams = function (streams) {\n            if (!streams) {\n              throw 'First parameter is required.';\n            }\n\n            if (!(streams instanceof Array)) {\n              streams = [streams];\n            }\n\n            streams.forEach(function (stream) {\n              var newStream = new MediaStream();\n\n              if (stream.getTracks().filter(function (t) {\n                return t.kind === 'video';\n              }).length) {\n                var video = getVideo(stream);\n                video.stream = stream;\n                videos.push(video);\n                newStream.addTrack(stream.getTracks().filter(function (t) {\n                  return t.kind === 'video';\n                })[0]);\n              }\n\n              if (stream.getTracks().filter(function (t) {\n                return t.kind === 'audio';\n              }).length) {\n                var audioSource = self.audioContext.createMediaStreamSource(stream);\n                self.audioDestination = self.audioContext.createMediaStreamDestination();\n                audioSource.connect(self.audioDestination);\n                newStream.addTrack(self.audioDestination.stream.getTracks().filter(function (t) {\n                  return t.kind === 'audio';\n                })[0]);\n              }\n\n              arrayOfMediaStreams.push(newStream);\n            });\n          };\n\n          this.releaseStreams = function () {\n            videos = [];\n            isStopDrawingFrames = true;\n\n            if (self.gainNode) {\n              self.gainNode.disconnect();\n              self.gainNode = null;\n            }\n\n            if (self.audioSources.length) {\n              self.audioSources.forEach(function (source) {\n                source.disconnect();\n              });\n              self.audioSources = [];\n            }\n\n            if (self.audioDestination) {\n              self.audioDestination.disconnect();\n              self.audioDestination = null;\n            }\n\n            if (self.audioContext) {\n              self.audioContext.close();\n            }\n\n            self.audioContext = null;\n            context.clearRect(0, 0, canvas.width, canvas.height);\n\n            if (canvas.stream) {\n              canvas.stream.stop();\n              canvas.stream = null;\n            }\n          };\n\n          this.resetVideoStreams = function (streams) {\n            if (streams && !(streams instanceof Array)) {\n              streams = [streams];\n            }\n\n            resetVideoStreams(streams);\n          };\n\n          function resetVideoStreams(streams) {\n            videos = [];\n            streams = streams || arrayOfMediaStreams; // via: @adrian-ber\n\n            streams.forEach(function (stream) {\n              if (!stream.getTracks().filter(function (t) {\n                return t.kind === 'video';\n              }).length) {\n                return;\n              }\n\n              var video = getVideo(stream);\n              video.stream = stream;\n              videos.push(video);\n            });\n          } // for debugging\n\n\n          this.name = 'MultiStreamsMixer';\n\n          this.toString = function () {\n            return this.name;\n          };\n\n          this.getMixedStream = getMixedStream;\n        }\n\n        if (typeof RecordRTC === 'undefined') {\n          if (true\n          /* && !!module.exports*/\n          ) {\n              module.exports = MultiStreamsMixer;\n            }\n\n          if (true) {\n            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n              return MultiStreamsMixer;\n            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n          }\n        } // ______________________\n        // MultiStreamRecorder.js\n\n        /*\r\n         * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\r\n         */\n\n        /**\r\n         * MultiStreamRecorder can record multiple videos in single container.\r\n         * @summary Multi-videos recorder.\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://MuazKhan.com|Muaz Khan}\r\n         * @typedef MultiStreamRecorder\r\n         * @class\r\n         * @example\r\n         * var options = {\r\n         *     mimeType: 'video/webm'\r\n         * }\r\n         * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\r\n         * recorder.record();\r\n         * recorder.stop(function(blob) {\r\n         *     video.src = URL.createObjectURL(blob);\r\n         *\r\n         *     // or\r\n         *     var blob = recorder.blob;\r\n         * });\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         * @param {MediaStreams} mediaStreams - Array of MediaStreams.\r\n         * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: \"video/webm\"}\r\n         */\n\n\n        function MultiStreamRecorder(arrayOfMediaStreams, options) {\n          arrayOfMediaStreams = arrayOfMediaStreams || [];\n          var self = this;\n          var mixer;\n          var mediaRecorder;\n          options = options || {\n            elementClass: 'multi-streams-mixer',\n            mimeType: 'video/webm',\n            video: {\n              width: 360,\n              height: 240\n            }\n          };\n\n          if (!options.frameInterval) {\n            options.frameInterval = 10;\n          }\n\n          if (!options.video) {\n            options.video = {};\n          }\n\n          if (!options.video.width) {\n            options.video.width = 360;\n          }\n\n          if (!options.video.height) {\n            options.video.height = 240;\n          }\n          /**\r\n           * This method records all MediaStreams.\r\n           * @method\r\n           * @memberof MultiStreamRecorder\r\n           * @example\r\n           * recorder.record();\r\n           */\n\n\n          this.record = function () {\n            // github/muaz-khan/MultiStreamsMixer\n            mixer = new MultiStreamsMixer(arrayOfMediaStreams, options.elementClass || 'multi-streams-mixer');\n\n            if (getAllVideoTracks().length) {\n              mixer.frameInterval = options.frameInterval || 10;\n              mixer.width = options.video.width || 360;\n              mixer.height = options.video.height || 240;\n              mixer.startDrawingFrames();\n            }\n\n            if (options.previewStream && typeof options.previewStream === 'function') {\n              options.previewStream(mixer.getMixedStream());\n            } // record using MediaRecorder API\n\n\n            mediaRecorder = new MediaStreamRecorder(mixer.getMixedStream(), options);\n            mediaRecorder.record();\n          };\n\n          function getAllVideoTracks() {\n            var tracks = [];\n            arrayOfMediaStreams.forEach(function (stream) {\n              getTracks(stream, 'video').forEach(function (track) {\n                tracks.push(track);\n              });\n            });\n            return tracks;\n          }\n          /**\r\n           * This method stops recording MediaStream.\r\n           * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n           * @method\r\n           * @memberof MultiStreamRecorder\r\n           * @example\r\n           * recorder.stop(function(blob) {\r\n           *     video.src = URL.createObjectURL(blob);\r\n           * });\r\n           */\n\n\n          this.stop = function (callback) {\n            if (!mediaRecorder) {\n              return;\n            }\n\n            mediaRecorder.stop(function (blob) {\n              self.blob = blob;\n              callback(blob);\n              self.clearRecordedData();\n            });\n          };\n          /**\r\n           * This method pauses the recording process.\r\n           * @method\r\n           * @memberof MultiStreamRecorder\r\n           * @example\r\n           * recorder.pause();\r\n           */\n\n\n          this.pause = function () {\n            if (mediaRecorder) {\n              mediaRecorder.pause();\n            }\n          };\n          /**\r\n           * This method resumes the recording process.\r\n           * @method\r\n           * @memberof MultiStreamRecorder\r\n           * @example\r\n           * recorder.resume();\r\n           */\n\n\n          this.resume = function () {\n            if (mediaRecorder) {\n              mediaRecorder.resume();\n            }\n          };\n          /**\r\n           * This method resets currently recorded data.\r\n           * @method\r\n           * @memberof MultiStreamRecorder\r\n           * @example\r\n           * recorder.clearRecordedData();\r\n           */\n\n\n          this.clearRecordedData = function () {\n            if (mediaRecorder) {\n              mediaRecorder.clearRecordedData();\n              mediaRecorder = null;\n            }\n\n            if (mixer) {\n              mixer.releaseStreams();\n              mixer = null;\n            }\n          };\n          /**\r\n           * Add extra media-streams to existing recordings.\r\n           * @method\r\n           * @memberof MultiStreamRecorder\r\n           * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n           * @example\r\n           * recorder.addStreams([newAudioStream, newVideoStream]);\r\n           */\n\n\n          this.addStreams = function (streams) {\n            if (!streams) {\n              throw 'First parameter is required.';\n            }\n\n            if (!(streams instanceof Array)) {\n              streams = [streams];\n            }\n\n            arrayOfMediaStreams.concat(streams);\n\n            if (!mediaRecorder || !mixer) {\n              return;\n            }\n\n            mixer.appendStreams(streams);\n\n            if (options.previewStream && typeof options.previewStream === 'function') {\n              options.previewStream(mixer.getMixedStream());\n            }\n          };\n          /**\r\n           * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.\r\n           * @method\r\n           * @memberof MultiStreamRecorder\r\n           * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n           * @example\r\n           * recorder.resetVideoStreams([newVideo1, newVideo2]);\r\n           */\n\n\n          this.resetVideoStreams = function (streams) {\n            if (!mixer) {\n              return;\n            }\n\n            if (streams && !(streams instanceof Array)) {\n              streams = [streams];\n            }\n\n            mixer.resetVideoStreams(streams);\n          };\n          /**\r\n           * Returns MultiStreamsMixer\r\n           * @method\r\n           * @memberof MultiStreamRecorder\r\n           * @example\r\n           * let mixer = recorder.getMixer();\r\n           * mixer.appendStreams([newStream]);\r\n           */\n\n\n          this.getMixer = function () {\n            return mixer;\n          }; // for debugging\n\n\n          this.name = 'MultiStreamRecorder';\n\n          this.toString = function () {\n            return this.name;\n          };\n        }\n\n        if (typeof RecordRTC !== 'undefined') {\n          RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\n        } // _____________________\n        // RecordRTC.promises.js\n\n        /**\r\n         * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}\r\n         * @summary Promises for {@link RecordRTC}\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://MuazKhan.com|Muaz Khan}\r\n         * @typedef RecordRTCPromisesHandler\r\n         * @class\r\n         * @example\r\n         * var recorder = new RecordRTCPromisesHandler(mediaStream, options);\r\n         * recorder.startRecording()\r\n         *         .then(successCB)\r\n         *         .catch(errorCB);\r\n         * // Note: You can access all RecordRTC API using \"recorder.recordRTC\" e.g. \r\n         * recorder.recordRTC.onStateChanged = function(state) {};\r\n         * recorder.recordRTC.setRecordingDuration(5000);\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n         * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n         * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\r\n         * @requires {@link RecordRTC}\r\n         */\n\n\n        function RecordRTCPromisesHandler(mediaStream, options) {\n          if (!this) {\n            throw 'Use \"new RecordRTCPromisesHandler()\"';\n          }\n\n          if (typeof mediaStream === 'undefined') {\n            throw 'First argument \"MediaStream\" is required.';\n          }\n\n          var self = this;\n          /**\r\n           * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.\r\n           * @memberof RecordRTCPromisesHandler\r\n           * @example\r\n           * let internal = recorder.recordRTC.getInternalRecorder();\r\n           * alert(internal instanceof MediaStreamRecorder);\r\n           * recorder.recordRTC.onStateChanged = function(state) {};\r\n           */\n\n          self.recordRTC = new RecordRTC(mediaStream, options);\n          /**\r\n           * This method records MediaStream.\r\n           * @method\r\n           * @memberof RecordRTCPromisesHandler\r\n           * @example\r\n           * recorder.startRecording()\r\n           *         .then(successCB)\r\n           *         .catch(errorCB);\r\n           */\n\n          this.startRecording = function () {\n            return new Promise(function (resolve, reject) {\n              try {\n                self.recordRTC.startRecording();\n                resolve();\n              } catch (e) {\n                reject(e);\n              }\n            });\n          };\n          /**\r\n           * This method stops the recording.\r\n           * @method\r\n           * @memberof RecordRTCPromisesHandler\r\n           * @example\r\n           * recorder.stopRecording().then(function() {\r\n           *     var blob = recorder.getBlob();\r\n           * }).catch(errorCB);\r\n           */\n\n\n          this.stopRecording = function () {\n            return new Promise(function (resolve, reject) {\n              try {\n                self.recordRTC.stopRecording(function (url) {\n                  self.blob = self.recordRTC.getBlob();\n\n                  if (!self.blob || !self.blob.size) {\n                    reject('Empty blob.', self.blob);\n                    return;\n                  }\n\n                  resolve(url);\n                });\n              } catch (e) {\n                reject(e);\n              }\n            });\n          };\n          /**\r\n           * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n           * @method\r\n           * @memberof RecordRTCPromisesHandler\r\n           * @example\r\n           * recorder.pauseRecording()\r\n           *         .then(successCB)\r\n           *         .catch(errorCB);\r\n           */\n\n\n          this.pauseRecording = function () {\n            return new Promise(function (resolve, reject) {\n              try {\n                self.recordRTC.pauseRecording();\n                resolve();\n              } catch (e) {\n                reject(e);\n              }\n            });\n          };\n          /**\r\n           * This method resumes the recording.\r\n           * @method\r\n           * @memberof RecordRTCPromisesHandler\r\n           * @example\r\n           * recorder.resumeRecording()\r\n           *         .then(successCB)\r\n           *         .catch(errorCB);\r\n           */\n\n\n          this.resumeRecording = function () {\n            return new Promise(function (resolve, reject) {\n              try {\n                self.recordRTC.resumeRecording();\n                resolve();\n              } catch (e) {\n                reject(e);\n              }\n            });\n          };\n          /**\r\n           * This method returns data-url for the recorded blob.\r\n           * @method\r\n           * @memberof RecordRTCPromisesHandler\r\n           * @example\r\n           * recorder.stopRecording().then(function() {\r\n           *     recorder.getDataURL().then(function(dataURL) {\r\n           *         window.open(dataURL);\r\n           *     }).catch(errorCB);;\r\n           * }).catch(errorCB);\r\n           */\n\n\n          this.getDataURL = function (callback) {\n            return new Promise(function (resolve, reject) {\n              try {\n                self.recordRTC.getDataURL(function (dataURL) {\n                  resolve(dataURL);\n                });\n              } catch (e) {\n                reject(e);\n              }\n            });\n          };\n          /**\r\n           * This method returns the recorded blob.\r\n           * @method\r\n           * @memberof RecordRTCPromisesHandler\r\n           * @example\r\n           * recorder.stopRecording().then(function() {\r\n           *     recorder.getBlob().then(function(blob) {})\r\n           * }).catch(errorCB);\r\n           */\n\n\n          this.getBlob = function () {\n            return new Promise(function (resolve, reject) {\n              try {\n                resolve(self.recordRTC.getBlob());\n              } catch (e) {\n                reject(e);\n              }\n            });\n          };\n          /**\r\n           * This method returns the internal recording object.\r\n           * @method\r\n           * @memberof RecordRTCPromisesHandler\r\n           * @example\r\n           * let internalRecorder = await recorder.getInternalRecorder();\r\n           * if(internalRecorder instanceof MultiStreamRecorder) {\r\n           *     internalRecorder.addStreams([newAudioStream]);\r\n           *     internalRecorder.resetVideoStreams([screenStream]);\r\n           * }\r\n           * @returns {Object} \r\n           */\n\n\n          this.getInternalRecorder = function () {\n            return new Promise(function (resolve, reject) {\n              try {\n                resolve(self.recordRTC.getInternalRecorder());\n              } catch (e) {\n                reject(e);\n              }\n            });\n          };\n          /**\r\n           * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n           * @method\r\n           * @memberof RecordRTCPromisesHandler\r\n           * @example\r\n           * await recorder.reset();\r\n           * recorder.startRecording(); // record again\r\n           */\n\n\n          this.reset = function () {\n            return new Promise(function (resolve, reject) {\n              try {\n                resolve(self.recordRTC.reset());\n              } catch (e) {\n                reject(e);\n              }\n            });\n          };\n          /**\r\n           * Destroy RecordRTC instance. Clear all recorders and objects.\r\n           * @method\r\n           * @memberof RecordRTCPromisesHandler\r\n           * @example\r\n           * recorder.destroy().then(successCB).catch(errorCB);\r\n           */\n\n\n          this.destroy = function () {\n            return new Promise(function (resolve, reject) {\n              try {\n                resolve(self.recordRTC.destroy());\n              } catch (e) {\n                reject(e);\n              }\n            });\n          };\n          /**\r\n           * Get recorder's readonly state.\r\n           * @method\r\n           * @memberof RecordRTCPromisesHandler\r\n           * @example\r\n           * let state = await recorder.getState();\r\n           * // or\r\n           * recorder.getState().then(state => { console.log(state); })\r\n           * @returns {String} Returns recording state.\r\n           */\n\n\n          this.getState = function () {\n            return new Promise(function (resolve, reject) {\n              try {\n                resolve(self.recordRTC.getState());\n              } catch (e) {\n                reject(e);\n              }\n            });\n          };\n          /**\r\n           * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n           * @memberof RecordRTCPromisesHandler\r\n           * @example\r\n           * await recorder.stopRecording();\r\n           * let blob = recorder.getBlob(); // or \"recorder.recordRTC.blob\"\r\n           * invokeSaveAsDialog(blob);\r\n           */\n\n\n          this.blob = null;\n          /**\r\n           * RecordRTC version number\r\n           * @property {String} version - Release version number.\r\n           * @memberof RecordRTCPromisesHandler\r\n           * @static\r\n           * @readonly\r\n           * @example\r\n           * alert(recorder.version);\r\n           */\n\n          this.version = '5.5.9';\n        }\n\n        if (typeof RecordRTC !== 'undefined') {\n          RecordRTC.RecordRTCPromisesHandler = RecordRTCPromisesHandler;\n        } // ______________________\n        // WebAssemblyRecorder.js\n\n        /**\r\n         * WebAssemblyRecorder lets you create webm videos in JavaScript via WebAssembly. The library consumes raw RGBA32 buffers (4 bytes per pixel) and turns them into a webm video with the given framerate and quality. This makes it compatible out-of-the-box with ImageData from a CANVAS. With realtime mode you can also use webm-wasm for streaming webm videos.\r\n         * @summary Video recording feature in Chrome, Firefox and maybe Edge.\r\n         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n         * @author {@link https://MuazKhan.com|Muaz Khan}\r\n         * @typedef WebAssemblyRecorder\r\n         * @class\r\n         * @example\r\n         * var recorder = new WebAssemblyRecorder(mediaStream);\r\n         * recorder.record();\r\n         * recorder.stop(function(blob) {\r\n         *     video.src = URL.createObjectURL(blob);\r\n         * });\r\n         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n         * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n         * @param {object} config - {webAssemblyPath:'webm-wasm.wasm',workerPath: 'webm-worker.js', frameRate: 30, width: 1920, height: 1080, bitrate: 1024}\r\n         */\n\n\n        function WebAssemblyRecorder(stream, config) {\n          // based on: github.com/GoogleChromeLabs/webm-wasm\n          if (typeof ReadableStream === 'undefined' || typeof WritableStream === 'undefined') {\n            // because it fixes readable/writable streams issues\n            console.error('Following polyfill is strongly recommended: https://unpkg.com/@mattiasbuelens/web-streams-polyfill/dist/polyfill.min.js');\n          }\n\n          config = config || {};\n          config.width = config.width || 640;\n          config.height = config.height || 480;\n          config.frameRate = config.frameRate || 30;\n          config.bitrate = config.bitrate || 1200;\n\n          function createBufferURL(buffer, type) {\n            return URL.createObjectURL(new Blob([buffer], {\n              type: type || ''\n            }));\n          }\n\n          function cameraStream() {\n            return new ReadableStream({\n              start: function (controller) {\n                var cvs = document.createElement('canvas');\n                var video = document.createElement('video');\n                video.srcObject = stream;\n\n                video.onplaying = function () {\n                  cvs.width = config.width;\n                  cvs.height = config.height;\n                  var ctx = cvs.getContext('2d');\n                  var frameTimeout = 1000 / config.frameRate;\n                  setTimeout(function f() {\n                    ctx.drawImage(video, 0, 0);\n                    controller.enqueue(ctx.getImageData(0, 0, config.width, config.height));\n                    setTimeout(f, frameTimeout);\n                  }, frameTimeout);\n                };\n\n                video.play();\n              }\n            });\n          }\n\n          var worker;\n\n          function startRecording(stream, buffer) {\n            if (!config.workerPath && !buffer) {\n              // is it safe to use @latest ?\n              fetch('https://unpkg.com/webm-wasm@latest/dist/webm-worker.js').then(function (r) {\n                r.arrayBuffer().then(function (buffer) {\n                  startRecording(stream, buffer);\n                });\n              });\n              return;\n            }\n\n            if (!config.workerPath && buffer instanceof ArrayBuffer) {\n              var blob = new Blob([buffer], {\n                type: 'text/javascript'\n              });\n              config.workerPath = URL.createObjectURL(blob);\n            }\n\n            if (!config.workerPath) {\n              console.error('workerPath parameter is missing.');\n            }\n\n            worker = new Worker(config.workerPath);\n            worker.postMessage(config.webAssemblyPath || 'https://unpkg.com/webm-wasm@latest/dist/webm-wasm.wasm');\n            worker.addEventListener('message', function (event) {\n              if (event.data === 'READY') {\n                worker.postMessage({\n                  width: config.width,\n                  height: config.height,\n                  bitrate: config.bitrate || 1200,\n                  timebaseDen: config.frameRate || 30,\n                  realtime: true\n                });\n                cameraStream().pipeTo(new WritableStream({\n                  write: function (image) {\n                    if (!worker) {\n                      return;\n                    }\n\n                    worker.postMessage(image.data.buffer, [image.data.buffer]);\n                  }\n                }));\n              } else if (!!event.data) {\n                if (!isPaused) {\n                  arrayOfBuffers.push(event.data);\n                }\n              }\n            });\n          }\n          /**\r\n           * This method records video.\r\n           * @method\r\n           * @memberof WebAssemblyRecorder\r\n           * @example\r\n           * recorder.record();\r\n           */\n\n\n          this.record = function () {\n            arrayOfBuffers = [];\n            isPaused = false;\n            this.blob = null;\n            startRecording(stream);\n\n            if (typeof config.initCallback === 'function') {\n              config.initCallback();\n            }\n          };\n\n          var isPaused;\n          /**\r\n           * This method pauses the recording process.\r\n           * @method\r\n           * @memberof WebAssemblyRecorder\r\n           * @example\r\n           * recorder.pause();\r\n           */\n\n          this.pause = function () {\n            isPaused = true;\n          };\n          /**\r\n           * This method resumes the recording process.\r\n           * @method\r\n           * @memberof WebAssemblyRecorder\r\n           * @example\r\n           * recorder.resume();\r\n           */\n\n\n          this.resume = function () {\n            isPaused = false;\n          };\n\n          function terminate() {\n            if (!worker) {\n              return;\n            }\n\n            worker.postMessage(null);\n            worker.terminate();\n            worker = null;\n          }\n\n          var arrayOfBuffers = [];\n          /**\r\n           * This method stops recording video.\r\n           * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n           * @method\r\n           * @memberof WebAssemblyRecorder\r\n           * @example\r\n           * recorder.stop(function(blob) {\r\n           *     video.src = URL.createObjectURL(blob);\r\n           * });\r\n           */\n\n          this.stop = function (callback) {\n            terminate();\n            this.blob = new Blob(arrayOfBuffers, {\n              type: 'video/webm'\n            });\n            callback(this.blob);\n          }; // for debugging\n\n\n          this.name = 'WebAssemblyRecorder';\n\n          this.toString = function () {\n            return this.name;\n          };\n          /**\r\n           * This method resets currently recorded data.\r\n           * @method\r\n           * @memberof WebAssemblyRecorder\r\n           * @example\r\n           * recorder.clearRecordedData();\r\n           */\n\n\n          this.clearRecordedData = function () {\n            arrayOfBuffers = [];\n            isPaused = false;\n            this.blob = null; // todo: if recording-ON then STOP it first\n          };\n          /**\r\n           * @property {Blob} blob - The recorded blob object.\r\n           * @memberof WebAssemblyRecorder\r\n           * @example\r\n           * recorder.stop(function(){\r\n           *     var blob = recorder.blob;\r\n           * });\r\n           */\n\n\n          this.blob = null;\n        }\n\n        if (typeof RecordRTC !== 'undefined') {\n          RecordRTC.WebAssemblyRecorder = WebAssemblyRecorder;\n        }\n        /* WEBPACK VAR INJECTION */\n\n      }).call(exports, __webpack_require__(18), __webpack_require__(19));\n      /***/\n    },\n    /* 18 */\n\n    /***/\n    function (module, exports) {\n      var g; // This works in non-strict mode\n\n      g = function () {\n        return this;\n      }();\n\n      try {\n        // This works if eval is allowed (see CSP)\n        g = g || Function(\"return this\")() || (1, eval)(\"this\");\n      } catch (e) {\n        // This works if the window reference is available\n        if (typeof window === \"object\") g = window;\n      } // g can still be undefined, but nothing to do about it...\n      // We return undefined, instead of nothing here, so it's\n      // easier to handle this case. if(!global) { ...}\n\n\n      module.exports = g;\n      /***/\n    },\n    /* 19 */\n\n    /***/\n    function (module, exports) {\n      // shim for using process in browser\n      var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it\n      // don't break things.  But we need to wrap it in a try catch in case it is\n      // wrapped in strict mode code which doesn't define any globals.  It's inside a\n      // function because try/catches deoptimize in certain engines.\n\n      var cachedSetTimeout;\n      var cachedClearTimeout;\n\n      function defaultSetTimout() {\n        throw new Error('setTimeout has not been defined');\n      }\n\n      function defaultClearTimeout() {\n        throw new Error('clearTimeout has not been defined');\n      }\n\n      (function () {\n        try {\n          if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n          } else {\n            cachedSetTimeout = defaultSetTimout;\n          }\n        } catch (e) {\n          cachedSetTimeout = defaultSetTimout;\n        }\n\n        try {\n          if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n          } else {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        } catch (e) {\n          cachedClearTimeout = defaultClearTimeout;\n        }\n      })();\n\n      function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n          //normal enviroments in sane situations\n          return setTimeout(fun, 0);\n        } // if setTimeout wasn't available but was latter defined\n\n\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n        }\n\n        try {\n          // when when somebody has screwed with setTimeout but no I.E. maddness\n          return cachedSetTimeout(fun, 0);\n        } catch (e) {\n          try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n          } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n          }\n        }\n      }\n\n      function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n          //normal enviroments in sane situations\n          return clearTimeout(marker);\n        } // if clearTimeout wasn't available but was latter defined\n\n\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n        }\n\n        try {\n          // when when somebody has screwed with setTimeout but no I.E. maddness\n          return cachedClearTimeout(marker);\n        } catch (e) {\n          try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n          } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n          }\n        }\n      }\n\n      var queue = [];\n      var draining = false;\n      var currentQueue;\n      var queueIndex = -1;\n\n      function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n          return;\n        }\n\n        draining = false;\n\n        if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n        } else {\n          queueIndex = -1;\n        }\n\n        if (queue.length) {\n          drainQueue();\n        }\n      }\n\n      function drainQueue() {\n        if (draining) {\n          return;\n        }\n\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n        var len = queue.length;\n\n        while (len) {\n          currentQueue = queue;\n          queue = [];\n\n          while (++queueIndex < len) {\n            if (currentQueue) {\n              currentQueue[queueIndex].run();\n            }\n          }\n\n          queueIndex = -1;\n          len = queue.length;\n        }\n\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n      }\n\n      process.nextTick = function (fun) {\n        var args = new Array(arguments.length - 1);\n\n        if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n        }\n\n        queue.push(new Item(fun, args));\n\n        if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n        }\n      }; // v8 likes predictible objects\n\n\n      function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n      }\n\n      Item.prototype.run = function () {\n        this.fun.apply(null, this.array);\n      };\n\n      process.title = 'browser';\n      process.browser = true;\n      process.env = {};\n      process.argv = [];\n      process.version = ''; // empty string to avoid regexp issues\n\n      process.versions = {};\n\n      function noop() {}\n\n      process.on = noop;\n      process.addListener = noop;\n      process.once = noop;\n      process.off = noop;\n      process.removeListener = noop;\n      process.removeAllListeners = noop;\n      process.emit = noop;\n      process.prependListener = noop;\n      process.prependOnceListener = noop;\n\n      process.listeners = function (name) {\n        return [];\n      };\n\n      process.binding = function (name) {\n        throw new Error('process.binding is not supported');\n      };\n\n      process.cwd = function () {\n        return '/';\n      };\n\n      process.chdir = function (dir) {\n        throw new Error('process.chdir is not supported');\n      };\n\n      process.umask = function () {\n        return 0;\n      };\n      /***/\n\n    },\n    /* 20 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n\n      function init(Survey, $) {\n        $ = $ || window.$;\n        var widget = {\n          name: \"emotionsratings\",\n          title: \"Emotions Ratings\",\n          iconName: \"icon-emotionsratings\",\n          widgetIsLoaded: function () {\n            return typeof $ == \"function\" && !!$.fn.emotionsRating;\n          },\n          defaultJSON: {\n            choices: [1, 2, 3, 4, 5]\n          },\n          isFit: function (question) {\n            return question.getType() === \"emotionsratings\";\n          },\n          isDefaultRender: false,\n          htmlTemplate: \"<div style='height: 33px'></div>\",\n          activatedByChanged: function (activatedBy) {\n            Survey.JsonObject.metaData.addClass(\"emotionsratings\", [{\n              name: \"hasOther\",\n              visible: false\n            }, {\n              name: \"otherText\",\n              visible: false\n            }, {\n              name: \"optionsCaption\",\n              visible: false\n            }, {\n              name: \"otherErrorText\",\n              visible: false\n            }, {\n              name: \"storeOthersAsComment\",\n              visible: false\n            }, {\n              name: \"renderAs\",\n              visible: false\n            }], null, \"dropdown\");\n            Survey.JsonObject.metaData.addProperties(\"emotionsratings\", [{\n              name: \"emotions:itemvalues\",\n              default: [\"angry\", \"disappointed\", \"meh\", \"happy\", \"inLove\"]\n            }, {\n              name: \"emotionSize:number\",\n              default: 30\n            }, {\n              name: \"emotionsCount:number\",\n              default: 5\n            }, {\n              name: \"bgEmotion\",\n              default: \"happy\"\n            }, {\n              name: \"emotionColor\",\n              default: \"#FF0066\"\n            }]);\n          },\n          afterRender: function (question, el) {\n            var emotions = (question.emotions || []).map(function (item) {\n              return item.value;\n            });\n\n            if (emotions.length === 0) {\n              emotions = [\"angry\", \"disappointed\", \"meh\", \"happy\", \"inLove\"];\n            }\n\n            var options = {\n              emotionSize: question.emotionSize,\n              bgEmotion: question.bgEmotion,\n              emotions: emotions,\n              initialRating: question.value,\n              color: question.emotionColor,\n              count: question.emotionsCount,\n              onUpdate: function (value) {\n                question.value = value;\n              }\n            };\n            initWidget();\n            question.valueChangedCallback = initWidget;\n            question.readOnlyChangedCallback = initWidget;\n\n            function initWidget() {\n              el.innerHTML = \"<div></div>\";\n              $(el).off();\n              options.initialRating = question.value || 0;\n              options.disabled = question.isReadOnly;\n              $(el).find(\"div\").emotionsRating(options);\n            }\n          },\n          willUnmount: function (question, el) {\n            el.innerHTML = null;\n            $(el).off();\n            question.readOnlyChangedCallback = null;\n            question.valueChangedCallback = null;\n          },\n          pdfQuestionType: \"dropdown\"\n        };\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey, window.$);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"default\"] = init;\n      /***/\n    },\n    /* 21 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(__webpack_exports__, \"__esModule\", {\n        value: true\n      });\n      /* harmony import */\n\n      var __WEBPACK_IMPORTED_MODULE_0__icheck_js__ = __webpack_require__(0);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"icheck\", function () {\n        return __WEBPACK_IMPORTED_MODULE_0__icheck_js__[\"default\"];\n      });\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_1__select2_js__ = __webpack_require__(1);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"select2\", function () {\n        return __WEBPACK_IMPORTED_MODULE_1__select2_js__[\"default\"];\n      });\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_2__inputmask_js__ = __webpack_require__(2);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"inputmask\", function () {\n        return __WEBPACK_IMPORTED_MODULE_2__inputmask_js__[\"default\"];\n      });\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_3__jquery_bar_rating_js__ = __webpack_require__(4);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"jquerybarrating\", function () {\n        return __WEBPACK_IMPORTED_MODULE_3__jquery_bar_rating_js__[\"default\"];\n      });\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_4__jquery_ui_datepicker_js__ = __webpack_require__(5);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"jqueryuidatepicker\", function () {\n        return __WEBPACK_IMPORTED_MODULE_4__jquery_ui_datepicker_js__[\"default\"];\n      });\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_5__nouislider_js__ = __webpack_require__(6);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"nouislider\", function () {\n        return __WEBPACK_IMPORTED_MODULE_5__nouislider_js__[\"default\"];\n      });\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_6__select2_tagbox_js__ = __webpack_require__(8);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"select2tagbox\", function () {\n        return __WEBPACK_IMPORTED_MODULE_6__select2_tagbox_js__[\"default\"];\n      });\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_7__sortablejs_js__ = __webpack_require__(9);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"sortablejs\", function () {\n        return __WEBPACK_IMPORTED_MODULE_7__sortablejs_js__[\"default\"];\n      });\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_8__ck_editor_js__ = __webpack_require__(11);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"ckeditor\", function () {\n        return __WEBPACK_IMPORTED_MODULE_8__ck_editor_js__[\"default\"];\n      });\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_9__easy_autocomplete_js__ = __webpack_require__(12);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"autocomplete\", function () {\n        return __WEBPACK_IMPORTED_MODULE_9__easy_autocomplete_js__[\"default\"];\n      });\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_10__pretty_checkbox_js__ = __webpack_require__(13);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"prettycheckbox\", function () {\n        return __WEBPACK_IMPORTED_MODULE_10__pretty_checkbox_js__[\"default\"];\n      });\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_11__bootstrap_slider_js__ = __webpack_require__(14);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"bootstrapslider\", function () {\n        return __WEBPACK_IMPORTED_MODULE_11__bootstrap_slider_js__[\"default\"];\n      });\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_12__microphone_js__ = __webpack_require__(16);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"microphone\", function () {\n        return __WEBPACK_IMPORTED_MODULE_12__microphone_js__[\"default\"];\n      });\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_13__emotionsratings_js__ = __webpack_require__(20);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"emotionsratings\", function () {\n        return __WEBPACK_IMPORTED_MODULE_13__emotionsratings_js__[\"default\"];\n      });\n      /* harmony import */\n\n\n      var __WEBPACK_IMPORTED_MODULE_14__bootstrapdatepicker_js__ = __webpack_require__(22);\n      /* harmony reexport (binding) */\n\n\n      __webpack_require__.d(__webpack_exports__, \"bootstrapdatepicker\", function () {\n        return __WEBPACK_IMPORTED_MODULE_14__bootstrapdatepicker_js__[\"a\"];\n      });\n      /***/\n\n    },\n    /* 22 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      function init(Survey, $) {\n        $ = $ || window.$;\n\n        if (!$.fn.bootstrapDP && !!$.fn.datepicker && !!$.fn.datepicker.noConflict) {\n          $.fn.bootstrapDP = $.fn.datepicker.noConflict();\n\n          if (!$.fn.datepicker) {\n            $.fn.datepicker = $.fn.bootstrapDP;\n          }\n        }\n\n        var widget = {\n          name: \"bootstrapdatepicker\",\n          title: \"Date picker\",\n          iconName: \"icon-datepicker\",\n          widgetIsLoaded: function () {\n            return !!$.fn.bootstrapDP;\n          },\n          isFit: function (question) {\n            return question.getType() === \"bootstrapdatepicker\";\n          },\n          htmlTemplate: \"<input class='form-control widget-datepicker' type='text' style='width: 100%;'>\",\n          activatedByChanged: function (activatedBy) {\n            Survey.JsonObject.metaData.addClass(\"bootstrapdatepicker\", [{\n              name: \"inputType\",\n              visible: false\n            }, {\n              name: \"inputFormat\",\n              visible: false\n            }, {\n              name: \"inputMask\",\n              visible: false\n            }], null, \"text\");\n            Survey.JsonObject.metaData.addProperties(\"bootstrapdatepicker\", [{\n              // Can take a string or an Object.\n              // https://bootstrap-datepicker.readthedocs.io/en/latest/options.html#format\n              name: \"dateFormat\",\n              default: \"'mm/dd/yyyy'\"\n            }, {\n              // Can take a Date or a string\n              // https://bootstrap-datepicker.readthedocs.io/en/latest/options.html#options\n              name: \"startDate\",\n              default: \"\"\n            }, {\n              // Can take a Date or a string\n              // https://bootstrap-datepicker.readthedocs.io/en/latest/options.html#options\n              name: \"endDate\",\n              default: \"\"\n            }, {\n              name: \"todayHighlight:boolean\",\n              default: true\n            }, {\n              name: \"weekStart:number\",\n              default: 0\n            }, {\n              name: \"clearBtn:boolean\",\n              default: false\n            }, {\n              name: \"autoClose:boolean\",\n              default: true\n            }, {\n              name: \"daysOfWeekHighlighted:string\",\n              default: \"\"\n            }, {\n              name: \"disableTouchKeyboard:boolean\",\n              default: true\n            }]);\n          },\n          afterRender: function (question, el) {\n            var $el = $(el).is(\".widget-datepicker\") ? $(el) : $(el).find(\".widget-datepicker\");\n            var pickerWidget = $el.bootstrapDP({\n              enableOnReadonly: false,\n              format: question.dateFormat,\n              startDate: question.startDate,\n              endDate: question.endDate,\n              todayHighlight: question.todayHighlight,\n              weekStart: question.weekStart,\n              clearBtn: question.clearBtn,\n              autoclose: question.autoClose,\n              daysOfWeekHighlighted: question.daysOfWeekHighlighted,\n              disableTouchKeyboard: question.disableTouchKeyboard\n            }) // .on(\"changeDate\", function (e) {\n            //     question.value = moment(e.date).format(\"DD/MM/YYYY\");\n            //     // `e` here contains the extra attributes\n            // })\n            .on(\"change\", function (e) {\n              var newValue = pickerWidget.val();\n\n              if (question.value != newValue) {\n                question.value = newValue;\n              }\n            });\n\n            question.valueChangedCallback = function () {\n              pickerWidget.val(question.value); // $el.bootstrapDP('update', moment(question.value, \"DD/MM/YYYY\").toDate());\n            };\n\n            question.valueChangedCallback();\n\n            question.readOnlyChangedCallback = function () {\n              if (question.isReadOnly) {\n                $el.prop('readonly', true);\n              } else {\n                $el.removeAttr('readonly');\n              }\n            };\n\n            question.readOnlyChangedCallback();\n          },\n          willUnmount: function (question, el) {\n            var $el = $(el).is(\".widget-datepicker\") ? $(el) : $(el).find(\".widget-datepicker\");\n            $el.bootstrapDP(\"destroy\");\n            question.readOnlyChangedCallback = undefined;\n            question.valueChangedCallback = undefined;\n          },\n          pdfQuestionType: \"text\"\n        };\n        Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n      }\n\n      if (typeof Survey !== \"undefined\") {\n        init(Survey, window.$);\n      }\n      /* harmony default export */\n\n\n      __webpack_exports__[\"a\"] = init;\n      /***/\n    }\n    /******/\n    ])\n  );\n});","map":{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:/webpack/bootstrap 7fc63f551ab973caba9a","webpack:///src/icheck.js","webpack:///src/select2.js","webpack:///src/inputmask.js","webpack:/external {\"root\":\"Inputmask\",\"commonjs2\":\"inputmask\",\"commonjs\":\"inputmask\",\"amd\":\"inputmask\"}","webpack:///src/jquery-bar-rating.js","webpack:///src/jquery-ui-datepicker.js","webpack:///src/nouislider.js","webpack:/external {\"root\":\"noUiSlider\",\"commonjs2\":\"nouislider\",\"commonjs\":\"nouislider\",\"amd\":\"nouislider\"}","webpack:///src/select2-tagbox.js","webpack:///src/sortablejs.js","webpack:/external {\"root\":\"Sortable\",\"commonjs2\":\"sortablejs\",\"commonjs\":\"sortablejs\",\"amd\":\"sortablejs\"}","webpack:///src/ck-editor.js","webpack:///src/easy-autocomplete.js","webpack:///src/pretty-checkbox.js","webpack:///src/bootstrap-slider.js","webpack:/external {\"root\":\"Slider\",\"commonjs2\":\"bootstrap-slider\",\"commonjs\":\"bootstrap-slider\",\"amd\":\"bootstrap-slider\"}","webpack:///src/microphone.js","webpack:///node_modules/recordrtc/RecordRTC.js","webpack:///(webpack)/buildin/global.js","webpack:///node_modules/process/browser.js","webpack:///src/emotionsratings.js","webpack:///src/surveyjs-widgets.js","webpack:///src/bootstrapdatepicker.js"],"names":[],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"inputmask\"), require(\"nouislider\"), require(\"sortablejs\"), require(\"bootstrap-slider\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"surveyjs-widgets\", [\"inputmask\", \"nouislider\", \"sortablejs\", \"bootstrap-slider\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"surveyjs-widgets\"] = factory(require(\"inputmask\"), require(\"nouislider\"), require(\"sortablejs\"), require(\"bootstrap-slider\"));\n\telse\n\t\troot[\"surveyjs-widgets\"] = factory(root[\"Inputmask\"], root[\"noUiSlider\"], root[\"Sortable\"], root[\"Slider\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_15__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7fc63f551ab973caba9a","function escValue(val) {\n  if (typeof val === \"string\") {\n    return (val || \"\").replace(/(['])/g, \"\\\\$1\");\n  }\n  return val;\n}\n\nfunction init(Survey, $) {\n  $ = $ || window.$;\n  var widget = {\n    className: \"iradio_square-blue\",\n    checkboxClass: \"iradio_square-blue\",\n    radioClass: \"iradio_square-blue\",\n    name: \"icheck\",\n    widgetIsLoaded: function() {\n      return typeof $ == \"function\" && !!$.fn.iCheck;\n    },\n    isFit: function(question) {\n      var t = question.getType();\n      return t === \"radiogroup\" || t === \"checkbox\" || t === \"matrix\";\n    },\n    isDefaultRender: true,\n    afterRender: function(question, el) {\n      var rootWidget = this;\n      var $el = $(el);\n\n      $el.find(\".sv-item__decorator\").hide();\n\n      $el.find(\"input\").data({\n        iCheck: undefined\n      });\n      function getIndexByValue(arr, value) {\n        if (!Array.isArray(arr)) return -1;\n        for (var i = 0; i < arr.length; i++) {\n          if (arr[i] == value) return i;\n          if (!!arr[i] && arr[i].toString().toLowerCase() == value) return i;\n        }\n        return -1;\n      }\n      var frozeUpdating = false;\n      var makeChoicesICheck = function() {\n        var inputs = $el.find(\"input\");\n        inputs.iCheck({\n          checkboxClass:\n            question.checkboxClass ||\n            rootWidget.checkboxClass ||\n            rootWidget.className,\n          radioClass:\n            question.radioClass || rootWidget.radioClass || rootWidget.className\n        });\n        inputs.on(\"ifChecked\", function(event) {\n          if (frozeUpdating) return;\n          if (question.getType() === \"matrix\") {\n            question.generatedVisibleRows.forEach(function(row, index, rows) {\n              if (row.fullName === event.target.name) {\n                row.value = event.target.value;\n              }\n            });\n          } else if (question.getType() === \"checkbox\") {\n            var oldValue = question.value || [];\n            var index = getIndexByValue(oldValue, event.target.value);\n            if (index === -1) {\n              question.value = oldValue.concat([event.target.value]);\n            }\n          } else {\n            question.value = event.target.value;\n          }\n        });\n\n        inputs.on(\"ifUnchecked\", function(event) {\n          if (frozeUpdating) return;\n          if (question.getType() === \"checkbox\") {\n            var oldValue = (question.value || []).slice();\n            var index = getIndexByValue(oldValue, event.target.value);\n            if (index >= 0) {\n              oldValue.splice(index, 1);\n              question.value = oldValue;\n            }\n          }\n        });\n      };\n      function uncheckIcheck(cEl) {\n        cEl.iCheck(\"uncheck\");\n        cEl[0].parentElement.classList.remove(\"checked\");\n      }\n      var select = function() {\n        frozeUpdating = true;\n        if (question.getType() !== \"matrix\") {\n          var values = question.value;\n          if (!Array.isArray(values)) {\n            values = [values];\n          }\n          if (question.getType() == \"checkbox\") {\n            var qValue = question.value;\n            question.visibleChoices.forEach(function(item) {\n              var inEl = $el.find(\n                \"input[value='\" + escValue(item.value) + \"']\"\n              );\n              if (!inEl) return;\n              var isChecked = getIndexByValue(qValue, item.value) > -1;\n              if (isChecked) {\n                inEl.iCheck(\"check\");\n              } else {\n                var cEl = inEl[0];\n                var wasChecked = !!cEl[\"checked\"];\n                if (wasChecked) {\n                  inEl.removeAttr(\"checked\");\n                  if (!inEl.parent().hasClass(\"checked\"))\n                    setTimeout(function() {\n                      uncheckIcheck(inEl);\n                    });\n                  else uncheckIcheck(inEl);\n                }\n              }\n            });\n          } else {\n            values.forEach(function(value) {\n              $el\n                .find(\"input[value='\" + escValue(value) + \"']\")\n                .iCheck(\"check\");\n            });\n          }\n        } else {\n          question.generatedVisibleRows.forEach(function(row, index, rows) {\n            if (row.value) {\n              $(el)\n                .find(\n                  \"input[name='\" +\n                    row.fullName +\n                    \"'][value='\" +\n                    escValue(row.value) +\n                    \"']\"\n                )\n                .iCheck(\"check\");\n            }\n          });\n        }\n        frozeUpdating = false;\n      };\n      makeChoicesICheck();\n\n      question.visibleChoicesChangedCallback = function() {\n        makeChoicesICheck();\n        $el.find(\".sv-item__decorator\").hide();\n      };\n      question.valueChangedCallback = select;\n      select();\n    },\n    willUnmount: function(question, el) {\n      var $el = $(el);\n      $el.find(\"input\").iCheck(\"destroy\");\n      question.visibleChoicesChangedCallback = null;\n    }\n  };\n\n  Survey.JsonObject.metaData.addProperty(\"radiogroup\", \"radioClass\");\n  Survey.JsonObject.metaData.addProperty(\"checkbox\", \"checkboxClass\");\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"type\");\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey, window.$);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/icheck.js\n// module id = 0\n// module chunks = 0 11","function init(Survey, $) {\n  $ = $ || window.$;\n  var widget = {\n    activatedBy: \"property\",\n    name: \"select2\",\n    widgetIsLoaded: function () {\n      return typeof $ == \"function\" && !!$.fn.select2;\n    },\n    isFit: function (question) {\n      if (widget.activatedBy == \"property\")\n        return (\n          question[\"renderAs\"] === \"select2\" &&\n          question.getType() === \"dropdown\"\n        );\n      if (widget.activatedBy == \"type\")\n        return typeof question.getType() === \"dropdown\";\n      if (widget.activatedBy == \"customtype\")\n        return question.getType() === \"select2\";\n      return false;\n    },\n    activatedByChanged: function (activatedBy) {\n      if (!this.widgetIsLoaded()) return;\n      widget.activatedBy = activatedBy;\n      Survey.JsonObject.metaData.removeProperty(\"dropdown\", \"renderAs\");\n      if (activatedBy == \"property\") {\n        Survey.JsonObject.metaData.addProperty(\"dropdown\", {\n          name: \"renderAs\",\n          default: \"standart\",\n          choices: [\"select2\", \"standart\"],\n        });\n        Survey.JsonObject.metaData.addProperty(\"dropdown\", {\n          dependsOn: \"renderAs\",\n          name: \"select2Config\",\n          visibleIf: function (obj) {\n            return obj.renderAs == \"select2\";\n          },\n        });\n      }\n      if (activatedBy == \"customtype\") {\n        Survey.JsonObject.metaData.addClass(\"select2\", [], null, \"dropdown\");\n        Survey.JsonObject.metaData.addProperty(\"select2\", {\n          name: \"select2Config\",\n          default: null,\n        });\n      }\n    },\n    htmlTemplate:\n      \"<div><select style='width: 100%;'></select><textarea></textarea></div>\",\n    afterRender: function (question, el) {\n      var select2Config = question.select2Config;\n      var settings =\n        select2Config && typeof select2Config == \"string\"\n          ? JSON.parse(select2Config)\n          : select2Config;\n      if (!settings) settings = {};\n      var $el = $(el).is(\"select\") ? $(el) : $(el).find(\"select\");\n      var $otherElement = $(el).find(\"textarea\");\n      $otherElement.addClass(question.cssClasses.other);\n      $otherElement.bind(\"input propertychange\", function () {\n        if (isSettingValue) return;\n        question.comment = $otherElement.val();\n      });\n      var updateComment = function () {\n        $otherElement.val(question.comment);\n        if (question.isOtherSelected) {\n          $otherElement.show();\n        } else {\n          $otherElement.hide();\n        }\n      };\n      var isSettingValue = false;\n      var updateValueHandler = function () {\n        if (isSettingValue) return;\n        isSettingValue = true;\n        if ($el.find(\"option[value='\" + question.value + \"']\").length) {\n          $el.val(question.value).trigger(\"change\");\n        } else {\n          var newOption = new Option(\n            question.value, //TODO if question value is object then need to improve\n            question.value,\n            true,\n            true\n          );\n          $el.append(newOption).trigger(\"change\");\n        }\n        updateComment();\n        isSettingValue = false;\n      };\n      var updateChoices = function () {\n        $el.select2().empty();\n        if (!settings.placeholder && question.showOptionsCaption) {\n          settings.placeholder = question.optionsCaption;\n          settings.allowClear = true;\n        }\n        if (!settings.theme) {\n          settings.theme = \"classic\";\n        }\n        settings.disabled = question.isReadOnly;\n        if (settings.ajax) {\n          $el.select2(settings);\n          question.keepIncorrectValues = true;\n        } else {\n          settings.data = question.visibleChoices.map(function (choice) {\n            return {\n              id: choice.value,\n              text: choice.text,\n            };\n          });\n          $el.select2(settings);\n        }\n        // fixed width accrording to https://stackoverflow.com/questions/45276778/select2-not-responsive-width-larger-than-container\n        if (!!el.querySelector(\".select2\")) {\n          el.querySelector(\".select2\").style.width = \"100%\";\n        }\n        if (!!el.nextElementSibling) {\n          el.nextElementSibling.style.marginBottom = \"1px\";\n        }\n        updateValueHandler();\n      };\n\n      $otherElement.prop(\"disabled\", question.isReadOnly);\n      question.readOnlyChangedCallback = function () {\n        $el.prop(\"disabled\", question.isReadOnly);\n        $otherElement.prop(\"disabled\", question.isReadOnly);\n      };\n\n      question.registerFunctionOnPropertyValueChanged(\n        \"visibleChoices\",\n        function () {\n          updateChoices();\n        }\n      );\n      updateChoices();\n      $el.on(\"select2:select\", function (e) {\n        question.renderedValue = e.target.value;\n        updateComment();\n      });\n      $el.on(\"select2:unselecting\", function (e) {\n        question.renderedValue = null;\n        updateComment();\n      });\n      question.valueChangedCallback = updateValueHandler;\n      updateValueHandler();\n    },\n    willUnmount: function (question, el) {\n      $(el).find(\"select\").off(\"select2:select\").select2(\"destroy\");\n      question.readOnlyChangedCallback = null;\n    },\n  };\n\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget);\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey, window.$);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/select2.js\n// module id = 1\n// module chunks = 0 6","import Inputmask from \"inputmask\";\n\nfunction init(Survey) {\n  var widget = {\n    name: \"maskedit\",\n    numericGroupSeparator: \",\",\n    numericAutoGroup: true,\n    numericDigits: 2,\n    numericDigitsOptional: false,\n    numericPlaceholder: \"0\",\n    autoUnmask: true,\n    widgetIsLoaded: function () {\n      return typeof Inputmask != \"undefined\";\n    },\n    isFit: function (question) {\n      if (question.getType() == \"multipletext\") return true;\n      return (\n        question.getType() == \"text\" &&\n        (question.inputMask != \"none\" || question.inputFormat)\n      );\n    },\n    isDefaultRender: true,\n    activatedByChanged: function (activatedBy) {\n      if (Survey.JsonObject.metaData.findProperty(\"text\", \"inputMask\")) return;\n      var properties = [\n        \"inputFormat\",\n        {\n          name: \"prefix\",\n          visible: false,\n        },\n        {\n          name: \"autoUnmask:boolean\",\n          default: true,\n        },\n        {\n          name: \"inputMask\",\n          default: \"none\",\n          choices: [\n            \"none\",\n            \"datetime\",\n            \"currency\",\n            \"decimal\",\n            \"email\",\n            \"phone\",\n            \"ip\",\n          ],\n        },\n      ];\n      Survey.JsonObject.metaData.addProperties(\"text\", properties);\n      Survey.JsonObject.metaData.addProperties(\n        \"matrixdropdowncolumn\",\n        properties\n      );\n      Survey.JsonObject.metaData.addProperties(\"multipletextitem\", properties);\n    },\n    applyInputMask: function (surveyElement, el) {\n      var rootWidget = this;\n      var mask =\n        surveyElement.inputMask != \"none\"\n          ? surveyElement.inputMask\n          : surveyElement.inputFormat;\n      var options = {\n        autoUnmask:\n          typeof surveyElement.autoUnmask !== \"undefined\"\n            ? surveyElement.autoUnmask\n            : rootWidget.autoUnmask,\n      };\n      if (surveyElement.inputMask != \"none\")\n        options.inputFormat = surveyElement.inputFormat;\n\n      if (\n        surveyElement.inputMask == \"currency\" ||\n        surveyElement.inputMask == \"decimal\"\n      ) {\n        options.groupSeparator = rootWidget.numericGroupSeparator;\n        options.autoGroup = rootWidget.numericAutoGroup;\n      }\n      if (surveyElement.inputMask == \"currency\") {\n        options.digits = rootWidget.numericDigits;\n        options.digitsOptional = rootWidget.numericDigitsOptional;\n        options.prefix = surveyElement.prefix || \"\";\n        options.placeholder = rootWidget.numericPlaceholder;\n      }\n      // if (surveyElement.inputMask == \"datetime\") {\n      //   mask = surveyElement.inputFormat;\n      // }\n      if (surveyElement.inputMask == \"phone\" && !!surveyElement.inputFormat) {\n        mask = surveyElement.inputFormat;\n      }\n\n      Inputmask(mask, options).mask(el);\n\n      el.onblur = function () {\n        if (surveyElement.value === el.inputmask.getemptymask()) {\n          surveyElement.value = \"\";\n        }\n      };\n\n      var customWidgetData =\n        surveyElement.getType() === \"multipletextitem\"\n          ? surveyElement.editorValue.customWidgetData\n          : surveyElement.customWidgetData;\n      el.oninput = function () {\n        customWidgetData.isNeedRender = true;\n      };\n\n      var pushValueHandler = function () {\n        if (el.inputmask.isComplete()) {\n          surveyElement.value = options.autoUnmask\n            ? el.inputmask.unmaskedvalue()\n            : el.value;\n        } else {\n          surveyElement.value = null;\n        }\n      };\n      el.onfocusout = el.onchange = pushValueHandler;\n\n      var updateHandler = function () {\n        el.value = surveyElement.value === undefined || surveyElement.value === null ? \"\" : surveyElement.value;\n      };\n      surveyElement.valueChangedCallback = updateHandler;\n      updateHandler();\n    },\n    afterRender: function (question, el) {\n      if (question.getType() != \"multipletext\") {\n        var input = el.querySelector(\"input\") || el;\n        this.applyInputMask(question, input);\n      } else {\n        for (var i = 0; i < question.items.length; i++) {\n          var item = question.items[i];\n          if (item.inputMask != \"none\" || item.inputFormat) {\n            var input = el.querySelector(\"#\" + item.editor.inputId);\n            if (input) {\n              this.applyInputMask(item, input);\n            }\n          }\n        }\n      }\n    },\n    willUnmount: function (question, el) {\n      var input = el.querySelector(\"input\") || el;\n      if (!!input && !!input.inputmask) {\n        input.inputmask.remove();\n      }\n    },\n  };\n\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget);\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/inputmask.js\n// module id = 2\n// module chunks = 0 4","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"Inputmask\",\"commonjs2\":\"inputmask\",\"commonjs\":\"inputmask\",\"amd\":\"inputmask\"}\n// module id = 3\n// module chunks = 0 4","function init(Survey, $) {\n  $ = $ || window.$;\n  var widget = {\n    name: \"barrating\",\n    title: \"Bar rating\",\n    iconName: \"icon-barrating\",\n    widgetIsLoaded: function() {\n      return typeof $ == \"function\" && !!$.fn.barrating;\n    },\n    defaultJSON: { choices: [1, 2, 3, 4, 5] },\n    isFit: function(question) {\n      return question.getType() === \"barrating\";\n    },\n    isDefaultRender: true,\n    activatedByChanged: function(activatedBy) {\n      Survey.JsonObject.metaData.addClass(\n        \"barrating\",\n        [\n          { name: \"hasOther\", visible: false },\n          { name: \"otherText\", visible: false },\n          { name: \"optionsCaption\", visible: false },\n          { name: \"otherErrorText\", visible: false },\n          { name: \"storeOthersAsComment\", visible: false },\n          { name: \"renderAs\", visible: false },\n          { name: \"select2Config\", visible: false }\n        ],\n        null,\n        \"dropdown\"\n      );\n      Survey.JsonObject.metaData.addProperty(\"barrating\", {\n        name: \"showValues:boolean\",\n        default: false\n      });\n      Survey.JsonObject.metaData.addProperty(\"barrating\", {\n        name: \"ratingTheme\",\n        default: \"css-stars\",\n        choices: [\n          \"fontawesome-stars\",\n          \"css-stars\",\n          \"bars-pill\",\n          \"bars-1to10\",\n          \"bars-movie\",\n          \"bars-reversed\",\n          \"bars-horizontal\",\n          \"fontawesome-stars-o\"\n        ]\n      });\n    },\n    afterRender: function(question, el) {\n      var $customSelect;\n      var $questionInput;\n      var contentContainer = $(el).is(\"select\")\n        ? $(el)\n            .parent()\n            .parent()[0]\n        : $(el).parent()[0];\n      var renderCustomSelect = function() {\n        $customSelect = $(\"<select class='sv-widget-select'></select>\");\n        question.visibleChoices.forEach(function(choice) {\n          $customSelect.append(\n            '<option value=\"{0}\">{1}</option>'.format(choice.value, choice.text)\n          );\n        });\n        $questionInput = $(contentContainer).find(\n          '[id=\"{0}\"]'.format(question.inputId)\n        );\n\n        $questionInput.css(\"display\", \"none\");\n        $questionInput.after($customSelect);\n        $customSelect[0].selectedIndex = -1;\n      };\n      var removeCustomSelect = function() {\n        $questionInput.css(\"display\", \"\");\n        $customSelect.barrating(\"destroy\");\n        $customSelect.remove();\n      };\n      var renderBarrating = function() {\n        $customSelect.barrating(\"show\", {\n          theme: question.ratingTheme,\n          initialRating: question.value,\n          showValues: question.showValues,\n          showSelectedRating: false,\n          readonly: question.isReadOnly,\n          onSelect: function(value, text) {\n            valueChangingByWidget = true;\n            question.value = value;\n            valueChangingByWidget = false;\n          }\n        });\n      };\n      renderCustomSelect();\n      renderBarrating();\n      if (!!$customSelect.parents()[0])\n        $customSelect.parents()[0].style.marginBottom = \"3px\";\n      var valueChangingByWidget = false;\n\n      question.valueChangedCallback = function() {\n        if (\n          !valueChangingByWidget &&\n          $(contentContainer).find(\"select.sv-widget-select\")[0].value !==\n            question.value\n        ) {\n          $(contentContainer)\n            .find(\"select.sv-widget-select\")\n            .barrating(\"set\", question.value);\n        }\n      };\n      question.__barratingOnPropertyChangedCallback = function(\n        sender,\n        options\n      ) {\n        if (options.name == \"ratingTheme\") {\n          $customSelect.barrating(\"destroy\");\n          renderBarrating();\n        }\n      };\n      question.onPropertyChanged.add(\n        question.__barratingOnPropertyChangedCallback\n      );\n      question.readOnlyChangedCallback = function() {\n        removeCustomSelect();\n        renderCustomSelect();\n        renderBarrating();\n      };\n      question.visibleChoicesChangedCallback = function() {\n        renderBarrating();\n      };\n    },\n    willUnmount: function(question, el) {\n      var $contentContainer = $(el).is(\"select\")\n        ? $(el)\n            .parent()\n            .parent()\n        : $(el).parent();\n      var $el = $contentContainer.find(\"select.sv-widget-select\");\n      $el.barrating(\"destroy\");\n      $el.remove();\n      question.valueChangedCallback = undefined;\n      question.onPropertyChanged.remove(\n        question.__barratingOnPropertyChangedCallback\n      );\n      question.__barratingOnPropertyChangedCallback = undefined;\n    },\n    pdfQuestionType: \"dropdown\"\n  };\n\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey, window.$);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/jquery-bar-rating.js\n// module id = 4\n// module chunks = 0 10","function init(Survey, $) {\n  $ = $ || window.$;\n  if (!$.fn.bootstrapDP && !!$.fn.datepicker && !!$.fn.datepicker.noConflict) {\n    $.fn.bootstrapDP = $.fn.datepicker.noConflict();\n    if (!$.fn.datepicker) {\n      $.fn.datepicker = $.fn.bootstrapDP;\n    }\n  }\n  var widget = {\n    name: \"datepicker\",\n    title: \"Date picker\",\n    iconName: \"icon-datepicker\",\n    widgetIsLoaded: function() {\n      return !!$ && !!$.fn.datepicker && !$.fn.datepicker.noConflict;\n    },\n    isFit: function(question) {\n      return question.getType() === \"datepicker\";\n    },\n    htmlTemplate: \"<input class='form-control widget-datepicker' type='text'>\",\n    activatedByChanged: function(activatedBy) {\n      Survey.JsonObject.metaData.addClass(\n        \"datepicker\",\n        [\n          { name: \"inputType\", visible: false },\n          { name: \"inputFormat\", visible: false },\n          { name: \"inputMask\", visible: false }\n        ],\n        null,\n        \"text\"\n      );\n      Survey.JsonObject.metaData.addProperty(\"datepicker\", {\n        name: \"dateFormat\"\n      });\n      Survey.JsonObject.metaData.addProperty(\"datepicker\", {\n        name: \"config\",\n        default: null\n      });\n    },\n    afterRender: function(question, el) {\n      var $el = $(el).is(\".widget-datepicker\")\n        ? $(el)\n        : $(el).find(\".widget-datepicker\");\n      $el.addClass(question.css.text.root);\n      var isSelecting = false;\n      var config = $.extend(true, {}, question.config || {});\n      if (!!question.placeHolder) {\n        $el.attr(\"placeholder\", question.placeHolder);\n      }\n      if (config.dateFormat === undefined) {\n        config.dateFormat = !!question.dateFormat\n          ? question.dateFormat\n          : undefined;\n      }\n      if (config.option === undefined) {\n        config.option = {\n          minDate: null,\n          maxDate: null\n        };\n      }\n      if (config.onSelect === undefined) {\n        config.onSelect = function(dateText) {\n          isSelecting = true;\n          question.value = dateText;\n          isSelecting = false;\n          this.fixFocusIE = true;\n        };\n      }\n      config.fixFocusIE = false;\n      config.onClose = function(dateText, inst) {\n        this.fixFocusIE = true;\n      };\n      config.beforeShow = function(input, inst) {\n        var result = !!navigator.userAgent.match(/Trident\\/7\\./)\n          ? !this.fixFocusIE\n          : true;\n        this.fixFocusIE = false;\n        return result;\n      };\n      var pickerWidget = $el.datepicker(config);\n\n      $el.keyup(function(e) {\n        if (e.keyCode == 8 || e.keyCode == 46) {\n          $.datepicker._clearDate(this);\n        }\n      });\n\n      question.readOnlyChangedCallback = function() {\n        $el.datepicker(\"option\", \"disabled\", question.isReadOnly);\n      };\n      function updateDate() {\n        if (question.value) {\n          pickerWidget.datepicker(\"setDate\", question.value);\n        } else {\n          pickerWidget.datepicker(\"setDate\", null);\n        }\n      }\n      question.registerFunctionOnPropertyValueChanged(\"dateFormat\", function() {\n        question.dateFormat &&\n          pickerWidget.datepicker(\"option\", \"dateFormat\", question.dateFormat);\n        updateDate();\n      });\n      question.valueChangedCallback = function() {\n        if (!isSelecting) {\n          updateDate();\n          $el.blur();\n        }\n      };\n      question.valueChangedCallback();\n    },\n    willUnmount: function(question, el) {\n      var $el = $(el).is(\".widget-datepicker\")\n        ? $(el)\n        : $(el).find(\".widget-datepicker\");\n      $el.datepicker(\"destroy\");\n    },\n    pdfQuestionType: \"text\"\n  };\n\n  Survey.matrixDropdownColumnTypes.datepicker = { properties: [\"placeHolder\"] };\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey, window.$);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/jquery-ui-datepicker.js\n// module id = 5\n// module chunks = 0 9","import noUiSlider from \"nouislider\";\n\nfunction init(Survey) {\n  var widget = {\n    name: \"nouislider\",\n    title: \"noUiSlider\",\n    iconName: \"icon-nouislider\",\n    widgetIsLoaded: function () {\n      return typeof noUiSlider != \"undefined\";\n    },\n    isFit: function (question) {\n      return question.getType() === \"nouislider\";\n    },\n    htmlTemplate:\n      \"<div><div></div></div><style>.noUi-origin { width: 0; }</style>\",\n    activatedByChanged: function (activatedBy) {\n      Survey.JsonObject.metaData.addClass(\"nouislider\", [], null, \"empty\");\n      Survey.JsonObject.metaData.addProperties(\"nouislider\", [\n        {\n          name: \"step:number\",\n          default: 1,\n        },\n        {\n          name: \"rangeMin:number\",\n          default: 0,\n        },\n        {\n          name: \"rangeMax:number\",\n          default: 100,\n        },\n        {\n          name: \"pipsMode\",\n          default: \"positions\",\n        },\n        {\n          name: \"pipsValues:itemvalues\",\n          default: [0, 25, 50, 75, 100],\n        },\n        {\n          name: \"pipsText:itemvalues\",\n          default: [0, 25, 50, 75, 100],\n        },\n        {\n          name: \"pipsDensity:number\",\n          default: 5,\n        },\n        {\n          name: \"orientation:string\",\n          default: \"horizontal\",\n        },\n        {\n          name: \"direction:string\",\n          default: \"ltr\",\n        },\n        {\n          name: \"tooltips:boolean\",\n          default: true,\n        },\n      ]);\n    },\n    afterRender: function (question, el) {\n      el.style.paddingBottom = \"19px\";\n      el.style.paddingLeft = \"20px\";\n      el.style.paddingRight = \"20px\";\n      el.style.paddingTop = \"44px\";\n      el = el.children[0];\n      el.style.marginBottom = \"60px\";\n      if (question.orientation === \"vertical\") {\n        el.style.height = \"250px\";\n      }\n      var slider = noUiSlider.create(el, {\n        start: question.value || (question.rangeMin + question.rangeMax) / 2,\n        connect: [true, false],\n        step: question.step,\n        tooltips: question.tooltips,\n        pips: {\n          mode: question.pipsMode || \"positions\",\n          values: question.pipsValues.map(function (pVal) {\n            var pipValue = pVal;\n            if (pVal.value !== undefined) {\n              pipValue = pVal.value;\n            }\n            return parseInt(pipValue);\n          }),\n          density: question.pipsDensity || 5,\n          format: {\n            to: function (pVal) {\n              var pipText = pVal;\n              question.pipsText.map(function (el) {\n                if (el.text !== undefined && pVal === el.value) {\n                  pipText = el.text;\n                }\n              });\n              return pipText;\n            },\n          },\n        },\n        range: {\n          min: question.rangeMin,\n          max: question.rangeMax,\n        },\n        orientation: question.orientation,\n        direction: question.direction,\n      });\n      slider.on(\"change\", function() {\n        question.value = Number(slider.get());\n      });\n      var updateValueHandler = function () {\n        slider.set(question.value);\n      };\n      if (question.isReadOnly) {\n        el.setAttribute(\"disabled\", true);\n      }\n      updateValueHandler();\n      question.noUiSlider = slider;\n      question.valueChangedCallback = updateValueHandler;\n      question.readOnlyChangedCallback = function () {\n        if (question.isReadOnly) {\n          el.setAttribute(\"disabled\", true);\n        } else {\n          el.removeAttribute(\"disabled\");\n        }\n      };\n    },\n    willUnmount: function (question, el) {\n      if (!!question.noUiSlider) {\n        question.noUiSlider.destroy();\n        question.noUiSlider = null;\n      }\n      question.readOnlyChangedCallback = null;\n    },\n    pdfRender: function (_, options) {\n      if (options.question.getType() === \"nouislider\") {\n        var point = options.module.SurveyHelper.createPoint(\n          options.module.SurveyHelper.mergeRects.apply(null, options.bricks)\n        );\n        point.xLeft += options.controller.unitWidth;\n        point.yTop +=\n          options.controller.unitHeight *\n          options.module.FlatQuestion.CONTENT_GAP_VERT_SCALE;\n        var rect = options.module.SurveyHelper.createTextFieldRect(\n          point,\n          options.controller\n        );\n        var textboxBrick = new options.module.TextFieldBrick(\n          options.question,\n          options.controller,\n          rect,\n          true,\n          options.question.id,\n          options.question.value || options.question.defaultValue || \"\",\n          \"\",\n          options.question.isReadOnly,\n          false,\n          \"text\"\n        );\n        options.bricks.push(textboxBrick);\n      }\n    },\n  };\n\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/nouislider.js\n// module id = 6\n// module chunks = 0 3","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"noUiSlider\",\"commonjs2\":\"nouislider\",\"commonjs\":\"nouislider\",\"amd\":\"nouislider\"}\n// module id = 7\n// module chunks = 0 3","function init(Survey, $) {\n  $ = $ || window.$;\n  var widget = {\n    name: \"tagbox\",\n    title: \"Tag box\",\n    iconName: \"icon-tagbox\",\n    widgetIsLoaded: function () {\n      return typeof $ == \"function\" && !!$.fn.select2;\n    },\n    defaultJSON: {\n      choices: [\"Item 1\", \"Item 2\", \"Item 3\"],\n    },\n    htmlTemplate:\n      \"<div><select multiple='multiple' style='width: 100%;'></select><textarea></textarea></div>\",\n    isFit: function (question) {\n      return question.getType() === \"tagbox\";\n    },\n    activatedByChanged: function (activatedBy) {\n      Survey.JsonObject.metaData.addClass(\n        \"tagbox\",\n        [\n          { name: \"hasOther:boolean\", visible: false },\n          { name: \"hasSelectAll:boolean\", visible: false },\n          { name: \"hasNone:boolean\", visible: false },\n          { name: \"otherText\", visible: false },\n          { name: \"selectAllText\", visible: false },\n          { name: \"noneText\", visible: false },\n        ],\n        null,\n        \"checkbox\"\n      );\n      Survey.JsonObject.metaData.addProperty(\"tagbox\", {\n        name: \"select2Config\",\n        default: null,\n      });\n      Survey.JsonObject.metaData.addProperty(\"tagbox\", {\n        name: \"placeholder\",\n        default: \"\",\n      });\n      Survey.matrixDropdownColumnTypes.tagbox = {\n        properties: [\n          \"choices\",\n          \"choicesOrder\",\n          \"choicesByUrl\",\n          \"optionsCaption\",\n          \"otherText\",\n          \"choicesVisibleIf\",\n        ],\n      };\n    },\n    fixStyles: function (el) {\n      el.parentElement.querySelector(\".select2-search__field\").style.border =\n        \"none\";\n    },\n    afterRender: function (question, el) {\n      var self = this;\n      var select2Config = question.select2Config;\n      var settings =\n        select2Config && typeof select2Config == \"string\"\n          ? JSON.parse(select2Config)\n          : select2Config;\n      var placeholder = question.placeholder;\n      var $el = $(el).is(\"select\") ? $(el) : $(el).find(\"select\");\n\n      self.willUnmount(question, el);\n\n      $el.select2({\n        tags: \"true\",\n        disabled: question.isReadOnly,\n        theme: \"classic\",\n      });\n\n      var $otherElement = $(el).find(\"textarea\");\n      if (\n        !!question.survey &&\n        !!question.survey.css &&\n        !!question.survey.css.checkbox\n      ) {\n        $otherElement.addClass(question.survey.css.checkbox.other);\n      }\n      $otherElement.bind(\"input propertychange\", function () {\n        question.comment = $otherElement.val();\n      });\n      var updateComment = function () {\n        $otherElement.val(question.comment);\n        if (question.isOtherSelected) {\n          $otherElement.show();\n        } else {\n          $otherElement.hide();\n        }\n      };\n\n      self.fixStyles(el);\n      var question;\n      var updateValueHandler = function () {\n        if (question.hasSelectAll && question.isAllSelected) {\n          $el\n            .val([question.selectAllItemValue.value].concat(question.value))\n            .trigger(\"change\");\n        } else {\n          $el.val(question.value).trigger(\"change\");\n        }\n        self.fixStyles(el);\n        updateComment();\n      };\n      var updateChoices = function () {\n        $el.select2().empty();\n\n        if (settings) {\n          if (placeholder) settings.placeholder = placeholder;\n\n          if (settings.ajax) {\n            $el.select2(settings);\n          } else {\n            settings.data = question.visibleChoices.map(function (choice) {\n              return {\n                id: choice.value,\n                text: choice.text,\n              };\n            });\n            $el.select2(settings);\n          }\n        } else {\n          $el.select2({\n            placeholder: placeholder,\n            data: question.visibleChoices.map(function (choice) {\n              return {\n                id: choice.value,\n                text: choice.text,\n              };\n            }),\n          });\n        }\n        updateValueHandler();\n      };\n      var isAllItemSelected = function (value) {\n        return (\n          question.hasSelectAll && value === question.selectAllItemValue.value\n        );\n      };\n      question._propertyValueChangedFnSelect2 = function () {\n        updateChoices();\n      };\n\n      $otherElement.prop(\"disabled\", question.isReadOnly);\n      question.readOnlyChangedCallback = function () {\n        $el.prop(\"disabled\", question.isReadOnly);\n        $otherElement.prop(\"disabled\", question.isReadOnly);\n      };\n      question.registerFunctionOnPropertyValueChanged(\n        \"visibleChoices\",\n        question._propertyValueChangedFnSelect2\n      );\n      question.valueChangedCallback = updateValueHandler;\n      $el.on(\"select2:select\", function (e) {\n        if (isAllItemSelected(e.params.data.id)) {\n          question.selectAll();\n        } else {\n          question.value = (question.value || []).concat(e.params.data.id);\n        }\n        updateComment();\n      });\n      $el.on(\"select2:unselect\", function (e) {\n        var index = (question.value || []).indexOf(e.params.data.id);\n        if (isAllItemSelected(e.params.data.id)) {\n          question.clearValue();\n        } else if (index !== -1) {\n          var val = [].concat(question.value);\n          val.splice(index, 1);\n          question.value = val;\n        }\n        updateComment();\n      });\n      updateChoices();\n    },\n    willUnmount: function (question, el) {\n      if (!question._propertyValueChangedFnSelect2) return;\n\n      $(el).find(\"select\").off(\"select2:select\").select2(\"destroy\");\n      question.readOnlyChangedCallback = null;\n      question.valueChangedCallback = null;\n      question.unRegisterFunctionOnPropertyValueChanged(\n        \"visibleChoices\",\n        question._propertyValueChangedFnSelect2\n      );\n      question._propertyValueChangedFnSelect2 = undefined;\n    },\n    pdfQuestionType: \"checkbox\",\n  };\n\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey, window.$);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/select2-tagbox.js\n// module id = 8\n// module chunks = 0 7","import Sortable from \"sortablejs\";\n\nfunction init(Survey) {\n  var widget = {\n    name: \"sortablelist\",\n    title: \"Sortable list\",\n    iconName: \"icon-sortablejs\",\n    widgetIsLoaded: function () {\n      return typeof Sortable != \"undefined\";\n    },\n    defaultJSON: { choices: [\"Item 1\", \"Item 2\", \"Item 3\"] },\n    rootStyle: \"width:100%:\",\n    areaStyle:\n      \"border: 1px solid #1ab394; width:100%; min-height:50px; margin-top:10px;\",\n    itemStyle: \"background-color:#1ab394;color:#fff;margin:5px;padding:10px;\",\n    isFit: function (question) {\n      return question.getType() === \"sortablelist\";\n    },\n    htmlTemplate: \"<div></div>\",\n    activatedByChanged: function (activatedBy) {\n      Survey.JsonObject.metaData.addClass(\n        \"sortablelist\",\n        [\n          { name: \"hasOther\", visible: false },\n          { name: \"storeOthersAsComment\", visible: false },\n          { name: \"hasNone\", visible: false },\n          { name: \"renderAs\", visible: false }\n        ],\n        null,\n        \"checkbox\"\n      );\n      Survey.JsonObject.metaData.addProperty(\"sortablelist\", {\n        name: \"emptyText\",\n        default: \"Move items here.\"\n      });\n      Survey.JsonObject.metaData.addProperty(\"sortablelist\", {\n        name: \"useDefaultTheme\",\n        default: true\n      });\n      Survey.JsonObject.metaData.addProperty(\"sortablelist\", {\n        name: \"maxAnswersCount:number\",\n        default: -1\n      });\n\n    },\n    afterRender: function (question, el) {\n      var self = this;\n\n      if (!question.useDefaultTheme) {\n        self.rootStyle = \"\";\n        self.itemStyle = \"\";\n        self.areaStyle = \"\";\n      }\n      el.style.cssText = self.rootStyle;\n      el.className = \"sjs-sortablejs-root\";\n      var source, result;\n      var resultEl = document.createElement(\"div\");\n      var emptyEl = document.createElement(\"span\");\n      var sourceEl = document.createElement(\"div\");\n\n      resultEl.style.cssText = self.areaStyle;\n      resultEl.style.boxSizing = \"border-box\";      \n      resultEl.className = \"sjs-sortablejs-result\";\n\n      emptyEl.innerHTML = question.emptyText;\n      resultEl.appendChild(emptyEl);\n\n      sourceEl.style.cssText = self.areaStyle;\n      sourceEl.style.boxSizing = \"border-box\";\n      sourceEl.className = \"sjs-sortablejs-source\";\n      el.appendChild(resultEl);\n      el.appendChild(sourceEl);\n      var hasValueInResults = function (val) {\n        var res = question.value;\n        if (!Array.isArray(res)) return false;\n        for (var i = 0; i < res.length; i++) {\n          if (res[i] == val) return true;\n        }\n        return false;\n      };\n      var addChoiceToWidget = function (choice, inResults) {\n        var srcEl = inResults ? resultEl : sourceEl;\n        var newEl = document.createElement(\"div\");\n        newEl.innerHTML =\n          \"<div class='sjs-sortablejs-item' style='\" +\n          self.itemStyle +\n          \"'>\" +\n          choice.text +\n          \"</div>\";\n        newEl.dataset[\"value\"] = choice.value;\n        srcEl.appendChild(newEl);\n      };\n      var getChoicesNotInResults = function () {\n        var res = [];\n        question.visibleChoices.forEach(function (choice) {\n          if (!hasValueInResults(choice.value)) {\n            res.push(choice);\n          }\n        });\n        return res;\n      };\n      var getChoicesInResults = function () {\n        var res = [];\n        var val = question.value;\n        if (!Array.isArray(val)) return res;\n        for (var i = 0; i < val.length; i++) {\n          var item = Survey.ItemValue.getItemByValue(\n            question.visibleChoices,\n            val[i]\n          );\n          if (!!item) {\n            res.push(item);\n          }\n        }\n        return res;\n      };\n      var isUpdatingQuestionValue = false;\n      var updateValueHandler = function () {\n        if (isUpdatingQuestionValue) return;\n        resultEl.innerHTML = \"\";\n        resultEl.appendChild(emptyEl);\n        sourceEl.innerHTML = \"\";\n        var notInResults = getChoicesNotInResults();\n        var inResults = getChoicesInResults();\n        emptyEl.style.display = inResults.length > 0 ? \"none\" : \"\";\n        inResults.forEach(function (choice) {\n          addChoiceToWidget(choice, true);\n        });\n        notInResults.forEach(function (choice) {\n          addChoiceToWidget(choice, false);\n        });\n      };\n      result = question.resultEl = Sortable.create(resultEl, {\n        animation: 150,\n        disabled: question.isReadOnly,\n        group: {\n          name: question.name,\n          put: function (to) {\n            return question.maxAnswersCount < 0 || to.el.children.length <= question.maxAnswersCount;\n          },\n        },\n        onSort: function (evt) {\n          var result = [];\n          if (resultEl.children.length === 1) {\n            emptyEl.style.display = \"\";\n          } else {\n            emptyEl.style.display = \"none\";\n            for (var i = 0; i < resultEl.children.length; i++) {\n              if (typeof resultEl.children[i].dataset.value === \"undefined\")\n                continue;\n              result.push(resultEl.children[i].dataset.value);\n            }\n          }\n          isUpdatingQuestionValue = true;\n          question.value = result;\n          isUpdatingQuestionValue = false;\n        }\n      });\n      source = question.sourceEl = Sortable.create(sourceEl, {\n        animation: 150,\n        disabled: question.isReadOnly,\n        group: question.name\n      });\n      question.valueChangedCallback = updateValueHandler;\n      question.readOnlyChangedCallback = function () {\n        if (question.isReadOnly) {\n          result.options.disabled = true;\n          source.options.disabled = true;\n        } else {\n          result.options.disabled = false;\n          source.options.disabled = false;\n        }\n      };\n      updateValueHandler();\n    },\n    willUnmount: function (question, el) {\n      question.resultEl.destroy();\n      question.sourceEl.destroy();\n      question.readOnlyChangedCallback = null;\n    },\n    pdfQuestionType: \"checkbox\"\n  };\n\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sortablejs.js\n// module id = 9\n// module chunks = 0 2","module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"Sortable\",\"commonjs2\":\"sortablejs\",\"commonjs\":\"sortablejs\",\"amd\":\"sortablejs\"}\n// module id = 10\n// module chunks = 0 2","function init(Survey) {\n  var widget = {\n    name: \"editor\",\n    title: \"Editor\",\n    iconName: \"icon-editor\",\n    widgetIsLoaded: function () {\n      return typeof CKEDITOR != \"undefined\";\n    },\n    isFit: function (question) {\n      return question.getType() === \"editor\";\n    },\n    htmlTemplate:\n      \"<textarea rows='10' cols='80' style: {width:'100%'}></textarea>\",\n    activatedByChanged: function (activatedBy) {\n      Survey.JsonObject.metaData.addClass(\"editor\", [], null, \"empty\");\n      Survey.JsonObject.metaData.addProperty(\"editor\", {\n        name: \"height\",\n        default: 300\n      });\n    },\n    afterRender: function (question, el) {\n      var name = question.name;\n      CKEDITOR.editorConfig = function (config) {\n        config.language = \"es\";\n        config.height = question.height;\n        config.toolbarCanCollapse = true;\n      };\n      el.name = name;\n\n      if (CKEDITOR.instances[name]) {\n        CKEDITOR.instances[name].removeAllListeners();\n        CKEDITOR.remove(CKEDITOR.instances[name]);\n      }\n\n      var editor = CKEDITOR.replace(el);\n      CKEDITOR.instances[name].config.readOnly = question.isReadOnly;\n\n      var isValueChanging = false;\n      var updateValueHandler = function () {\n        if (isValueChanging || typeof question.value === \"undefined\") return;\n        editor.setData(question.value);\n      };\n      editor.on(\"change\", function () {\n        isValueChanging = true;\n        question.value = editor.getData();\n        isValueChanging = false;\n      });\n\n      question.valueChangedCallback = updateValueHandler;\n      question.readOnlyChangedCallback = function () {\n        if (question.isReadOnly) {\n          editor.setReadOnly(true);\n        } else {\n          editor.setReadOnly(false);\n        }\n      };\n      updateValueHandler();\n    },\n    willUnmount: function (question, el) {\n      question.readOnlyChangedCallback = null;\n      CKEDITOR.instances[question.name].destroy(false);\n    },\n    pdfRender: function(_, options) {\n      if (options.question.getType() === \"editor\") {\n        var point = options.module.SurveyHelper.createPoint(\n          options.module.SurveyHelper.mergeRects.apply(null,\n            options.bricks));\n        point.xLeft += options.controller.unitWidth;\n        point.yTop += options.controller.unitHeight *\n          options.module.FlatQuestion.CONTENT_GAP_VERT_SCALE;\n        var html = options.module.SurveyHelper.createDivBlock(\n          options.question.value, options.controller);\n        return new Promise(function(resolve) {\n          options.module.SurveyHelper.createHTMLFlat(point,\n            options.question, options.controller, html).then(\n              function (htmlFlat) {\n                var htmlBrick = options.module.SurveyHelper.\n                  splitHtmlRect(options.controller, htmlFlat);\n                options.bricks.push(htmlBrick);\n                resolve();\n              });\n        });\n      }\n    }\n  };\n\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ck-editor.js\n// module id = 11\n// module chunks = 0 14","function init(Survey, $) {\n  $ = $ || window.$;\n  var widget = {\n    name: \"autocomplete\",\n    widgetIsLoaded: function () {\n      return typeof $ == \"function\" && !!$.fn.easyAutocomplete;\n    },\n    isFit: function (question) {\n      return question.getType() === \"text\";\n    },\n    isDefaultRender: true,\n    activatedByChanged: function (activatedBy) {\n      if (\n        Survey.JsonObject.metaData.findProperty(\"text\", \"choices\") !== null ||\n        Survey.JsonObject.metaData.findProperty(\"text\", \"choicesByUrl\") !== null\n      ) {\n        return;\n      }\n      Survey.JsonObject.metaData.addProperty(\"text\", \"choices:itemvalues\");\n      Survey.JsonObject.metaData.addProperty(\"text\", {\n        name: \"choicesByUrl:restfull\",\n        className: \"ChoicesRestfull\",\n      });\n      Array.prototype.push.apply(\n        Survey.matrixDropdownColumnTypes.text.properties,\n        [\"choices\", \"choicesOrder\", \"choicesByUrl\", \"otherText\"]\n      );\n    },\n    afterRender: function (question, el) {\n      var $el = $(el).is(\"input\") ? $(el) : $(el).find(\"input\");\n\n      var getCssSelectorFromClassesString = function (classesString) {\n        if (!classesString) return \"\";\n        var cssSelector = classesString.replace(/(^\\s*)|(\\s+)/g, \".\"); // replace whitespaces with '.'\n        return cssSelector;\n      };\n\n      var questionRootClasses = getCssSelectorFromClassesString(\n        question.cssRoot\n      );\n      if (!!questionRootClasses) {\n        $el.parents(questionRootClasses)[0].style.overflow = \"visible\";\n      }\n      var options = {\n        data: (question.choices || []).map(function (item) {\n          return item.text;\n        }),\n        adjustWidth: false,\n        list: {\n          sort: {\n            enabled: true,\n          },\n          match: {\n            enabled: true,\n          },\n        },\n        placeholder: question.placeholder,\n      };\n      if (!!question.choicesByUrl) {\n        options.url = function (phrase) {\n          return question.choicesByUrl.url;\n        };\n        options.getValue = question.choicesByUrl.valueName;\n        // options.ajaxSettings = {\n        //   dataType: \"jsonp\"\n        // };\n      }\n      $el.easyAutocomplete(options);\n\n      $el[0].oninput = function () {\n        question.customWidgetData.isNeedRender = true;\n      };\n      var updateHandler = function () {\n        $el[0].value =\n          typeof question.value === \"undefined\" ? \"\" : question.value;\n      };\n      question.valueChangedCallback = updateHandler;\n      updateHandler();\n    },\n    willUnmount: function (question, el) {\n      // var $el = $(el).find(\"input\");\n      // $el.autocomplete(\"destroy\");\n    },\n  };\n\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"type\");\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey, window.$);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/easy-autocomplete.js\n// module id = 12\n// module chunks = 0 13","function init(Survey) {\n  var widget = {\n    settings: {\n      supportedTypes: [\"radiogroup\", \"checkbox\", \"boolean\"],\n      radiogroup: {\n        rootClass: \"pretty p-default p-round\",\n        inputType: \"radio\",\n        states: [{ stateClass: \"state p-success\", addOn: \"\" }]\n      },\n      checkbox: {\n        rootClass: \"pretty p-default\",\n        inputType: \"checkbox\",\n        states: [{ stateClass: \"state p-success\", addOn: \"\" }]\n      },\n      boolean: {\n        rootClass: \"pretty p-icon p-default p-has-indeterminate\",\n        inputType: \"checkbox\",\n        states: [\n          { stateClass: \"state p-success\", addOn: \"\" },\n          {\n            stateClass: \"state p-success p-is-indeterminate\",\n            iconClass: \"icon mdi mdi-minus\",\n            addOn: \"\"\n          }\n        ]\n      }\n    },\n    name: \"pretty-checkbox\",\n    activatedBy: \"property\",\n    widgetIsLoaded: function() {\n      return true;\n    },\n    htmlTemplate: \"<fieldset></fieldset>\",\n    isFit: function(question) {\n      var isFitByType =\n        widget.settings.supportedTypes.indexOf(question.getType()) !== -1;\n\n      if (widget.activatedBy === \"property\") {\n        return question[\"renderAs\"] === \"prettycheckbox\" && isFitByType;\n      } else if (widget.activatedBy === \"type\") {\n        return isFitByType;\n      }\n\n      return false;\n    },\n    activatedByChanged: function(value) {\n      if (this.widgetIsLoaded()) {\n        widget.activatedBy = value;\n        widget.settings.supportedTypes.forEach(function(supportedType) {\n          Survey.JsonObject.metaData.removeProperty(supportedType, \"renderAs\");\n\n          if (value === \"property\") {\n            Survey.JsonObject.metaData.addProperty(supportedType, {\n              name: \"renderAs\",\n              default: \"standard\",\n              choices: [\"standard\", \"prettycheckbox\"]\n            });\n          }\n        });\n      }\n    },\n    isDefaultRender: false,\n    afterRender: function(question, element) {\n      var itemInputs = {};\n      var questionType = question.getType();\n      var options = this.settings[questionType];\n      var checkboxType = questionType === \"checkbox\";\n      var radiogroupType = questionType === \"radiogroup\";\n      var booleanType = questionType === \"boolean\";\n\n      var inChangeHandler = false;\n      var changeHandler = function(event) {\n        inChangeHandler = true;\n        try {\n          var target = arguments[0].target;\n          var targetValue = target.value;\n          var targetChecked = target.checked;\n\n          if (checkboxType) {\n            var questionValue = question.createValueCopy() || [];\n            var valueIndex = questionValue.indexOf(targetValue);\n            if (targetChecked) {\n              if (valueIndex === -1) {\n                questionValue.push(targetValue);\n              }\n            } else {\n              if (valueIndex !== -1) {\n                questionValue.splice(valueIndex, 1);\n              }\n            }\n\n            question.value = questionValue;\n          } else if (radiogroupType) {\n            question.value = targetValue;\n          } else {\n            question.value = targetChecked;\n          }\n        } finally {\n          inChangeHandler = false;\n        }\n      };\n\n      var itemWidth =\n        question.colCount > 0 ? 100 / question.colCount + \"%\" : \"\";\n\n      var choices = booleanType\n        ? [{ locText: question.locTitle, value: !!question.value }]\n        : question.visibleChoices;\n      choices.forEach(function(choiceItem, index) {\n        var input = document.createElement(\"input\");\n        input.type = options.inputType;\n        input.name = question.name + (checkboxType ? \"\" + index : \"\");\n        input.onchange = changeHandler;\n        input.value = choiceItem.value;\n\n        if (booleanType && question.value === null) {\n          input.indeterminate = question.defaultValue === \"indeterminate\";\n        }\n\n        var controlRoot = document.createElement(\"div\");\n        controlRoot.className = options.rootClass;\n        controlRoot.appendChild(input);\n\n        options.states.forEach(function(state) {\n          var stateRoot = document.createElement(\"div\");\n          stateRoot.className = state.stateClass;\n          if (!!state.iconClass) {\n            var icon = document.createElement(\"i\");\n            icon.className = state.iconClass;\n            stateRoot.appendChild(icon);\n          }\n\n          var label = document.createElement(\"label\");\n          if (choiceItem.locText.hasHtml) {\n            label.innerHTML = choiceItem.locText.html;\n          } else {\n            label.textContent = choiceItem.locText.renderedText;\n          }\n          stateRoot.appendChild(label);\n\n          controlRoot.appendChild(stateRoot);\n          if (!!state.addOn) {\n            stateRoot.insertAdjacentHTML(\"afterbegin\", state.addOn);\n          }\n        });\n\n        var itemRoot = document.createElement(\"div\");\n        itemRoot.className = \"sv_cw_pretty_checkbox_\" + questionType;\n        itemRoot.style.display = \"inline-block\";\n        itemRoot.style.width = itemWidth;\n        itemRoot.appendChild(controlRoot);\n\n        element.appendChild(itemRoot);\n\n        itemInputs[choiceItem.value] = input;\n      });\n\n      var updateValueHandler = function(newValue) {\n        if (!inChangeHandler) {\n          var checkedItems = newValue || [];\n          if (radiogroupType || booleanType) {\n            checkedItems = [newValue && newValue.toString()];\n          }\n\n          Object.values(itemInputs).forEach(function(inputItem) {\n            if (checkedItems.indexOf(inputItem.value) !== -1) {\n              inputItem.setAttribute(\"checked\", undefined);\n            } else {\n              inputItem.removeAttribute(\"checked\");\n            }\n          });\n        }\n      };\n      var readOnlyHandler = function() {\n        Object.values(itemInputs).forEach(function(inputItem) {\n          if (question.isReadOnly) {\n            inputItem.setAttribute(\"disabled\", true);\n          } else {\n            inputItem.removeAttribute(\"disabled\");\n          }\n        });\n      };\n\n      question.valueChangedCallback = updateValueHandler;\n      question.readOnlyChangedCallback = readOnlyHandler;\n      updateValueHandler(question.value);\n      readOnlyHandler();\n    },\n    willUnmount: function(question, el) {\n      question.valueChangedCallback = undefined;\n      question.readOnlyChangedCallback = undefined;\n    }\n  };\n\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"property\");\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pretty-checkbox.js\n// module id = 13\n// module chunks = 0 8","var Slider = require(\"bootstrap-slider\");\n\nfunction init(Survey) {\n  var widget = {\n    name: \"bootstrapslider\",\n    title: \"Bootstrap Slider\",\n    iconName: \"icon-bootstrap-slider\",\n    widgetIsLoaded: function() {\n      return typeof Slider !== \"undefined\";\n    },\n    isFit: function(question) {\n      return question.getType() === \"bootstrapslider\";\n    },\n    htmlTemplate: \"<div></div>\",\n    activatedByChanged: function(activatedBy) {\n      Survey.JsonObject.metaData.addClass(\"bootstrapslider\", [], null, \"empty\");\n      Survey.JsonObject.metaData.addProperties(\"bootstrapslider\", [\n        {\n          name: \"step:number\",\n          default: 1\n        },\n        {\n          name: \"rangeMin:number\",\n          default: 0\n        },\n        {\n          name: \"rangeMax:number\",\n          default: 100\n        }\n      ]);\n      Survey.JsonObject.metaData.addProperty(\"bootstrapslider\", {\n        name: \"config\",\n        default: null\n      });\n    },\n    afterRender: function(question, el) {\n      el.style.paddingTop = '20px';\n      el.style.paddingBottom = '17px';\n      el.style.paddingLeft = '10px';\n      var inputEl = document.createElement(\"input\");\n      inputEl.id = question.id;\n      inputEl.type = \"text\";\n      inputEl.setAttribute(\"data-slider-id\", question.name + \"_\" + question.id);\n      inputEl.setAttribute(\"data-slider-min\", question.rangeMin);\n      inputEl.setAttribute(\"data-slider-max\", question.rangeMax);\n      inputEl.setAttribute(\"data-slider-step\", question.step);\n      inputEl.setAttribute(\n        \"data-slider-value\",\n        question.value || question.rangeMin\n      );\n      el.appendChild(inputEl);\n\n      var config = question.config || {};\n\n      if (config.id === undefined) {\n        config.id = question.name + \"_\" + question.id;\n      }\n\n      if (config.min === undefined) {\n        config.min = question.rangeMin;\n      }\n\n      if (config.max === undefined) {\n        config.max = question.rangeMax;\n      }\n\n      if (config.step === undefined) {\n        config.step = question.step;\n      }\n\n      if (config.enabled === undefined) {\n        config.enabled = !question.isReadOnly;\n      }\n\n      if (config.value === undefined) {\n        config.value = question.value || question.rangeMin;\n      }\n\n      var slider = new Slider(inputEl, config);\n\n      slider.on(\"change\", function(valueObj) {\n        question.value = slider.getValue();\n      });\n      var updateValueHandler = function() {\n        slider.setValue(question.value || question.rangeMin);\n      };\n      question.readOnlyChangedCallback = function() {\n        if (question.isReadOnly) {\n          slider.disable();\n        } else {\n          slider.enable();\n        }\n      };\n      question.bootstrapSlider = slider;\n      question.valueChangedCallback = updateValueHandler;\n    },\n    willUnmount: function(question, el) {\n      question.bootstrapSlider && question.bootstrapSlider.destroy();\n      question.bootstrapSlider = null;\n      question.readOnlyChangedCallback = null;\n    },\n    pdfRender: function(_, options) {\n      if (options.question.getType() === \"bootstrapslider\") {\n        var point = options.module.SurveyHelper.createPoint(\n          options.module.SurveyHelper.mergeRects.apply(null,\n            options.bricks));\n        point.xLeft += options.controller.unitWidth;\n        point.yTop += options.controller.unitHeight *\n          options.module.FlatQuestion.CONTENT_GAP_VERT_SCALE;\n        var rect = options.module.SurveyHelper.\n          createTextFieldRect(point, options.controller);\n        var textboxBrick = new options.module.TextFieldBrick(\n          options.question,\n          options.controller, rect,\n          true, options.question.id,\n          (options.question.value ||\n            options.question.defaultValue ||\n            \"\").toString(), \"\",\n          options.question.isReadOnly, false, \"text\");\n        options.bricks.push(textboxBrick);\n      }\n    }\n  };\n\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/bootstrap-slider.js\n// module id = 14\n// module chunks = 0 5","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"Slider\",\"commonjs2\":\"bootstrap-slider\",\"commonjs\":\"bootstrap-slider\",\"amd\":\"bootstrap-slider\"}\n// module id = 15\n// module chunks = 0 5","import RecordRTC from \"recordrtc\";\n\nfunction init(Survey) {\n  var widget = {\n    name: \"microphone\",\n    title: \"Microphone\",\n    iconName: \"icon-microphone\",\n    widgetIsLoaded: function() {\n      return typeof RecordRTC != \"undefined\";\n    },\n    isFit: function(question) {\n      return question.getType() === \"microphone\";\n    },\n    htmlTemplate:\n      \"<div style='height: 39px'>\" +\n      \"<button type='button'  title='Record' style='vertical-align: top; margin-top: 3px' ><i class='fa fa-microphone' aria-hidden='true'></i></button>\" +\n      \"&nbsp;<button type='button' title='Save' style='vertical-align: top; margin-top: 3px'><i class='fa fa-cloud' aria-hidden='true' ></i></button>\" +\n      \"&nbsp;<audio style='\" +\n      \"vertical-align: top;\" +\n      \"margin-left: 10px;\" +\n      \"height:35px;\" +\n      \"-moz-box-shadow: 2px 2px 4px 0px #006773;\" +\n      \"-webkit-box-shadow:  2px 2px 4px 0px #006773;\" +\n      \"box-shadow: 2px 2px 4px 0px #006773;\" +\n      \"' \" +\n      \"controls='true' >\" +\n      \"</audio>\" +\n      \"</div>\",\n    activatedByChanged: function(activatedBy) {\n      Survey.JsonObject.metaData.addClass(\"microphone\", [], null, \"empty\");\n    },\n\n    afterRender: function(question, el) {\n      var rootWidget = this;\n      var buttonStartEl = el.getElementsByTagName(\"button\")[0];\n      var buttonStopEl = el.getElementsByTagName(\"button\")[1];\n      var audioEl = el.getElementsByTagName(\"audio\")[0];\n\n      //////////  RecordRTC logic\n\n      var successCallback = function(stream) {\n        var options = {\n          type: \"audio\",\n          mimeType: \"audio/webm\",\n          audioBitsPerSecond: 44100,\n          sampleRate: 44100,\n          bufferSize: 16384,\n          numberOfAudioChannels: 1\n        };\n        console.log(\"successCallback\");\n        question.survey.mystream = stream;\n        question.survey.recordRTC = RecordRTC(\n          question.survey.mystream,\n          options\n        );\n        if (typeof question.survey.recordRTC != \"undefined\") {\n          console.log(\"startRecording\");\n          question.survey.recordRTC.startRecording();\n        }\n      };\n\n      var errorCallback = function() {\n        alert(\"No microphone\");\n        question.survey.recordRTC = undefined;\n        question.survey.mystream = undefined;\n      };\n\n      var processAudio = function(audioVideoWebMURL) {\n        console.log(\"processAudio\");\n        var recordedBlob = question.survey.recordRTC.getBlob();\n\n        var fileReader = new FileReader();\n        fileReader.onload = function(event) {\n          var dataUri = event.target.result;\n          console.log(\"dataUri: \" + dataUri);\n          question.value = dataUri;\n          audioEl.src = dataUri;\n\n          console.log(\"cleaning\");\n          question.survey.recordRTC = undefined;\n          question.survey.mystream = undefined;\n        };\n        fileReader.readAsDataURL(recordedBlob);\n      };\n\n      var startRecording = function() {\n        // erase previous data\n        question.value = undefined;\n\n        // if recorder open on another question\t- try to stop recording\n        if (typeof question.survey.recordRTC != \"undefined\") {\n          question.survey.recordRTC.stopRecording(doNothingHandler);\n          if (typeof question.survey.mystream != \"undefined\") {\n            question.survey.mystream.getAudioTracks().forEach(function(track) {\n              track.stop();\n            });\n          }\n        }\n\n        var mediaConstraints = {\n          video: false,\n          audio: true\n        };\n\n        navigator.mediaDevices\n          .getUserMedia(mediaConstraints)\n          .then(successCallback.bind(this), errorCallback.bind(this));\n      };\n\n      var stopRecording = function() {\n        console.log(\"stopRecording\");\n        if (typeof question.survey.recordRTC != \"undefined\") {\n          question.survey.recordRTC.stopRecording(processAudio.bind(this));\n          if (typeof question.survey.mystream != \"undefined\") {\n            question.survey.mystream.getAudioTracks().forEach(function(track) {\n              track.stop();\n            });\n          }\n        }\n      };\n\n      //////////////  end RTC logic //////////////////\n\n      if (!question.isReadOnly) {\n        buttonStartEl.onclick = startRecording;\n      } else {\n        buttonStartEl.parentNode.removeChild(buttonStartEl);\n      }\n\n      if (!question.isReadOnly) {\n        buttonStopEl.onclick = stopRecording;\n      } else {\n        buttonStopEl.parentNode.removeChild(buttonStopEl);\n      }\n\n      audioEl.src = question.value;\n\n      var updateValueHandler = function() {};\n\n      var doNothingHandler = function() {};\n\n      question.valueChangedCallback = updateValueHandler;\n      updateValueHandler();\n    },\n    willUnmount: function(question, el) {\n      console.log(\"unmount microphone no record \");\n      if (typeof question.survey.recordRTC != \"undefined\") {\n        question.survey.recordRTC.stopRecording(doNothingHandler);\n        if (typeof question.survey.mystream != \"undefined\") {\n          question.survey.mystream.getAudioTracks().forEach(function(track) {\n            track.stop();\n          });\n        }\n        question.value = undefined;\n        question.survey.recordRTC = undefined;\n        question.survey.mystream = undefined;\n      }\n    }\n  };\n\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/microphone.js\n// module id = 16\n// module chunks = 0 1","'use strict';\r\n\r\n// Last time updated: 2020-02-26 1:11:47 PM UTC\r\n\r\n// ________________\r\n// RecordRTC v5.5.9\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\n// ____________\r\n// RecordRTC.js\r\n\r\n/**\r\n * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \r\n * @summary Record audio, video or screen inside the browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTC\r\n * @class\r\n * @example\r\n * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\r\n *     type: 'video', // audio or video or gif or canvas\r\n *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\r\n * });\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction RecordRTC(mediaStream, config) {\r\n    if (!mediaStream) {\r\n        throw 'First parameter is required.';\r\n    }\r\n\r\n    config = config || {\r\n        type: 'video'\r\n    };\r\n\r\n    config = new RecordRTCConfiguration(mediaStream, config);\r\n\r\n    // a reference to user's recordRTC object\r\n    var self = this;\r\n\r\n    function startRecording(config2) {\r\n        if (!config.disableLogs) {\r\n            console.log('RecordRTC version: ', self.version);\r\n        }\r\n\r\n        if (!!config2) {\r\n            // allow users to set options using startRecording method\r\n            // config2 is similar to main \"config\" object (second parameter over RecordRTC constructor)\r\n            config = new RecordRTCConfiguration(mediaStream, config2);\r\n        }\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('started recording ' + config.type + ' stream.');\r\n        }\r\n\r\n        if (mediaRecorder) {\r\n            mediaRecorder.clearRecordedData();\r\n            mediaRecorder.record();\r\n\r\n            setState('recording');\r\n\r\n            if (self.recordingDuration) {\r\n                handleRecordingDuration();\r\n            }\r\n            return self;\r\n        }\r\n\r\n        initRecorder(function() {\r\n            if (self.recordingDuration) {\r\n                handleRecordingDuration();\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    function initRecorder(initCallback) {\r\n        if (initCallback) {\r\n            config.initCallback = function() {\r\n                initCallback();\r\n                initCallback = config.initCallback = null; // recorder.initRecorder should be call-backed once.\r\n            };\r\n        }\r\n\r\n        var Recorder = new GetRecorderType(mediaStream, config);\r\n\r\n        mediaRecorder = new Recorder(mediaStream, config);\r\n        mediaRecorder.record();\r\n\r\n        setState('recording');\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\r\n        }\r\n    }\r\n\r\n    function stopRecording(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state === 'paused') {\r\n            self.resumeRecording();\r\n\r\n            setTimeout(function() {\r\n                stopRecording(callback);\r\n            }, 1);\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'recording' && !config.disableLogs) {\r\n            console.warn('Recording state should be: \"recording\", however current state is: ', self.state);\r\n        }\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Stopped recording ' + config.type + ' stream.');\r\n        }\r\n\r\n        if (config.type !== 'gif') {\r\n            mediaRecorder.stop(_callback);\r\n        } else {\r\n            mediaRecorder.stop();\r\n            _callback();\r\n        }\r\n\r\n        setState('stopped');\r\n\r\n        function _callback(__blob) {\r\n            if (!mediaRecorder) {\r\n                if (typeof callback.call === 'function') {\r\n                    callback.call(self, '');\r\n                } else {\r\n                    callback('');\r\n                }\r\n                return;\r\n            }\r\n\r\n            Object.keys(mediaRecorder).forEach(function(key) {\r\n                if (typeof mediaRecorder[key] === 'function') {\r\n                    return;\r\n                }\r\n\r\n                self[key] = mediaRecorder[key];\r\n            });\r\n\r\n            var blob = mediaRecorder.blob;\r\n\r\n            if (!blob) {\r\n                if (__blob) {\r\n                    mediaRecorder.blob = blob = __blob;\r\n                } else {\r\n                    throw 'Recording failed.';\r\n                }\r\n            }\r\n\r\n            if (blob && !config.disableLogs) {\r\n                console.log(blob.type, '->', bytesToSize(blob.size));\r\n            }\r\n\r\n            if (callback) {\r\n                var url;\r\n\r\n                try {\r\n                    url = URL.createObjectURL(blob);\r\n                } catch (e) {}\r\n\r\n                if (typeof callback.call === 'function') {\r\n                    callback.call(self, url);\r\n                } else {\r\n                    callback(url);\r\n                }\r\n            }\r\n\r\n            if (!config.autoWriteToDisk) {\r\n                return;\r\n            }\r\n\r\n            getDataURL(function(dataURL) {\r\n                var parameter = {};\r\n                parameter[config.type + 'Blob'] = dataURL;\r\n                DiskStorage.Store(parameter);\r\n            });\r\n        }\r\n    }\r\n\r\n    function pauseRecording() {\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'recording') {\r\n            if (!config.disableLogs) {\r\n                console.warn('Unable to pause the recording. Recording state: ', self.state);\r\n            }\r\n            return;\r\n        }\r\n\r\n        setState('paused');\r\n\r\n        mediaRecorder.pause();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Paused recording.');\r\n        }\r\n    }\r\n\r\n    function resumeRecording() {\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'paused') {\r\n            if (!config.disableLogs) {\r\n                console.warn('Unable to resume the recording. Recording state: ', self.state);\r\n            }\r\n            return;\r\n        }\r\n\r\n        setState('recording');\r\n\r\n        // not all libs have this method yet\r\n        mediaRecorder.resume();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Resumed recording.');\r\n        }\r\n    }\r\n\r\n    function readFile(_blob) {\r\n        postMessage(new FileReaderSync().readAsDataURL(_blob));\r\n    }\r\n\r\n    function getDataURL(callback, _mediaRecorder) {\r\n        if (!callback) {\r\n            throw 'Pass a callback function over getDataURL.';\r\n        }\r\n\r\n        var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\r\n\r\n        if (!blob) {\r\n            if (!config.disableLogs) {\r\n                console.warn('Blob encoder did not finish its job yet.');\r\n            }\r\n\r\n            setTimeout(function() {\r\n                getDataURL(callback, _mediaRecorder);\r\n            }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\r\n            var webWorker = processInWebWorker(readFile);\r\n\r\n            webWorker.onmessage = function(event) {\r\n                callback(event.data);\r\n            };\r\n\r\n            webWorker.postMessage(blob);\r\n        } else {\r\n            var reader = new FileReader();\r\n            reader.readAsDataURL(blob);\r\n            reader.onload = function(event) {\r\n                callback(event.target.result);\r\n            };\r\n        }\r\n\r\n        function processInWebWorker(_function) {\r\n            try {\r\n                var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n                    'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n                ], {\r\n                    type: 'application/javascript'\r\n                }));\r\n\r\n                var worker = new Worker(blob);\r\n                URL.revokeObjectURL(blob);\r\n                return worker;\r\n            } catch (e) {}\r\n        }\r\n    }\r\n\r\n    function handleRecordingDuration(counter) {\r\n        counter = counter || 0;\r\n\r\n        if (self.state === 'paused') {\r\n            setTimeout(function() {\r\n                handleRecordingDuration(counter);\r\n            }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (self.state === 'stopped') {\r\n            return;\r\n        }\r\n\r\n        if (counter >= self.recordingDuration) {\r\n            stopRecording(self.onRecordingStopped);\r\n            return;\r\n        }\r\n\r\n        counter += 1000; // 1-second\r\n\r\n        setTimeout(function() {\r\n            handleRecordingDuration(counter);\r\n        }, 1000);\r\n    }\r\n\r\n    function setState(state) {\r\n        if (!self) {\r\n            return;\r\n        }\r\n\r\n        self.state = state;\r\n\r\n        if (typeof self.onStateChanged.call === 'function') {\r\n            self.onStateChanged.call(self, state);\r\n        } else {\r\n            self.onStateChanged(state);\r\n        }\r\n    }\r\n\r\n    var WARNING = 'It seems that recorder is destroyed or \"startRecording\" is not invoked for ' + config.type + ' recorder.';\r\n\r\n    function warningLog() {\r\n        if (config.disableLogs === true) {\r\n            return;\r\n        }\r\n\r\n        console.warn(WARNING);\r\n    }\r\n\r\n    var mediaRecorder;\r\n\r\n    var returnObject = {\r\n        /**\r\n         * This method starts the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var recorder = RecordRTC(mediaStream, {\r\n         *     type: 'video'\r\n         * });\r\n         * recorder.startRecording();\r\n         */\r\n        startRecording: startRecording,\r\n\r\n        /**\r\n         * This method stops the recording. It is strongly recommended to get \"blob\" or \"URI\" inside the callback to make sure all recorders finished their job.\r\n         * @param {function} callback - Callback to get the recorded blob.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     // use either \"this\" or \"recorder\" object; both are identical\r\n         *     video.src = this.toURL();\r\n         *     var blob = this.getBlob();\r\n         * });\r\n         */\r\n        stopRecording: stopRecording,\r\n\r\n        /**\r\n         * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo Firefox is unable to pause the recording. Fix it.\r\n         * @example\r\n         * recorder.pauseRecording();  // pause the recording\r\n         * recorder.resumeRecording(); // resume again\r\n         */\r\n        pauseRecording: pauseRecording,\r\n\r\n        /**\r\n         * This method resumes the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.pauseRecording();  // first of all, pause the recording\r\n         * recorder.resumeRecording(); // now resume it\r\n         */\r\n        resumeRecording: resumeRecording,\r\n\r\n        /**\r\n         * This method initializes the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo This method should be deprecated.\r\n         * @example\r\n         * recorder.initRecorder();\r\n         */\r\n        initRecorder: initRecorder,\r\n\r\n        /**\r\n         * Ask RecordRTC to auto-stop the recording after 5 minutes.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var fiveMinutes = 5 * 1000 * 60;\r\n         * recorder.setRecordingDuration(fiveMinutes, function() {\r\n         *    var blob = this.getBlob();\r\n         *    video.src = this.toURL();\r\n         * });\r\n         * \r\n         * // or otherwise\r\n         * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {\r\n         *    var blob = this.getBlob();\r\n         *    video.src = this.toURL();\r\n         * });\r\n         */\r\n        setRecordingDuration: function(recordingDuration, callback) {\r\n            if (typeof recordingDuration === 'undefined') {\r\n                throw 'recordingDuration is required.';\r\n            }\r\n\r\n            if (typeof recordingDuration !== 'number') {\r\n                throw 'recordingDuration must be a number.';\r\n            }\r\n\r\n            self.recordingDuration = recordingDuration;\r\n            self.onRecordingStopped = callback || function() {};\r\n\r\n            return {\r\n                onRecordingStopped: function(callback) {\r\n                    self.onRecordingStopped = callback;\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * This method can be used to clear/reset all the recorded data.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo Figure out the difference between \"reset\" and \"clearRecordedData\" methods.\r\n         * @example\r\n         * recorder.clearRecordedData();\r\n         */\r\n        clearRecordedData: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            mediaRecorder.clearRecordedData();\r\n\r\n            if (!config.disableLogs) {\r\n                console.log('Cleared old recorded data.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the recorded blob. Use this method inside the \"stopRecording\" callback.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var blob = this.getBlob();\r\n         *\r\n         *     var file = new File([blob], 'filename.webm', {\r\n         *         type: 'video/webm'\r\n         *     });\r\n         *\r\n         *     var formData = new FormData();\r\n         *     formData.append('file', file); // upload \"File\" object rather than a \"Blob\"\r\n         *     uploadToServer(formData);\r\n         * });\r\n         * @returns {Blob} Returns recorded data as \"Blob\" object.\r\n         */\r\n        getBlob: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            return mediaRecorder.blob;\r\n        },\r\n\r\n        /**\r\n         * Get data-URI instead of Blob.\r\n         * @param {function} callback - Callback to get the Data-URI.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     recorder.getDataURL(function(dataURI) {\r\n         *         video.src = dataURI;\r\n         *     });\r\n         * });\r\n         */\r\n        getDataURL: getDataURL,\r\n\r\n        /**\r\n         * Get virtual/temporary URL. Usage of this URL is limited to current tab.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     video.src = this.toURL();\r\n         * });\r\n         * @returns {String} Returns a virtual/temporary URL for the recorded \"Blob\".\r\n         */\r\n        toURL: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            return URL.createObjectURL(mediaRecorder.blob);\r\n        },\r\n\r\n        /**\r\n         * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var internalRecorder = recorder.getInternalRecorder();\r\n         * if(internalRecorder instanceof MultiStreamRecorder) {\r\n         *     internalRecorder.addStreams([newAudioStream]);\r\n         *     internalRecorder.resetVideoStreams([screenStream]);\r\n         * }\r\n         * @returns {Object} Returns internal recording object.\r\n         */\r\n        getInternalRecorder: function() {\r\n            return mediaRecorder;\r\n        },\r\n\r\n        /**\r\n         * Invoke save-as dialog to save the recorded blob into your disk.\r\n         * @param {string} fileName - Set your own file name.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     this.save('file-name');\r\n         *\r\n         *     // or manually:\r\n         *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');\r\n         * });\r\n         */\r\n        save: function(fileName) {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            invokeSaveAsDialog(mediaRecorder.blob, fileName);\r\n        },\r\n\r\n        /**\r\n         * This method gets a blob from indexed-DB storage.\r\n         * @param {function} callback - Callback to get the recorded blob.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.getFromDisk(function(dataURL) {\r\n         *     video.src = dataURL;\r\n         * });\r\n         */\r\n        getFromDisk: function(callback) {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            RecordRTC.getFromDisk(config.type, callback);\r\n        },\r\n\r\n        /**\r\n         * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\r\n         * @type {Array.<Array>}\r\n         * @param {Array} arrayOfWebPImages - Array of webp images.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo This method should be deprecated.\r\n         * @example\r\n         * var arrayOfWebPImages = [];\r\n         * arrayOfWebPImages.push({\r\n         *     duration: index,\r\n         *     image: 'data:image/webp;base64,...'\r\n         * });\r\n         * recorder.setAdvertisementArray(arrayOfWebPImages);\r\n         */\r\n        setAdvertisementArray: function(arrayOfWebPImages) {\r\n            config.advertisement = [];\r\n\r\n            var length = arrayOfWebPImages.length;\r\n            for (var i = 0; i < length; i++) {\r\n                config.advertisement.push({\r\n                    duration: i,\r\n                    image: arrayOfWebPImages[i]\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * It is equivalent to <code class=\"str\">\"recorder.getBlob()\"</code> method. Usage of \"getBlob\" is recommended, though.\r\n         * @property {Blob} blob - Recorded Blob can be accessed using this property.\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var blob = this.blob;\r\n         *\r\n         *     // below one is recommended\r\n         *     var blob = this.getBlob();\r\n         * });\r\n         */\r\n        blob: null,\r\n\r\n        /**\r\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n         * @property {number} bufferSize - Buffer-size used to encode the WAV container\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     alert('Recorder used this buffer-size: ' + this.bufferSize);\r\n         * });\r\n         */\r\n        bufferSize: 0,\r\n\r\n        /**\r\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n         * @property {number} sampleRate - Sample-rates used to encode the WAV container\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     alert('Recorder used these sample-rates: ' + this.sampleRate);\r\n         * });\r\n         */\r\n        sampleRate: 0,\r\n\r\n        /**\r\n         * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\r\n         * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var arrayBuffer = this.buffer;\r\n         *     alert(arrayBuffer.byteLength);\r\n         * });\r\n         */\r\n        buffer: null,\r\n\r\n        /**\r\n         * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.reset();\r\n         * recorder.startRecording();\r\n         */\r\n        reset: function() {\r\n            if (self.state === 'recording' && !config.disableLogs) {\r\n                console.warn('Stop an active recorder.');\r\n            }\r\n\r\n            if (mediaRecorder && typeof mediaRecorder.clearRecordedData === 'function') {\r\n                mediaRecorder.clearRecordedData();\r\n            }\r\n            mediaRecorder = null;\r\n            setState('inactive');\r\n            self.blob = null;\r\n        },\r\n\r\n        /**\r\n         * This method is called whenever recorder's state changes. Use this as an \"event\".\r\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.onStateChanged = function(state) {\r\n         *     console.log('Recorder state: ', state);\r\n         * };\r\n         */\r\n        onStateChanged: function(state) {\r\n            if (!config.disableLogs) {\r\n                console.log('Recorder state changed:', state);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * A recorder can have inactive, recording, paused or stopped states.\r\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n         * @memberof RecordRTC\r\n         * @static\r\n         * @readonly\r\n         * @example\r\n         * // this looper function will keep you updated about the recorder's states.\r\n         * (function looper() {\r\n         *     document.querySelector('h1').innerHTML = 'Recorder\\'s state is: ' + recorder.state;\r\n         *     if(recorder.state === 'stopped') return; // ignore+stop\r\n         *     setTimeout(looper, 1000); // update after every 3-seconds\r\n         * })();\r\n         * recorder.startRecording();\r\n         */\r\n        state: 'inactive',\r\n\r\n        /**\r\n         * Get recorder's readonly state.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * var state = recorder.getState();\r\n         * @returns {String} Returns recording state.\r\n         */\r\n        getState: function() {\r\n            return self.state;\r\n        },\r\n\r\n        /**\r\n         * Destroy RecordRTC instance. Clear all recorders and objects.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * recorder.destroy();\r\n         */\r\n        destroy: function() {\r\n            var disableLogsCache = config.disableLogs;\r\n\r\n            config = {\r\n                disableLogs: true\r\n            };\r\n            self.reset();\r\n            setState('destroyed');\r\n            returnObject = self = null;\r\n\r\n            if (Storage.AudioContextConstructor) {\r\n                Storage.AudioContextConstructor.close();\r\n                Storage.AudioContextConstructor = null;\r\n            }\r\n\r\n            config.disableLogs = disableLogsCache;\r\n\r\n            if (!config.disableLogs) {\r\n                console.log('RecordRTC is destroyed.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * RecordRTC version number\r\n         * @property {String} version - Release version number.\r\n         * @memberof RecordRTC\r\n         * @static\r\n         * @readonly\r\n         * @example\r\n         * alert(recorder.version);\r\n         */\r\n        version: '5.5.9'\r\n    };\r\n\r\n    if (!this) {\r\n        self = returnObject;\r\n        return returnObject;\r\n    }\r\n\r\n    // if someone wants to use RecordRTC with the \"new\" keyword.\r\n    for (var prop in returnObject) {\r\n        this[prop] = returnObject[prop];\r\n    }\r\n\r\n    self = this;\r\n\r\n    return returnObject;\r\n}\r\n\r\nRecordRTC.version = '5.5.9';\r\n\r\nif (typeof module !== 'undefined' /* && !!module.exports*/ ) {\r\n    module.exports = RecordRTC;\r\n}\r\n\r\nif (typeof define === 'function' && define.amd) {\r\n    define('RecordRTC', [], function() {\r\n        return RecordRTC;\r\n    });\r\n}\n\r\nRecordRTC.getFromDisk = function(type, callback) {\r\n    if (!callback) {\r\n        throw 'callback is mandatory.';\r\n    }\r\n\r\n    console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\r\n    DiskStorage.Fetch(function(dataURL, _type) {\r\n        if (type !== 'all' && _type === type + 'Blob' && callback) {\r\n            callback(dataURL);\r\n        }\r\n\r\n        if (type === 'all' && callback) {\r\n            callback(dataURL, _type.replace('Blob', ''));\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof RecordRTC\r\n * @example\r\n * RecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\r\nRecordRTC.writeToDisk = function(options) {\r\n    console.log('Writing recorded blob(s) to disk!');\r\n    options = options || {};\r\n    if (options.audio && options.video && options.gif) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.video.getDataURL(function(videoDataURL) {\r\n                options.gif.getDataURL(function(gifDataURL) {\r\n                    DiskStorage.Store({\r\n                        audioBlob: audioDataURL,\r\n                        videoBlob: videoDataURL,\r\n                        gifBlob: gifDataURL\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio && options.video) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.video.getDataURL(function(videoDataURL) {\r\n                DiskStorage.Store({\r\n                    audioBlob: audioDataURL,\r\n                    videoBlob: videoDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio && options.gif) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.gif.getDataURL(function(gifDataURL) {\r\n                DiskStorage.Store({\r\n                    audioBlob: audioDataURL,\r\n                    gifBlob: gifDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.video && options.gif) {\r\n        options.video.getDataURL(function(videoDataURL) {\r\n            options.gif.getDataURL(function(gifDataURL) {\r\n                DiskStorage.Store({\r\n                    videoBlob: videoDataURL,\r\n                    gifBlob: gifDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            DiskStorage.Store({\r\n                audioBlob: audioDataURL\r\n            });\r\n        });\r\n    } else if (options.video) {\r\n        options.video.getDataURL(function(videoDataURL) {\r\n            DiskStorage.Store({\r\n                videoBlob: videoDataURL\r\n            });\r\n        });\r\n    } else if (options.gif) {\r\n        options.gif.getDataURL(function(gifDataURL) {\r\n            DiskStorage.Store({\r\n                gifBlob: gifDataURL\r\n            });\r\n        });\r\n    }\r\n};\n\r\n// __________________________\r\n// RecordRTC-Configuration.js\r\n\r\n/**\r\n * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCConfiguration\r\n * @class\r\n * @example\r\n * var options = RecordRTCConfiguration(mediaStream, options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\r\n */\r\n\r\nfunction RecordRTCConfiguration(mediaStream, config) {\r\n    if (!config.recorderType && !config.type) {\r\n        if (!!config.audio && !!config.video) {\r\n            config.type = 'video';\r\n        } else if (!!config.audio && !config.video) {\r\n            config.type = 'audio';\r\n        }\r\n    }\r\n\r\n    if (config.recorderType && !config.type) {\r\n        if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder || (typeof WebAssemblyRecorder !== 'undefined' && config.recorderType === WebAssemblyRecorder)) {\r\n            config.type = 'video';\r\n        } else if (config.recorderType === GifRecorder) {\r\n            config.type = 'gif';\r\n        } else if (config.recorderType === StereoAudioRecorder) {\r\n            config.type = 'audio';\r\n        } else if (config.recorderType === MediaStreamRecorder) {\r\n            if (getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\r\n                config.type = 'video';\r\n            } else if (!getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\r\n                config.type = 'video';\r\n            } else if (getTracks(mediaStream, 'audio').length && !getTracks(mediaStream, 'video').length) {\r\n                config.type = 'audio';\r\n            } else {\r\n                // config.type = 'UnKnown';\r\n            }\r\n        }\r\n    }\r\n\r\n    if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\r\n        if (!config.mimeType) {\r\n            config.mimeType = 'video/webm';\r\n        }\r\n\r\n        if (!config.type) {\r\n            config.type = config.mimeType.split('/')[0];\r\n        }\r\n\r\n        if (!config.bitsPerSecond) {\r\n            // config.bitsPerSecond = 128000;\r\n        }\r\n    }\r\n\r\n    // consider default type=audio\r\n    if (!config.type) {\r\n        if (config.mimeType) {\r\n            config.type = config.mimeType.split('/')[0];\r\n        }\r\n        if (!config.type) {\r\n            config.type = 'audio';\r\n        }\r\n    }\r\n\r\n    return config;\r\n}\n\r\n// __________________\r\n// GetRecorderType.js\r\n\r\n/**\r\n * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It returns best recorder-type available for your browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef GetRecorderType\r\n * @class\r\n * @example\r\n * var RecorderType = GetRecorderType(options);\r\n * var recorder = new RecorderType(options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction GetRecorderType(mediaStream, config) {\r\n    var recorder;\r\n\r\n    // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\r\n    // todo: detect if it is Edge, then auto use: StereoAudioRecorder\r\n    if (isChrome || isEdge || isOpera) {\r\n        // Media Stream Recording API has not been implemented in chrome yet;\r\n        // That's why using WebAudio API to record stereo audio in WAV format\r\n        recorder = StereoAudioRecorder;\r\n    }\r\n\r\n    if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\r\n        recorder = MediaStreamRecorder;\r\n    }\r\n\r\n    // video recorder (in WebM format)\r\n    if (config.type === 'video' && (isChrome || isOpera)) {\r\n        recorder = WhammyRecorder;\r\n\r\n        if (typeof WebAssemblyRecorder !== 'undefined' && typeof ReadableStream !== 'undefined') {\r\n            recorder = WebAssemblyRecorder;\r\n        }\r\n    }\r\n\r\n    // video recorder (in Gif format)\r\n    if (config.type === 'gif') {\r\n        recorder = GifRecorder;\r\n    }\r\n\r\n    // html2canvas recording!\r\n    if (config.type === 'canvas') {\r\n        recorder = CanvasRecorder;\r\n    }\r\n\r\n    if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\r\n        if (getTracks(mediaStream, 'video').length || getTracks(mediaStream, 'audio').length) {\r\n            // audio-only recording\r\n            if (config.type === 'audio') {\r\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\r\n                    recorder = MediaStreamRecorder;\r\n                }\r\n                // else recorder = StereoAudioRecorder;\r\n            } else {\r\n                // video or screen tracks\r\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\r\n                    recorder = MediaStreamRecorder;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (mediaStream instanceof Array && mediaStream.length) {\r\n        recorder = MultiStreamRecorder;\r\n    }\r\n\r\n    if (config.recorderType) {\r\n        recorder = config.recorderType;\r\n    }\r\n\r\n    if (!config.disableLogs && !!recorder && !!recorder.name) {\r\n        console.log('Using recorderType:', recorder.name || recorder.constructor.name);\r\n    }\r\n\r\n    if (!recorder && isSafari) {\r\n        recorder = MediaStreamRecorder;\r\n    }\r\n\r\n    return recorder;\r\n}\n\r\n// _____________\r\n// MRecordRTC.js\r\n\r\n/**\r\n * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\r\n * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef MRecordRTC\r\n * @class\r\n * @example\r\n * var recorder = new MRecordRTC();\r\n * recorder.addStream(MediaStream);\r\n * recorder.mediaType = {\r\n *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\r\n *     video: true, // or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n *     gif: true    // or GifRecorder\r\n * };\r\n * // mimeType is optional and should be set only in advance cases.\r\n * recorder.mimeType = {\r\n *     audio: 'audio/wav',\r\n *     video: 'video/webm',\r\n *     gif:   'image/gif'\r\n * };\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @requires {@link RecordRTC}\r\n */\r\n\r\nfunction MRecordRTC(mediaStream) {\r\n\r\n    /**\r\n     * This method attaches MediaStream object to {@link MRecordRTC}.\r\n     * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.addStream(MediaStream);\r\n     */\r\n    this.addStream = function(_mediaStream) {\r\n        if (_mediaStream) {\r\n            mediaStream = _mediaStream;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\r\n     * @property {object} mediaType - {audio: true, video: true, gif: true}\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * var recorder = new MRecordRTC();\r\n     * recorder.mediaType = {\r\n     *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\r\n     *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n     *     gif  : true  // TRUE or GifRecorder\r\n     * };\r\n     */\r\n    this.mediaType = {\r\n        audio: true,\r\n        video: true\r\n    };\r\n\r\n    /**\r\n     * This method starts recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.startRecording();\r\n     */\r\n    this.startRecording = function() {\r\n        var mediaType = this.mediaType;\r\n        var recorderType;\r\n        var mimeType = this.mimeType || {\r\n            audio: null,\r\n            video: null,\r\n            gif: null\r\n        };\r\n\r\n        if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'audio').length) {\r\n            mediaType.audio = false;\r\n        }\r\n\r\n        if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\r\n            mediaType.video = false;\r\n        }\r\n\r\n        if (typeof mediaType.gif !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\r\n            mediaType.gif = false;\r\n        }\r\n\r\n        if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\r\n            throw 'MediaStream must have either audio or video tracks.';\r\n        }\r\n\r\n        if (!!mediaType.audio) {\r\n            recorderType = null;\r\n            if (typeof mediaType.audio === 'function') {\r\n                recorderType = mediaType.audio;\r\n            }\r\n\r\n            this.audioRecorder = new RecordRTC(mediaStream, {\r\n                type: 'audio',\r\n                bufferSize: this.bufferSize,\r\n                sampleRate: this.sampleRate,\r\n                numberOfAudioChannels: this.numberOfAudioChannels || 2,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.audio,\r\n                timeSlice: this.timeSlice,\r\n                onTimeStamp: this.onTimeStamp\r\n            });\r\n\r\n            if (!mediaType.video) {\r\n                this.audioRecorder.startRecording();\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.video) {\r\n            recorderType = null;\r\n            if (typeof mediaType.video === 'function') {\r\n                recorderType = mediaType.video;\r\n            }\r\n\r\n            var newStream = mediaStream;\r\n\r\n            if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\r\n                var videoTrack = getTracks(mediaStream, 'video')[0];\r\n\r\n                if (isFirefox) {\r\n                    newStream = new MediaStream();\r\n                    newStream.addTrack(videoTrack);\r\n\r\n                    if (recorderType && recorderType === WhammyRecorder) {\r\n                        // Firefox does NOT supports webp-encoding yet\r\n                        // But Firefox do supports WebAssemblyRecorder\r\n                        recorderType = MediaStreamRecorder;\r\n                    }\r\n                } else {\r\n                    newStream = new MediaStream();\r\n                    newStream.addTrack(videoTrack);\r\n                }\r\n            }\r\n\r\n            this.videoRecorder = new RecordRTC(newStream, {\r\n                type: 'video',\r\n                video: this.video,\r\n                canvas: this.canvas,\r\n                frameInterval: this.frameInterval || 10,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.video,\r\n                timeSlice: this.timeSlice,\r\n                onTimeStamp: this.onTimeStamp,\r\n                workerPath: this.workerPath,\r\n                webAssemblyPath: this.webAssemblyPath,\r\n                frameRate: this.frameRate, // used by WebAssemblyRecorder; values: usually 30; accepts any.\r\n                bitrate: this.bitrate // used by WebAssemblyRecorder; values: 0 to 1000+\r\n            });\r\n\r\n            if (!mediaType.audio) {\r\n                this.videoRecorder.startRecording();\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.audio && !!mediaType.video) {\r\n            var self = this;\r\n\r\n            var isSingleRecorder = isMediaRecorderCompatible() === true;\r\n\r\n            if (mediaType.audio instanceof StereoAudioRecorder && !!mediaType.video) {\r\n                isSingleRecorder = false;\r\n            } else if (mediaType.audio !== true && mediaType.video !== true && mediaType.audio !== mediaType.video) {\r\n                isSingleRecorder = false;\r\n            }\r\n\r\n            if (isSingleRecorder === true) {\r\n                self.audioRecorder = null;\r\n                self.videoRecorder.startRecording();\r\n            } else {\r\n                self.videoRecorder.initRecorder(function() {\r\n                    self.audioRecorder.initRecorder(function() {\r\n                        // Both recorders are ready to record things accurately\r\n                        self.videoRecorder.startRecording();\r\n                        self.audioRecorder.startRecording();\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.gif) {\r\n            recorderType = null;\r\n            if (typeof mediaType.gif === 'function') {\r\n                recorderType = mediaType.gif;\r\n            }\r\n            this.gifRecorder = new RecordRTC(mediaStream, {\r\n                type: 'gif',\r\n                frameRate: this.frameRate || 200,\r\n                quality: this.quality || 10,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.gif\r\n            });\r\n            this.gifRecorder.startRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method stops recording.\r\n     * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.stopRecording(function(recording){\r\n     *     var audioBlob = recording.audio;\r\n     *     var videoBlob = recording.video;\r\n     *     var gifBlob   = recording.gif;\r\n     * });\r\n     */\r\n    this.stopRecording = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'audio');\r\n            });\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'video');\r\n            });\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'gif');\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method pauses recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.pauseRecording();\r\n     */\r\n    this.pauseRecording = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.pauseRecording();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.pauseRecording();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.pauseRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.resumeRecording();\r\n     */\r\n    this.resumeRecording = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.resumeRecording();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.resumeRecording();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.resumeRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to manually get all recorded blobs.\r\n     * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.getBlob(function(recording){\r\n     *     var audioBlob = recording.audio;\r\n     *     var videoBlob = recording.video;\r\n     *     var gifBlob   = recording.gif;\r\n     * });\r\n     * // or\r\n     * var audioBlob = recorder.getBlob().audio;\r\n     * var videoBlob = recorder.getBlob().video;\r\n     */\r\n    this.getBlob = function(callback) {\r\n        var output = {};\r\n\r\n        if (this.audioRecorder) {\r\n            output.audio = this.audioRecorder.getBlob();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            output.video = this.videoRecorder.getBlob();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            output.gif = this.gifRecorder.getBlob();\r\n        }\r\n\r\n        if (callback) {\r\n            callback(output);\r\n        }\r\n\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Destroy all recorder instances.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.destroy();\r\n     */\r\n    this.destroy = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.destroy();\r\n            this.audioRecorder = null;\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.destroy();\r\n            this.videoRecorder = null;\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.destroy();\r\n            this.gifRecorder = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to manually get all recorded blobs' DataURLs.\r\n     * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.getDataURL(function(recording){\r\n     *     var audioDataURL = recording.audio;\r\n     *     var videoDataURL = recording.video;\r\n     *     var gifDataURL   = recording.gif;\r\n     * });\r\n     */\r\n    this.getDataURL = function(callback) {\r\n        this.getBlob(function(blob) {\r\n            if (blob.audio && blob.video) {\r\n                getDataURL(blob.audio, function(_audioDataURL) {\r\n                    getDataURL(blob.video, function(_videoDataURL) {\r\n                        callback({\r\n                            audio: _audioDataURL,\r\n                            video: _videoDataURL\r\n                        });\r\n                    });\r\n                });\r\n            } else if (blob.audio) {\r\n                getDataURL(blob.audio, function(_audioDataURL) {\r\n                    callback({\r\n                        audio: _audioDataURL\r\n                    });\r\n                });\r\n            } else if (blob.video) {\r\n                getDataURL(blob.video, function(_videoDataURL) {\r\n                    callback({\r\n                        video: _videoDataURL\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        function getDataURL(blob, callback00) {\r\n            if (typeof Worker !== 'undefined') {\r\n                var webWorker = processInWebWorker(function readFile(_blob) {\r\n                    postMessage(new FileReaderSync().readAsDataURL(_blob));\r\n                });\r\n\r\n                webWorker.onmessage = function(event) {\r\n                    callback00(event.data);\r\n                };\r\n\r\n                webWorker.postMessage(blob);\r\n            } else {\r\n                var reader = new FileReader();\r\n                reader.readAsDataURL(blob);\r\n                reader.onload = function(event) {\r\n                    callback00(event.target.result);\r\n                };\r\n            }\r\n        }\r\n\r\n        function processInWebWorker(_function) {\r\n            var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n                'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n            ], {\r\n                type: 'application/javascript'\r\n            }));\r\n\r\n            var worker = new Worker(blob);\r\n            var url;\r\n            if (typeof URL !== 'undefined') {\r\n                url = URL;\r\n            } else if (typeof webkitURL !== 'undefined') {\r\n                url = webkitURL;\r\n            } else {\r\n                throw 'Neither URL nor webkitURL detected.';\r\n            }\r\n            url.revokeObjectURL(blob);\r\n            return worker;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.writeToDisk();\r\n     */\r\n    this.writeToDisk = function() {\r\n        RecordRTC.writeToDisk({\r\n            audio: this.audioRecorder,\r\n            video: this.videoRecorder,\r\n            gif: this.gifRecorder\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method can be used to invoke a save-as dialog for all recorded blobs.\r\n     * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.save({\r\n     *     audio: 'audio-file-name',\r\n     *     video: 'video-file-name',\r\n     *     gif  : 'gif-file-name'\r\n     * });\r\n     */\r\n    this.save = function(args) {\r\n        args = args || {\r\n            audio: true,\r\n            video: true,\r\n            gif: true\r\n        };\r\n\r\n        if (!!args.audio && this.audioRecorder) {\r\n            this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\r\n        }\r\n\r\n        if (!!args.video && this.videoRecorder) {\r\n            this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\r\n        }\r\n        if (!!args.gif && this.gifRecorder) {\r\n            this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * This method can be used to get all recorded blobs from IndexedDB storage.\r\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\r\n * @param {function} callback - Callback function to get all stored blobs.\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.getFromDisk('all', function(dataURL, type){\r\n *     if(type === 'audio') { }\r\n *     if(type === 'video') { }\r\n *     if(type === 'gif')   { }\r\n * });\r\n */\r\nMRecordRTC.getFromDisk = RecordRTC.getFromDisk;\r\n\r\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\r\nMRecordRTC.writeToDisk = RecordRTC.writeToDisk;\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MRecordRTC = MRecordRTC;\r\n}\n\r\nvar browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\r\n\r\n(function(that) {\r\n    if (!that) {\r\n        return;\r\n    }\r\n\r\n    if (typeof window !== 'undefined') {\r\n        return;\r\n    }\r\n\r\n    if (typeof global === 'undefined') {\r\n        return;\r\n    }\r\n\r\n    global.navigator = {\r\n        userAgent: browserFakeUserAgent,\r\n        getUserMedia: function() {}\r\n    };\r\n\r\n    if (!global.console) {\r\n        global.console = {};\r\n    }\r\n\r\n    if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\r\n        global.console.error = global.console.log = global.console.log || function() {\r\n            console.log(arguments);\r\n        };\r\n    }\r\n\r\n    if (typeof document === 'undefined') {\r\n        /*global document:true */\r\n        that.document = {\r\n            documentElement: {\r\n                appendChild: function() {\r\n                    return '';\r\n                }\r\n            }\r\n        };\r\n\r\n        document.createElement = document.captureStream = document.mozCaptureStream = function() {\r\n            var obj = {\r\n                getContext: function() {\r\n                    return obj;\r\n                },\r\n                play: function() {},\r\n                pause: function() {},\r\n                drawImage: function() {},\r\n                toDataURL: function() {\r\n                    return '';\r\n                },\r\n                style: {}\r\n            };\r\n            return obj;\r\n        };\r\n\r\n        that.HTMLVideoElement = function() {};\r\n    }\r\n\r\n    if (typeof location === 'undefined') {\r\n        /*global location:true */\r\n        that.location = {\r\n            protocol: 'file:',\r\n            href: '',\r\n            hash: ''\r\n        };\r\n    }\r\n\r\n    if (typeof screen === 'undefined') {\r\n        /*global screen:true */\r\n        that.screen = {\r\n            width: 0,\r\n            height: 0\r\n        };\r\n    }\r\n\r\n    if (typeof URL === 'undefined') {\r\n        /*global screen:true */\r\n        that.URL = {\r\n            createObjectURL: function() {\r\n                return '';\r\n            },\r\n            revokeObjectURL: function() {\r\n                return '';\r\n            }\r\n        };\r\n    }\r\n\r\n    /*global window:true */\r\n    that.window = global;\r\n})(typeof global !== 'undefined' ? global : null);\n\r\n// _____________________________\r\n// Cross-Browser-Declarations.js\r\n\r\n// animation-frame used in WebM recording\r\n\r\n/*jshint -W079 */\r\nvar requestAnimationFrame = window.requestAnimationFrame;\r\nif (typeof requestAnimationFrame === 'undefined') {\r\n    if (typeof webkitRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = webkitRequestAnimationFrame;\r\n    } else if (typeof mozRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = mozRequestAnimationFrame;\r\n    } else if (typeof msRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = msRequestAnimationFrame;\r\n    } else if (typeof requestAnimationFrame === 'undefined') {\r\n        // via: https://gist.github.com/paulirish/1579671\r\n        var lastTime = 0;\r\n\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = function(callback, element) {\r\n            var currTime = new Date().getTime();\r\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n            var id = setTimeout(function() {\r\n                callback(currTime + timeToCall);\r\n            }, timeToCall);\r\n            lastTime = currTime + timeToCall;\r\n            return id;\r\n        };\r\n    }\r\n}\r\n\r\n/*jshint -W079 */\r\nvar cancelAnimationFrame = window.cancelAnimationFrame;\r\nif (typeof cancelAnimationFrame === 'undefined') {\r\n    if (typeof webkitCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = webkitCancelAnimationFrame;\r\n    } else if (typeof mozCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = mozCancelAnimationFrame;\r\n    } else if (typeof msCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = msCancelAnimationFrame;\r\n    } else if (typeof cancelAnimationFrame === 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = function(id) {\r\n            clearTimeout(id);\r\n        };\r\n    }\r\n}\r\n\r\n// WebAudio API representer\r\nvar AudioContext = window.AudioContext;\r\n\r\nif (typeof AudioContext === 'undefined') {\r\n    if (typeof webkitAudioContext !== 'undefined') {\r\n        /*global AudioContext:true */\r\n        AudioContext = webkitAudioContext;\r\n    }\r\n\r\n    if (typeof mozAudioContext !== 'undefined') {\r\n        /*global AudioContext:true */\r\n        AudioContext = mozAudioContext;\r\n    }\r\n}\r\n\r\n/*jshint -W079 */\r\nvar URL = window.URL;\r\n\r\nif (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\r\n    /*global URL:true */\r\n    URL = webkitURL;\r\n}\r\n\r\nif (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\r\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n        navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n    }\r\n\r\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n        navigator.getUserMedia = navigator.mozGetUserMedia;\r\n    }\r\n}\r\n\r\nvar isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\r\nvar isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\r\nvar isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && ('netscape' in window) && / rv:/.test(navigator.userAgent);\r\nvar isChrome = (!isOpera && !isEdge && !!navigator.webkitGetUserMedia) || isElectron() || navigator.userAgent.toLowerCase().indexOf('chrome/') !== -1;\r\n\r\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n\r\nif (isSafari && !isChrome && navigator.userAgent.indexOf('CriOS') !== -1) {\r\n    isSafari = false;\r\n    isChrome = true;\r\n}\r\n\r\nvar MediaStream = window.MediaStream;\r\n\r\nif (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n    MediaStream = webkitMediaStream;\r\n}\r\n\r\n/*global MediaStream:true */\r\nif (typeof MediaStream !== 'undefined') {\r\n    // override \"stop\" method for all browsers\r\n    if (typeof MediaStream.prototype.stop === 'undefined') {\r\n        MediaStream.prototype.stop = function() {\r\n            this.getTracks().forEach(function(track) {\r\n                track.stop();\r\n            });\r\n        };\r\n    }\r\n}\r\n\r\n// below function via: http://goo.gl/B3ae8c\r\n/**\r\n * Return human-readable file size.\r\n * @param {number} bytes - Pass bytes and get formatted string.\r\n * @returns {string} - formatted string\r\n * @example\r\n * bytesToSize(1024*1024*5) === '5 GB'\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction bytesToSize(bytes) {\r\n    var k = 1000;\r\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n    if (bytes === 0) {\r\n        return '0 Bytes';\r\n    }\r\n    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\r\n    return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\r\n}\r\n\r\n/**\r\n * @param {Blob} file - File or Blob object. This parameter is required.\r\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\r\n * @example\r\n * invokeSaveAsDialog(blob or file, [optional] fileName);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction invokeSaveAsDialog(file, fileName) {\r\n    if (!file) {\r\n        throw 'Blob object is required.';\r\n    }\r\n\r\n    if (!file.type) {\r\n        try {\r\n            file.type = 'video/webm';\r\n        } catch (e) {}\r\n    }\r\n\r\n    var fileExtension = (file.type || 'video/webm').split('/')[1];\r\n\r\n    if (fileName && fileName.indexOf('.') !== -1) {\r\n        var splitted = fileName.split('.');\r\n        fileName = splitted[0];\r\n        fileExtension = splitted[1];\r\n    }\r\n\r\n    var fileFullName = (fileName || (Math.round(Math.random() * 9999999999) + 888888888)) + '.' + fileExtension;\r\n\r\n    if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\r\n        return navigator.msSaveOrOpenBlob(file, fileFullName);\r\n    } else if (typeof navigator.msSaveBlob !== 'undefined') {\r\n        return navigator.msSaveBlob(file, fileFullName);\r\n    }\r\n\r\n    var hyperlink = document.createElement('a');\r\n    hyperlink.href = URL.createObjectURL(file);\r\n    hyperlink.download = fileFullName;\r\n\r\n    hyperlink.style = 'display:none;opacity:0;color:transparent;';\r\n    (document.body || document.documentElement).appendChild(hyperlink);\r\n\r\n    if (typeof hyperlink.click === 'function') {\r\n        hyperlink.click();\r\n    } else {\r\n        hyperlink.target = '_blank';\r\n        hyperlink.dispatchEvent(new MouseEvent('click', {\r\n            view: window,\r\n            bubbles: true,\r\n            cancelable: true\r\n        }));\r\n    }\r\n\r\n    URL.revokeObjectURL(hyperlink.href);\r\n}\r\n\r\n/**\r\n * from: https://github.com/cheton/is-electron/blob/master/index.js\r\n **/\r\nfunction isElectron() {\r\n    // Renderer process\r\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\r\n        return true;\r\n    }\r\n\r\n    // Main process\r\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\r\n        return true;\r\n    }\r\n\r\n    // Detect the user agent when the `nodeIntegration` option is set to true\r\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction getTracks(stream, kind) {\r\n    if (!stream || !stream.getTracks) {\r\n        return [];\r\n    }\r\n\r\n    return stream.getTracks().filter(function(t) {\r\n        return t.kind === (kind || 'audio');\r\n    });\r\n}\r\n\r\nfunction setSrcObject(stream, element) {\r\n    if ('srcObject' in element) {\r\n        element.srcObject = stream;\r\n    } else if ('mozSrcObject' in element) {\r\n        element.mozSrcObject = stream;\r\n    } else {\r\n        element.srcObject = stream;\r\n    }\r\n}\r\n\r\n/**\r\n * @param {Blob} file - File or Blob object.\r\n * @param {function} callback - Callback function.\r\n * @example\r\n * getSeekableBlob(blob or file, callback);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction getSeekableBlob(inputBlob, callback) {\r\n    // EBML.js copyrights goes to: https://github.com/legokichi/ts-ebml\r\n    if (typeof EBML === 'undefined') {\r\n        throw new Error('Please link: https://www.webrtc-experiment.com/EBML.js');\r\n    }\r\n\r\n    var reader = new EBML.Reader();\r\n    var decoder = new EBML.Decoder();\r\n    var tools = EBML.tools;\r\n\r\n    var fileReader = new FileReader();\r\n    fileReader.onload = function(e) {\r\n        var ebmlElms = decoder.decode(this.result);\r\n        ebmlElms.forEach(function(element) {\r\n            reader.read(element);\r\n        });\r\n        reader.stop();\r\n        var refinedMetadataBuf = tools.makeMetadataSeekable(reader.metadatas, reader.duration, reader.cues);\r\n        var body = this.result.slice(reader.metadataSize);\r\n        var newBlob = new Blob([refinedMetadataBuf, body], {\r\n            type: 'video/webm'\r\n        });\r\n\r\n        callback(newBlob);\r\n    };\r\n    fileReader.readAsArrayBuffer(inputBlob);\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.invokeSaveAsDialog = invokeSaveAsDialog;\r\n    RecordRTC.getTracks = getTracks;\r\n    RecordRTC.getSeekableBlob = getSeekableBlob;\r\n    RecordRTC.bytesToSize = bytesToSize;\r\n    RecordRTC.isElectron = isElectron;\r\n}\n\r\n// __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\r\n// Storage.js\r\n\r\n/**\r\n * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @example\r\n * Storage.AudioContext === webkitAudioContext\r\n * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\nvar Storage = {};\r\n\r\nif (typeof AudioContext !== 'undefined') {\r\n    Storage.AudioContext = AudioContext;\r\n} else if (typeof webkitAudioContext !== 'undefined') {\r\n    Storage.AudioContext = webkitAudioContext;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.Storage = Storage;\r\n}\n\r\nfunction isMediaRecorderCompatible() {\r\n    if (isFirefox || isSafari || isEdge) {\r\n        return true;\r\n    }\r\n\r\n    var nVer = navigator.appVersion;\r\n    var nAgt = navigator.userAgent;\r\n    var fullVersion = '' + parseFloat(navigator.appVersion);\r\n    var majorVersion = parseInt(navigator.appVersion, 10);\r\n    var nameOffset, verOffset, ix;\r\n\r\n    if (isChrome || isOpera) {\r\n        verOffset = nAgt.indexOf('Chrome');\r\n        fullVersion = nAgt.substring(verOffset + 7);\r\n    }\r\n\r\n    // trim the fullVersion string at semicolon/space if present\r\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    }\r\n\r\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    }\r\n\r\n    majorVersion = parseInt('' + fullVersion, 10);\r\n\r\n    if (isNaN(majorVersion)) {\r\n        fullVersion = '' + parseFloat(navigator.appVersion);\r\n        majorVersion = parseInt(navigator.appVersion, 10);\r\n    }\r\n\r\n    return majorVersion >= 49;\r\n}\n\r\n// ______________________\r\n// MediaStreamRecorder.js\r\n\r\n/**\r\n * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.\r\n * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://github.com/muaz-khan|Muaz Khan}\r\n * @typedef MediaStreamRecorder\r\n * @class\r\n * @example\r\n * var config = {\r\n *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\r\n *     audioBitsPerSecond : 256 * 8 * 1024,\r\n *     videoBitsPerSecond : 256 * 8 * 1024,\r\n *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\r\n *     checkForInactiveTracks: true,\r\n *     timeSlice: 1000, // concatenate intervals based blobs\r\n *     ondataavailable: function() {} // get intervals based blobs\r\n * }\r\n * var recorder = new MediaStreamRecorder(mediaStream, config);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\r\n * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\r\n */\r\n\r\nfunction MediaStreamRecorder(mediaStream, config) {\r\n    var self = this;\r\n\r\n    if (typeof mediaStream === 'undefined') {\r\n        throw 'First argument \"MediaStream\" is required.';\r\n    }\r\n\r\n    if (typeof MediaRecorder === 'undefined') {\r\n        throw 'Your browser does not support the Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\r\n    }\r\n\r\n    config = config || {\r\n        // bitsPerSecond: 256 * 8 * 1024,\r\n        mimeType: 'video/webm'\r\n    };\r\n\r\n    if (config.type === 'audio') {\r\n        if (getTracks(mediaStream, 'video').length && getTracks(mediaStream, 'audio').length) {\r\n            var stream;\r\n            if (!!navigator.mozGetUserMedia) {\r\n                stream = new MediaStream();\r\n                stream.addTrack(getTracks(mediaStream, 'audio')[0]);\r\n            } else {\r\n                // webkitMediaStream\r\n                stream = new MediaStream(getTracks(mediaStream, 'audio'));\r\n            }\r\n            mediaStream = stream;\r\n        }\r\n\r\n        if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\r\n            config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\r\n        }\r\n\r\n        if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\r\n            // forcing better codecs on Firefox (via #166)\r\n            config.mimeType = 'audio/ogg';\r\n        }\r\n    }\r\n\r\n    var arrayOfBlobs = [];\r\n\r\n    /**\r\n     * This method returns array of blobs. Use only with \"timeSlice\". Its useful to preview recording anytime, without using the \"stop\" method.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var arrayOfBlobs = recorder.getArrayOfBlobs();\r\n     * @returns {Array} Returns array of recorded blobs.\r\n     */\r\n    this.getArrayOfBlobs = function() {\r\n        return arrayOfBlobs;\r\n    };\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        // set defaults\r\n        self.blob = null;\r\n        self.clearRecordedData();\r\n        self.timestamps = [];\r\n        allStates = [];\r\n        arrayOfBlobs = [];\r\n\r\n        var recorderHints = config;\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Passing following config over MediaRecorder API.', recorderHints);\r\n        }\r\n\r\n        if (mediaRecorder) {\r\n            // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\r\n            mediaRecorder = null;\r\n        }\r\n\r\n        if (isChrome && !isMediaRecorderCompatible()) {\r\n            // to support video-only recording on stable\r\n            recorderHints = 'video/vp8';\r\n        }\r\n\r\n        if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\r\n            if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\r\n                if (!config.disableLogs) {\r\n                    console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\r\n                }\r\n\r\n                recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\r\n            }\r\n        }\r\n\r\n        // using MediaRecorder API here\r\n        try {\r\n            mediaRecorder = new MediaRecorder(mediaStream, recorderHints);\r\n\r\n            // reset\r\n            config.mimeType = recorderHints.mimeType;\r\n        } catch (e) {\r\n            // chrome-based fallback\r\n            mediaRecorder = new MediaRecorder(mediaStream);\r\n        }\r\n\r\n        // old hack?\r\n        if (recorderHints.mimeType && !MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(recorderHints.mimeType) === false) {\r\n            if (!config.disableLogs) {\r\n                console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\r\n            }\r\n        }\r\n\r\n        // Dispatching OnDataAvailable Handler\r\n        mediaRecorder.ondataavailable = function(e) {\r\n            if (e.data) {\r\n                allStates.push('ondataavailable: ' + bytesToSize(e.data.size));\r\n            }\r\n\r\n            if (typeof config.timeSlice === 'number') {\r\n                if (e.data && e.data.size && e.data.size > 100) {\r\n                    arrayOfBlobs.push(e.data);\r\n                    updateTimeStamp();\r\n\r\n                    if (typeof config.ondataavailable === 'function') {\r\n                        // intervals based blobs\r\n                        var blob = config.getNativeBlob ? e.data : new Blob([e.data], {\r\n                            type: getMimeType(recorderHints)\r\n                        });\r\n                        config.ondataavailable(blob);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\r\n                // make sure that stopRecording always getting fired\r\n                // even if there is invalid data\r\n                if (self.recordingCallback) {\r\n                    self.recordingCallback(new Blob([], {\r\n                        type: getMimeType(recorderHints)\r\n                    }));\r\n                    self.recordingCallback = null;\r\n                }\r\n                return;\r\n            }\r\n\r\n            self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\r\n                type: getMimeType(recorderHints)\r\n            });\r\n\r\n            if (self.recordingCallback) {\r\n                self.recordingCallback(self.blob);\r\n                self.recordingCallback = null;\r\n            }\r\n        };\r\n\r\n        mediaRecorder.onstart = function() {\r\n            allStates.push('started');\r\n        };\r\n\r\n        mediaRecorder.onpause = function() {\r\n            allStates.push('paused');\r\n        };\r\n\r\n        mediaRecorder.onresume = function() {\r\n            allStates.push('resumed');\r\n        };\r\n\r\n        mediaRecorder.onstop = function() {\r\n            allStates.push('stopped');\r\n        };\r\n\r\n        mediaRecorder.onerror = function(error) {\r\n            if (!error) {\r\n                return;\r\n            }\r\n\r\n            if (!error.name) {\r\n                error.name = 'UnknownError';\r\n            }\r\n\r\n            allStates.push('error: ' + error);\r\n\r\n            if (!config.disableLogs) {\r\n                // via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary\r\n                if (error.name.toString().toLowerCase().indexOf('invalidstate') !== -1) {\r\n                    console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.', error);\r\n                } else if (error.name.toString().toLowerCase().indexOf('notsupported') !== -1) {\r\n                    console.error('MIME type (', recorderHints.mimeType, ') is not supported.', error);\r\n                } else if (error.name.toString().toLowerCase().indexOf('security') !== -1) {\r\n                    console.error('MediaRecorder security error', error);\r\n                }\r\n\r\n                // older code below\r\n                else if (error.name === 'OutOfMemory') {\r\n                    console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'IllegalStreamModification') {\r\n                    console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'OtherRecordingError') {\r\n                    console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'GenericError') {\r\n                    console.error('The UA cannot provide the codec or recording option that has been requested.', error);\r\n                } else {\r\n                    console.error('MediaRecorder Error', error);\r\n                }\r\n            }\r\n\r\n            (function(looper) {\r\n                if (!self.manuallyStopped && mediaRecorder && mediaRecorder.state === 'inactive') {\r\n                    delete config.timeslice;\r\n\r\n                    // 10 minutes, enough?\r\n                    mediaRecorder.start(10 * 60 * 1000);\r\n                    return;\r\n                }\r\n\r\n                setTimeout(looper, 1000);\r\n            })();\r\n\r\n            if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\r\n                mediaRecorder.stop();\r\n            }\r\n        };\r\n\r\n        if (typeof config.timeSlice === 'number') {\r\n            updateTimeStamp();\r\n            mediaRecorder.start(config.timeSlice);\r\n        } else {\r\n            // default is 60 minutes; enough?\r\n            // use config => {timeSlice: 1000} otherwise\r\n\r\n            mediaRecorder.start(3.6e+6);\r\n        }\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback(); // old code\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @property {Array} timestamps - Array of time stamps\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * console.log(recorder.timestamps);\r\n     */\r\n    this.timestamps = [];\r\n\r\n    function updateTimeStamp() {\r\n        self.timestamps.push(new Date().getTime());\r\n\r\n        if (typeof config.onTimeStamp === 'function') {\r\n            config.onTimeStamp(self.timestamps[self.timestamps.length - 1], self.timestamps);\r\n        }\r\n    }\r\n\r\n    function getMimeType(secondObject) {\r\n        if (mediaRecorder && mediaRecorder.mimeType) {\r\n            return mediaRecorder.mimeType;\r\n        }\r\n\r\n        return secondObject.mimeType || 'video/webm';\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        self.manuallyStopped = true; // used inside the mediaRecorder.onerror\r\n\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        this.recordingCallback = callback;\r\n\r\n        if (mediaRecorder.state === 'recording') {\r\n            mediaRecorder.stop();\r\n        }\r\n\r\n        if (typeof config.timeSlice === 'number') {\r\n            setTimeout(function() {\r\n                self.blob = new Blob(arrayOfBlobs, {\r\n                    type: getMimeType(config)\r\n                });\r\n\r\n                self.recordingCallback(self.blob);\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        if (mediaRecorder.state === 'recording') {\r\n            mediaRecorder.pause();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        if (mediaRecorder.state === 'paused') {\r\n            mediaRecorder.resume();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (mediaRecorder && mediaRecorder.state === 'recording') {\r\n            self.stop(clearRecordedDataCB);\r\n        }\r\n\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        arrayOfBlobs = [];\r\n        mediaRecorder = null;\r\n        self.timestamps = [];\r\n    }\r\n\r\n    // Reference to \"MediaRecorder\" object\r\n    var mediaRecorder;\r\n\r\n    /**\r\n     * Access to native MediaRecorder API\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @instance\r\n     * @example\r\n     * var internal = recorder.getInternalRecorder();\r\n     * internal.ondataavailable = function() {}; // override\r\n     * internal.stream, internal.onpause, internal.onstop, etc.\r\n     * @returns {Object} Returns internal recording object.\r\n     */\r\n    this.getInternalRecorder = function() {\r\n        return mediaRecorder;\r\n    };\r\n\r\n    function isMediaStreamActive() {\r\n        if ('active' in mediaStream) {\r\n            if (!mediaStream.active) {\r\n                return false;\r\n            }\r\n        } else if ('ended' in mediaStream) { // old hack\r\n            if (mediaStream.ended) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.stop(function() {\r\n     *     var blob = recorder.blob;\r\n     * });\r\n     */\r\n    this.blob = null;\r\n\r\n\r\n    /**\r\n     * Get MediaRecorder readonly state.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var state = recorder.getState();\r\n     * @returns {String} Returns recording state.\r\n     */\r\n    this.getState = function() {\r\n        if (!mediaRecorder) {\r\n            return 'inactive';\r\n        }\r\n\r\n        return mediaRecorder.state || 'inactive';\r\n    };\r\n\r\n    // list of all recording states\r\n    var allStates = [];\r\n\r\n    /**\r\n     * Get MediaRecorder all recording states.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var state = recorder.getAllStates();\r\n     * @returns {Array} Returns all recording states\r\n     */\r\n    this.getAllStates = function() {\r\n        return allStates;\r\n    };\r\n\r\n    // if any Track within the MediaStream is muted or not enabled at any time, \r\n    // the browser will only record black frames \r\n    // or silence since that is the content produced by the Track\r\n    // so we need to stopRecording as soon as any single track ends.\r\n    if (typeof config.checkForInactiveTracks === 'undefined') {\r\n        config.checkForInactiveTracks = false; // disable to minimize CPU usage\r\n    }\r\n\r\n    var self = this;\r\n\r\n    // this method checks if media stream is stopped\r\n    // or if any track is ended.\r\n    (function looper() {\r\n        if (!mediaRecorder || config.checkForInactiveTracks === false) {\r\n            return;\r\n        }\r\n\r\n        if (isMediaStreamActive() === false) {\r\n            if (!config.disableLogs) {\r\n                console.log('MediaStream seems stopped.');\r\n            }\r\n            self.stop();\r\n            return;\r\n        }\r\n\r\n        setTimeout(looper, 1000); // check every second\r\n    })();\r\n\r\n    // for debugging\r\n    this.name = 'MediaStreamRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\r\n}\n\r\n// source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\r\n// https://github.com/mattdiamond/Recorderjs#license-mit\r\n// ______________________\r\n// StereoAudioRecorder.js\r\n\r\n/**\r\n * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\r\n * @summary JavaScript standalone object for stereo audio recording.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef StereoAudioRecorder\r\n * @class\r\n * @example\r\n * var recorder = new StereoAudioRecorder(MediaStream, {\r\n *     sampleRate: 44100,\r\n *     bufferSize: 4096\r\n * });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\r\n */\r\n\r\nfunction StereoAudioRecorder(mediaStream, config) {\r\n    if (!getTracks(mediaStream, 'audio').length) {\r\n        throw 'Your stream has no audio tracks.';\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    var self = this;\r\n\r\n    // variables\r\n    var leftchannel = [];\r\n    var rightchannel = [];\r\n    var recording = false;\r\n    var recordingLength = 0;\r\n    var jsAudioNode;\r\n\r\n    var numberOfAudioChannels = 2;\r\n\r\n    /**\r\n     * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\r\n     * @property {number} desiredSampRate - Desired Bits per sample * 1000\r\n     * @memberof StereoAudioRecorder\r\n     * @instance\r\n     * @example\r\n     * var recorder = StereoAudioRecorder(mediaStream, {\r\n     *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\r\n     * });\r\n     */\r\n    var desiredSampRate = config.desiredSampRate;\r\n\r\n    // backward compatibility\r\n    if (config.leftChannel === true) {\r\n        numberOfAudioChannels = 1;\r\n    }\r\n\r\n    if (config.numberOfAudioChannels === 1) {\r\n        numberOfAudioChannels = 1;\r\n    }\r\n\r\n    if (!numberOfAudioChannels || numberOfAudioChannels < 1) {\r\n        numberOfAudioChannels = 2;\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('StereoAudioRecorder is set to record number of channels: ' + numberOfAudioChannels);\r\n    }\r\n\r\n    // if any Track within the MediaStream is muted or not enabled at any time, \r\n    // the browser will only record black frames \r\n    // or silence since that is the content produced by the Track\r\n    // so we need to stopRecording as soon as any single track ends.\r\n    if (typeof config.checkForInactiveTracks === 'undefined') {\r\n        config.checkForInactiveTracks = true;\r\n    }\r\n\r\n    function isMediaStreamActive() {\r\n        if (config.checkForInactiveTracks === false) {\r\n            // always return \"true\"\r\n            return true;\r\n        }\r\n\r\n        if ('active' in mediaStream) {\r\n            if (!mediaStream.active) {\r\n                return false;\r\n            }\r\n        } else if ('ended' in mediaStream) { // old hack\r\n            if (mediaStream.ended) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (isMediaStreamActive() === false) {\r\n            throw 'Please make sure MediaStream is active.';\r\n        }\r\n\r\n        resetVariables();\r\n\r\n        isAudioProcessStarted = isPaused = false;\r\n        recording = true;\r\n\r\n        if (typeof config.timeSlice !== 'undefined') {\r\n            looper();\r\n        }\r\n    };\r\n\r\n    function mergeLeftRightBuffers(config, callback) {\r\n        function mergeAudioBuffers(config, cb) {\r\n            var numberOfAudioChannels = config.numberOfAudioChannels;\r\n\r\n            // todo: \"slice(0)\" --- is it causes loop? Should be removed?\r\n            var leftBuffers = config.leftBuffers.slice(0);\r\n            var rightBuffers = config.rightBuffers.slice(0);\r\n            var sampleRate = config.sampleRate;\r\n            var internalInterleavedLength = config.internalInterleavedLength;\r\n            var desiredSampRate = config.desiredSampRate;\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\r\n                rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\r\n\r\n                if (desiredSampRate) {\r\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\r\n                    rightBuffers = interpolateArray(rightBuffers, desiredSampRate, sampleRate);\r\n                }\r\n            }\r\n\r\n            if (numberOfAudioChannels === 1) {\r\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\r\n\r\n                if (desiredSampRate) {\r\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\r\n                }\r\n            }\r\n\r\n            // set sample rate as desired sample rate\r\n            if (desiredSampRate) {\r\n                sampleRate = desiredSampRate;\r\n            }\r\n\r\n            // for changing the sampling rate, reference:\r\n            // http://stackoverflow.com/a/28977136/552182\r\n            function interpolateArray(data, newSampleRate, oldSampleRate) {\r\n                var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));\r\n                var newData = [];\r\n                var springFactor = Number((data.length - 1) / (fitCount - 1));\r\n                newData[0] = data[0];\r\n                for (var i = 1; i < fitCount - 1; i++) {\r\n                    var tmp = i * springFactor;\r\n                    var before = Number(Math.floor(tmp)).toFixed();\r\n                    var after = Number(Math.ceil(tmp)).toFixed();\r\n                    var atPoint = tmp - before;\r\n                    newData[i] = linearInterpolate(data[before], data[after], atPoint);\r\n                }\r\n                newData[fitCount - 1] = data[data.length - 1];\r\n                return newData;\r\n            }\r\n\r\n            function linearInterpolate(before, after, atPoint) {\r\n                return before + (after - before) * atPoint;\r\n            }\r\n\r\n            function mergeBuffers(channelBuffer, rLength) {\r\n                var result = new Float64Array(rLength);\r\n                var offset = 0;\r\n                var lng = channelBuffer.length;\r\n\r\n                for (var i = 0; i < lng; i++) {\r\n                    var buffer = channelBuffer[i];\r\n                    result.set(buffer, offset);\r\n                    offset += buffer.length;\r\n                }\r\n\r\n                return result;\r\n            }\r\n\r\n            function interleave(leftChannel, rightChannel) {\r\n                var length = leftChannel.length + rightChannel.length;\r\n\r\n                var result = new Float64Array(length);\r\n\r\n                var inputIndex = 0;\r\n\r\n                for (var index = 0; index < length;) {\r\n                    result[index++] = leftChannel[inputIndex];\r\n                    result[index++] = rightChannel[inputIndex];\r\n                    inputIndex++;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function writeUTFBytes(view, offset, string) {\r\n                var lng = string.length;\r\n                for (var i = 0; i < lng; i++) {\r\n                    view.setUint8(offset + i, string.charCodeAt(i));\r\n                }\r\n            }\r\n\r\n            // interleave both channels together\r\n            var interleaved;\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                interleaved = interleave(leftBuffers, rightBuffers);\r\n            }\r\n\r\n            if (numberOfAudioChannels === 1) {\r\n                interleaved = leftBuffers;\r\n            }\r\n\r\n            var interleavedLength = interleaved.length;\r\n\r\n            // create wav file\r\n            var resultingBufferLength = 44 + interleavedLength * 2;\r\n\r\n            var buffer = new ArrayBuffer(resultingBufferLength);\r\n\r\n            var view = new DataView(buffer);\r\n\r\n            // RIFF chunk descriptor/identifier \r\n            writeUTFBytes(view, 0, 'RIFF');\r\n\r\n            // RIFF chunk length\r\n            // changed \"44\" to \"36\" via #401\r\n            view.setUint32(4, 36 + interleavedLength * 2, true);\r\n\r\n            // RIFF type \r\n            writeUTFBytes(view, 8, 'WAVE');\r\n\r\n            // format chunk identifier \r\n            // FMT sub-chunk\r\n            writeUTFBytes(view, 12, 'fmt ');\r\n\r\n            // format chunk length \r\n            view.setUint32(16, 16, true);\r\n\r\n            // sample format (raw)\r\n            view.setUint16(20, 1, true);\r\n\r\n            // stereo (2 channels)\r\n            view.setUint16(22, numberOfAudioChannels, true);\r\n\r\n            // sample rate \r\n            view.setUint32(24, sampleRate, true);\r\n\r\n            // byte rate (sample rate * block align)\r\n            view.setUint32(28, sampleRate * 2, true);\r\n\r\n            // block align (channel count * bytes per sample) \r\n            view.setUint16(32, numberOfAudioChannels * 2, true);\r\n\r\n            // bits per sample \r\n            view.setUint16(34, 16, true);\r\n\r\n            // data sub-chunk\r\n            // data chunk identifier \r\n            writeUTFBytes(view, 36, 'data');\r\n\r\n            // data chunk length \r\n            view.setUint32(40, interleavedLength * 2, true);\r\n\r\n            // write the PCM samples\r\n            var lng = interleavedLength;\r\n            var index = 44;\r\n            var volume = 1;\r\n            for (var i = 0; i < lng; i++) {\r\n                view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\r\n                index += 2;\r\n            }\r\n\r\n            if (cb) {\r\n                return cb({\r\n                    buffer: buffer,\r\n                    view: view\r\n                });\r\n            }\r\n\r\n            postMessage({\r\n                buffer: buffer,\r\n                view: view\r\n            });\r\n        }\r\n\r\n        if (config.noWorker) {\r\n            mergeAudioBuffers(config, function(data) {\r\n                callback(data.buffer, data.view);\r\n            });\r\n            return;\r\n        }\r\n\r\n\r\n        var webWorker = processInWebWorker(mergeAudioBuffers);\r\n\r\n        webWorker.onmessage = function(event) {\r\n            callback(event.data.buffer, event.data.view);\r\n\r\n            // release memory\r\n            URL.revokeObjectURL(webWorker.workerURL);\r\n\r\n            // kill webworker (or Chrome will kill your page after ~25 calls)\r\n            webWorker.terminate();\r\n        };\r\n\r\n        webWorker.postMessage(config);\r\n    }\r\n\r\n    function processInWebWorker(_function) {\r\n        var workerURL = URL.createObjectURL(new Blob([_function.toString(),\r\n            ';this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n        ], {\r\n            type: 'application/javascript'\r\n        }));\r\n\r\n        var worker = new Worker(workerURL);\r\n        worker.workerURL = workerURL;\r\n        return worker;\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        // stop recording\r\n        recording = false;\r\n\r\n        mergeLeftRightBuffers({\r\n            desiredSampRate: desiredSampRate,\r\n            sampleRate: sampleRate,\r\n            numberOfAudioChannels: numberOfAudioChannels,\r\n            internalInterleavedLength: recordingLength,\r\n            leftBuffers: leftchannel,\r\n            rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel,\r\n            noWorker: config.noWorker\r\n        }, function(buffer, view) {\r\n            /**\r\n             * @property {Blob} blob - The recorded blob object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\r\n            self.blob = new Blob([view], {\r\n                type: 'audio/wav'\r\n            });\r\n\r\n            /**\r\n             * @property {ArrayBuffer} buffer - The recorded buffer object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var buffer = recorder.buffer;\r\n             * });\r\n             */\r\n            self.buffer = new ArrayBuffer(view.buffer.byteLength);\r\n\r\n            /**\r\n             * @property {DataView} view - The recorded data-view object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var view = recorder.view;\r\n             * });\r\n             */\r\n            self.view = view;\r\n\r\n            self.sampleRate = desiredSampRate || sampleRate;\r\n            self.bufferSize = bufferSize;\r\n\r\n            // recorded audio length\r\n            self.length = recordingLength;\r\n\r\n            isAudioProcessStarted = false;\r\n\r\n            if (callback) {\r\n                callback(self.blob);\r\n            }\r\n        });\r\n    };\r\n\r\n    if (typeof RecordRTC.Storage === 'undefined') {\r\n        RecordRTC.Storage = {\r\n            AudioContextConstructor: null,\r\n            AudioContext: window.AudioContext || window.webkitAudioContext\r\n        };\r\n    }\r\n\r\n    if (!RecordRTC.Storage.AudioContextConstructor || RecordRTC.Storage.AudioContextConstructor.state === 'closed') {\r\n        RecordRTC.Storage.AudioContextConstructor = new RecordRTC.Storage.AudioContext();\r\n    }\r\n\r\n    var context = RecordRTC.Storage.AudioContextConstructor;\r\n\r\n    // creates an audio node from the microphone incoming stream\r\n    var audioInput = context.createMediaStreamSource(mediaStream);\r\n\r\n    var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\r\n\r\n    /**\r\n     * From the spec: This value controls how frequently the audioprocess event is\r\n     * dispatched and how many sample-frames need to be processed each call.\r\n     * Lower values for buffer size will result in a lower (better) latency.\r\n     * Higher values will be necessary to avoid audio breakup and glitches\r\n     * The size of the buffer (in sample-frames) which needs to\r\n     * be processed each time onprocessaudio is called.\r\n     * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\r\n     * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder = new StereoAudioRecorder(mediaStream, {\r\n     *     bufferSize: 4096\r\n     * });\r\n     */\r\n\r\n    // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\r\n    var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\r\n\r\n    if (legalBufferValues.indexOf(bufferSize) === -1) {\r\n        if (!config.disableLogs) {\r\n            console.log('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\r\n        }\r\n    }\r\n\r\n    if (context.createJavaScriptNode) {\r\n        jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\r\n    } else if (context.createScriptProcessor) {\r\n        jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\r\n    } else {\r\n        throw 'WebAudio API has no support on this browser.';\r\n    }\r\n\r\n    // connect the stream to the script processor\r\n    audioInput.connect(jsAudioNode);\r\n\r\n    if (!config.bufferSize) {\r\n        bufferSize = jsAudioNode.bufferSize; // device buffer-size\r\n    }\r\n\r\n    /**\r\n     * The sample rate (in sample-frames per second) at which the\r\n     * AudioContext handles audio. It is assumed that all AudioNodes\r\n     * in the context run at this rate. In making this assumption,\r\n     * sample-rate converters or \"varispeed\" processors are not supported\r\n     * in real-time processing.\r\n     * The sampleRate parameter describes the sample-rate of the\r\n     * linear PCM audio data in the buffer in sample-frames per second.\r\n     * An implementation must support sample-rates in at least\r\n     * the range 22050 to 96000.\r\n     * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder = new StereoAudioRecorder(mediaStream, {\r\n     *     sampleRate: 44100\r\n     * });\r\n     */\r\n    var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\r\n\r\n    if (sampleRate < 22050 || sampleRate > 96000) {\r\n        // Ref: http://stackoverflow.com/a/26303918/552182\r\n        if (!config.disableLogs) {\r\n            console.log('sample-rate must be under range 22050 and 96000.');\r\n        }\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        if (config.desiredSampRate) {\r\n            console.log('Desired sample-rate: ' + config.desiredSampRate);\r\n        }\r\n    }\r\n\r\n    var isPaused = false;\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPaused = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (isMediaStreamActive() === false) {\r\n            throw 'Please make sure MediaStream is active.';\r\n        }\r\n\r\n        if (!recording) {\r\n            if (!config.disableLogs) {\r\n                console.log('Seems recording has been restarted.');\r\n            }\r\n            this.record();\r\n            return;\r\n        }\r\n\r\n        isPaused = false;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        config.checkForInactiveTracks = false;\r\n\r\n        if (recording) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function resetVariables() {\r\n        leftchannel = [];\r\n        rightchannel = [];\r\n        recordingLength = 0;\r\n        isAudioProcessStarted = false;\r\n        recording = false;\r\n        isPaused = false;\r\n        context = null;\r\n\r\n        self.leftchannel = leftchannel;\r\n        self.rightchannel = rightchannel;\r\n        self.numberOfAudioChannels = numberOfAudioChannels;\r\n        self.desiredSampRate = desiredSampRate;\r\n        self.sampleRate = sampleRate;\r\n        self.recordingLength = recordingLength;\r\n\r\n        intervalsBasedBuffers = {\r\n            left: [],\r\n            right: [],\r\n            recordingLength: 0\r\n        };\r\n    }\r\n\r\n    function clearRecordedDataCB() {\r\n        if (jsAudioNode) {\r\n            jsAudioNode.onaudioprocess = null;\r\n            jsAudioNode.disconnect();\r\n            jsAudioNode = null;\r\n        }\r\n\r\n        if (audioInput) {\r\n            audioInput.disconnect();\r\n            audioInput = null;\r\n        }\r\n\r\n        resetVariables();\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'StereoAudioRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var isAudioProcessStarted = false;\r\n\r\n    function onAudioProcessDataAvailable(e) {\r\n        if (isPaused) {\r\n            return;\r\n        }\r\n\r\n        if (isMediaStreamActive() === false) {\r\n            if (!config.disableLogs) {\r\n                console.log('MediaStream seems stopped.');\r\n            }\r\n            jsAudioNode.disconnect();\r\n            recording = false;\r\n        }\r\n\r\n        if (!recording) {\r\n            if (audioInput) {\r\n                audioInput.disconnect();\r\n                audioInput = null;\r\n            }\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * This method is called on \"onaudioprocess\" event's first invocation.\r\n         * @method {function} onAudioProcessStarted\r\n         * @memberof StereoAudioRecorder\r\n         * @example\r\n         * recorder.onAudioProcessStarted: function() { };\r\n         */\r\n        if (!isAudioProcessStarted) {\r\n            isAudioProcessStarted = true;\r\n            if (config.onAudioProcessStarted) {\r\n                config.onAudioProcessStarted();\r\n            }\r\n\r\n            if (config.initCallback) {\r\n                config.initCallback();\r\n            }\r\n        }\r\n\r\n        var left = e.inputBuffer.getChannelData(0);\r\n\r\n        // we clone the samples\r\n        var chLeft = new Float32Array(left);\r\n        leftchannel.push(chLeft);\r\n\r\n        if (numberOfAudioChannels === 2) {\r\n            var right = e.inputBuffer.getChannelData(1);\r\n            var chRight = new Float32Array(right);\r\n            rightchannel.push(chRight);\r\n        }\r\n\r\n        recordingLength += bufferSize;\r\n\r\n        // export raw PCM\r\n        self.recordingLength = recordingLength;\r\n\r\n        if (typeof config.timeSlice !== 'undefined') {\r\n            intervalsBasedBuffers.recordingLength += bufferSize;\r\n            intervalsBasedBuffers.left.push(chLeft);\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                intervalsBasedBuffers.right.push(chRight);\r\n            }\r\n        }\r\n    }\r\n\r\n    jsAudioNode.onaudioprocess = onAudioProcessDataAvailable;\r\n\r\n    // to prevent self audio to be connected with speakers\r\n    if (context.createMediaStreamDestination) {\r\n        jsAudioNode.connect(context.createMediaStreamDestination());\r\n    } else {\r\n        jsAudioNode.connect(context.destination);\r\n    }\r\n\r\n    // export raw PCM\r\n    this.leftchannel = leftchannel;\r\n    this.rightchannel = rightchannel;\r\n    this.numberOfAudioChannels = numberOfAudioChannels;\r\n    this.desiredSampRate = desiredSampRate;\r\n    this.sampleRate = sampleRate;\r\n    self.recordingLength = recordingLength;\r\n\r\n    // helper for intervals based blobs\r\n    var intervalsBasedBuffers = {\r\n        left: [],\r\n        right: [],\r\n        recordingLength: 0\r\n    };\r\n\r\n    // this looper is used to support intervals based blobs (via timeSlice+ondataavailable)\r\n    function looper() {\r\n        if (!recording || typeof config.ondataavailable !== 'function' || typeof config.timeSlice === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (intervalsBasedBuffers.left.length) {\r\n            mergeLeftRightBuffers({\r\n                desiredSampRate: desiredSampRate,\r\n                sampleRate: sampleRate,\r\n                numberOfAudioChannels: numberOfAudioChannels,\r\n                internalInterleavedLength: intervalsBasedBuffers.recordingLength,\r\n                leftBuffers: intervalsBasedBuffers.left,\r\n                rightBuffers: numberOfAudioChannels === 1 ? [] : intervalsBasedBuffers.right\r\n            }, function(buffer, view) {\r\n                var blob = new Blob([view], {\r\n                    type: 'audio/wav'\r\n                });\r\n                config.ondataavailable(blob);\r\n\r\n                setTimeout(looper, config.timeSlice);\r\n            });\r\n\r\n            intervalsBasedBuffers = {\r\n                left: [],\r\n                right: [],\r\n                recordingLength: 0\r\n            };\r\n        } else {\r\n            setTimeout(looper, config.timeSlice);\r\n        }\r\n    }\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\r\n}\r\n\r\n// _________________\r\n// CanvasRecorder.js\r\n\r\n/**\r\n * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\r\n * @summary HTML2Canvas recording into video WebM.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef CanvasRecorder\r\n * @class\r\n * @example\r\n * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\r\n * @param {object} config - {disableLogs:true, initCallback: function}\r\n */\r\n\r\nfunction CanvasRecorder(htmlElement, config) {\r\n    if (typeof html2canvas === 'undefined') {\r\n        throw 'Please link: https://www.webrtc-experiment.com/screenshot.js';\r\n    }\r\n\r\n    config = config || {};\r\n    if (!config.frameInterval) {\r\n        config.frameInterval = 10;\r\n    }\r\n\r\n    // via DetectRTC.js\r\n    var isCanvasSupportsStreamCapturing = false;\r\n    ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function(item) {\r\n        if (item in document.createElement('canvas')) {\r\n            isCanvasSupportsStreamCapturing = true;\r\n        }\r\n    });\r\n\r\n    var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\r\n\r\n    var chromeVersion = 50;\r\n    var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\r\n    if (_isChrome && matchArray && matchArray[2]) {\r\n        chromeVersion = parseInt(matchArray[2], 10);\r\n    }\r\n\r\n    if (_isChrome && chromeVersion < 52) {\r\n        isCanvasSupportsStreamCapturing = false;\r\n    }\r\n\r\n    if (config.useWhammyRecorder) {\r\n        isCanvasSupportsStreamCapturing = false;\r\n    }\r\n\r\n    var globalCanvas, mediaStreamRecorder;\r\n\r\n    if (isCanvasSupportsStreamCapturing) {\r\n        if (!config.disableLogs) {\r\n            console.log('Your browser supports both MediRecorder API and canvas.captureStream!');\r\n        }\r\n\r\n        if (htmlElement instanceof HTMLCanvasElement) {\r\n            globalCanvas = htmlElement;\r\n        } else if (htmlElement instanceof CanvasRenderingContext2D) {\r\n            globalCanvas = htmlElement.canvas;\r\n        } else {\r\n            throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\r\n        }\r\n    } else if (!!navigator.mozGetUserMedia) {\r\n        if (!config.disableLogs) {\r\n            console.error('Canvas recording is NOT supported in Firefox.');\r\n        }\r\n    }\r\n\r\n    var isRecording;\r\n\r\n    /**\r\n     * This method records Canvas.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        isRecording = true;\r\n\r\n        if (isCanvasSupportsStreamCapturing && !config.useWhammyRecorder) {\r\n            // CanvasCaptureMediaStream\r\n            var canvasMediaStream;\r\n            if ('captureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\r\n            } else if ('mozCaptureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.mozCaptureStream(25);\r\n            } else if ('webkitCaptureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.webkitCaptureStream(25);\r\n            }\r\n\r\n            try {\r\n                var mdStream = new MediaStream();\r\n                mdStream.addTrack(getTracks(canvasMediaStream, 'video')[0]);\r\n                canvasMediaStream = mdStream;\r\n            } catch (e) {}\r\n\r\n            if (!canvasMediaStream) {\r\n                throw 'captureStream API are NOT available.';\r\n            }\r\n\r\n            // Note: Jan 18, 2016 status is that, \r\n            // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\r\n            mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\r\n                mimeType: config.mimeType || 'video/webm'\r\n            });\r\n            mediaStreamRecorder.record();\r\n        } else {\r\n            whammy.frames = [];\r\n            lastTime = new Date().getTime();\r\n            drawCanvasFrame();\r\n        }\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    this.getWebPImages = function(callback) {\r\n        if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        var framesLength = whammy.frames.length;\r\n        whammy.frames.forEach(function(frame, idx) {\r\n            var framesRemaining = framesLength - idx;\r\n            if (!config.disableLogs) {\r\n                console.log(framesRemaining + '/' + framesLength + ' frames remaining');\r\n            }\r\n\r\n            if (config.onEncodingCallback) {\r\n                config.onEncodingCallback(framesRemaining, framesLength);\r\n            }\r\n\r\n            var webp = frame.image.toDataURL('image/webp', 1);\r\n            whammy.frames[idx].image = webp;\r\n        });\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Generating WebM');\r\n        }\r\n\r\n        callback();\r\n    };\r\n\r\n    /**\r\n     * This method stops recording Canvas.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        isRecording = false;\r\n\r\n        var that = this;\r\n\r\n        if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\r\n            mediaStreamRecorder.stop(callback);\r\n            return;\r\n        }\r\n\r\n        this.getWebPImages(function() {\r\n            /**\r\n             * @property {Blob} blob - Recorded frames in video/webm blob.\r\n             * @memberof CanvasRecorder\r\n             * @example\r\n             * recorder.stop(function() {\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\r\n            whammy.compile(function(blob) {\r\n                if (!config.disableLogs) {\r\n                    console.log('Recording finished!');\r\n                }\r\n\r\n                that.blob = blob;\r\n\r\n                if (that.blob.forEach) {\r\n                    that.blob = new Blob([], {\r\n                        type: 'video/webm'\r\n                    });\r\n                }\r\n\r\n                if (callback) {\r\n                    callback(that.blob);\r\n                }\r\n\r\n                whammy.frames = [];\r\n            });\r\n        });\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n\r\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\r\n            mediaStreamRecorder.pause();\r\n            return;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n\r\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\r\n            mediaStreamRecorder.resume();\r\n            return;\r\n        }\r\n\r\n        if (!isRecording) {\r\n            this.record();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (isRecording) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        whammy.frames = [];\r\n        isRecording = false;\r\n        isPausedRecording = false;\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'CanvasRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    function cloneCanvas() {\r\n        //create a new canvas\r\n        var newCanvas = document.createElement('canvas');\r\n        var context = newCanvas.getContext('2d');\r\n\r\n        //set dimensions\r\n        newCanvas.width = htmlElement.width;\r\n        newCanvas.height = htmlElement.height;\r\n\r\n        //apply the old canvas to the new one\r\n        context.drawImage(htmlElement, 0, 0);\r\n\r\n        //return the new canvas\r\n        return newCanvas;\r\n    }\r\n\r\n    function drawCanvasFrame() {\r\n        if (isPausedRecording) {\r\n            lastTime = new Date().getTime();\r\n            return setTimeout(drawCanvasFrame, 500);\r\n        }\r\n\r\n        if (htmlElement.nodeName.toLowerCase() === 'canvas') {\r\n            var duration = new Date().getTime() - lastTime;\r\n            // via #206, by Jack i.e. @Seymourr\r\n            lastTime = new Date().getTime();\r\n\r\n            whammy.frames.push({\r\n                image: cloneCanvas(),\r\n                duration: duration\r\n            });\r\n\r\n            if (isRecording) {\r\n                setTimeout(drawCanvasFrame, config.frameInterval);\r\n            }\r\n            return;\r\n        }\r\n\r\n        html2canvas(htmlElement, {\r\n            grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\r\n            onrendered: function(canvas) {\r\n                var duration = new Date().getTime() - lastTime;\r\n                if (!duration) {\r\n                    return setTimeout(drawCanvasFrame, config.frameInterval);\r\n                }\r\n\r\n                // via #206, by Jack i.e. @Seymourr\r\n                lastTime = new Date().getTime();\r\n\r\n                whammy.frames.push({\r\n                    image: canvas.toDataURL('image/webp', 1),\r\n                    duration: duration\r\n                });\r\n\r\n                if (isRecording) {\r\n                    setTimeout(drawCanvasFrame, config.frameInterval);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    var lastTime = new Date().getTime();\r\n\r\n    var whammy = new Whammy.Video(100);\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.CanvasRecorder = CanvasRecorder;\r\n}\n\r\n// _________________\r\n// WhammyRecorder.js\r\n\r\n/**\r\n * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\r\n * @summary Video recording feature in Chrome.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef WhammyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WhammyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction WhammyRecorder(mediaStream, config) {\r\n\r\n    config = config || {};\r\n\r\n    if (!config.frameInterval) {\r\n        config.frameInterval = 10;\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('Using frames-interval:', config.frameInterval);\r\n    }\r\n\r\n    /**\r\n     * This method records video.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (!config.width) {\r\n            config.width = 320;\r\n        }\r\n\r\n        if (!config.height) {\r\n            config.height = 240;\r\n        }\r\n\r\n        if (!config.video) {\r\n            config.video = {\r\n                width: config.width,\r\n                height: config.height\r\n            };\r\n        }\r\n\r\n        if (!config.canvas) {\r\n            config.canvas = {\r\n                width: config.width,\r\n                height: config.height\r\n            };\r\n        }\r\n\r\n        canvas.width = config.canvas.width || 320;\r\n        canvas.height = config.canvas.height || 240;\r\n\r\n        context = canvas.getContext('2d');\r\n\r\n        // setting defaults\r\n        if (config.video && config.video instanceof HTMLVideoElement) {\r\n            video = config.video.cloneNode();\r\n\r\n            if (config.initCallback) {\r\n                config.initCallback();\r\n            }\r\n        } else {\r\n            video = document.createElement('video');\r\n\r\n            setSrcObject(mediaStream, video);\r\n\r\n            video.onloadedmetadata = function() { // \"onloadedmetadata\" may NOT work in FF?\r\n                if (config.initCallback) {\r\n                    config.initCallback();\r\n                }\r\n            };\r\n\r\n            video.width = config.video.width;\r\n            video.height = config.video.height;\r\n        }\r\n\r\n        video.muted = true;\r\n        video.play();\r\n\r\n        lastTime = new Date().getTime();\r\n        whammy = new Whammy.Video();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('canvas resolutions', canvas.width, '*', canvas.height);\r\n            console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\r\n        }\r\n\r\n        drawFrames(config.frameInterval);\r\n    };\r\n\r\n    /**\r\n     * Draw and push frames to Whammy\r\n     * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\r\n     */\r\n    function drawFrames(frameInterval) {\r\n        frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\r\n\r\n        var duration = new Date().getTime() - lastTime;\r\n        if (!duration) {\r\n            return setTimeout(drawFrames, frameInterval, frameInterval);\r\n        }\r\n\r\n        if (isPausedRecording) {\r\n            lastTime = new Date().getTime();\r\n            return setTimeout(drawFrames, 100);\r\n        }\r\n\r\n        // via #206, by Jack i.e. @Seymourr\r\n        lastTime = new Date().getTime();\r\n\r\n        if (video.paused) {\r\n            // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\r\n            // Tweak for Android Chrome\r\n            video.play();\r\n        }\r\n\r\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        whammy.frames.push({\r\n            duration: duration,\r\n            image: canvas.toDataURL('image/webp')\r\n        });\r\n\r\n        if (!isStopDrawing) {\r\n            setTimeout(drawFrames, frameInterval, frameInterval);\r\n        }\r\n    }\r\n\r\n    function asyncLoop(o) {\r\n        var i = -1,\r\n            length = o.length;\r\n\r\n        (function loop() {\r\n            i++;\r\n            if (i === length) {\r\n                o.callback();\r\n                return;\r\n            }\r\n\r\n            // \"setTimeout\" added by Jim McLeod\r\n            setTimeout(function() {\r\n                o.functionToLoop(loop, i);\r\n            }, 1);\r\n        })();\r\n    }\r\n\r\n\r\n    /**\r\n     * remove black frames from the beginning to the specified frame\r\n     * @param {Array} _frames - array of frames to be checked\r\n     * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\r\n     * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\r\n     * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\r\n     * @returns {Array} - array of frames\r\n     */\r\n    // pull#293 by @volodalexey\r\n    function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, callback) {\r\n        var localCanvas = document.createElement('canvas');\r\n        localCanvas.width = canvas.width;\r\n        localCanvas.height = canvas.height;\r\n        var context2d = localCanvas.getContext('2d');\r\n        var resultFrames = [];\r\n\r\n        var checkUntilNotBlack = _framesToCheck === -1;\r\n        var endCheckFrame = (_framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length) ?\r\n            _framesToCheck : _frames.length;\r\n        var sampleColor = {\r\n            r: 0,\r\n            g: 0,\r\n            b: 0\r\n        };\r\n        var maxColorDifference = Math.sqrt(\r\n            Math.pow(255, 2) +\r\n            Math.pow(255, 2) +\r\n            Math.pow(255, 2)\r\n        );\r\n        var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\r\n        var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\r\n        var doNotCheckNext = false;\r\n\r\n        asyncLoop({\r\n            length: endCheckFrame,\r\n            functionToLoop: function(loop, f) {\r\n                var matchPixCount, endPixCheck, maxPixCount;\r\n\r\n                var finishImage = function() {\r\n                    if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {\r\n                        // console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\r\n                    } else {\r\n                        // console.log('frame is passed : ' + f);\r\n                        if (checkUntilNotBlack) {\r\n                            doNotCheckNext = true;\r\n                        }\r\n                        resultFrames.push(_frames[f]);\r\n                    }\r\n                    loop();\r\n                };\r\n\r\n                if (!doNotCheckNext) {\r\n                    var image = new Image();\r\n                    image.onload = function() {\r\n                        context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n                        var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\r\n                        matchPixCount = 0;\r\n                        endPixCheck = imageData.data.length;\r\n                        maxPixCount = imageData.data.length / 4;\r\n\r\n                        for (var pix = 0; pix < endPixCheck; pix += 4) {\r\n                            var currentColor = {\r\n                                r: imageData.data[pix],\r\n                                g: imageData.data[pix + 1],\r\n                                b: imageData.data[pix + 2]\r\n                            };\r\n                            var colorDifference = Math.sqrt(\r\n                                Math.pow(currentColor.r - sampleColor.r, 2) +\r\n                                Math.pow(currentColor.g - sampleColor.g, 2) +\r\n                                Math.pow(currentColor.b - sampleColor.b, 2)\r\n                            );\r\n                            // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\r\n                            if (colorDifference <= maxColorDifference * pixTolerance) {\r\n                                matchPixCount++;\r\n                            }\r\n                        }\r\n                        finishImage();\r\n                    };\r\n                    image.src = _frames[f].image;\r\n                } else {\r\n                    finishImage();\r\n                }\r\n            },\r\n            callback: function() {\r\n                resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\r\n\r\n                if (resultFrames.length <= 0) {\r\n                    // at least one last frame should be available for next manipulation\r\n                    // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\r\n                    resultFrames.push(_frames[_frames.length - 1]);\r\n                }\r\n                callback(resultFrames);\r\n            }\r\n        });\r\n    }\r\n\r\n    var isStopDrawing = false;\r\n\r\n    /**\r\n     * This method stops recording video.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        isStopDrawing = true;\r\n\r\n        var _this = this;\r\n        // analyse of all frames takes some time!\r\n        setTimeout(function() {\r\n            // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\r\n            // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\r\n            // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\r\n            dropBlackFrames(whammy.frames, -1, null, null, function(frames) {\r\n                whammy.frames = frames;\r\n\r\n                // to display advertisement images!\r\n                if (config.advertisement && config.advertisement.length) {\r\n                    whammy.frames = config.advertisement.concat(whammy.frames);\r\n                }\r\n\r\n                /**\r\n                 * @property {Blob} blob - Recorded frames in video/webm blob.\r\n                 * @memberof WhammyRecorder\r\n                 * @example\r\n                 * recorder.stop(function() {\r\n                 *     var blob = recorder.blob;\r\n                 * });\r\n                 */\r\n                whammy.compile(function(blob) {\r\n                    _this.blob = blob;\r\n\r\n                    if (_this.blob.forEach) {\r\n                        _this.blob = new Blob([], {\r\n                            type: 'video/webm'\r\n                        });\r\n                    }\r\n\r\n                    if (callback) {\r\n                        callback(_this.blob);\r\n                    }\r\n                });\r\n            });\r\n        }, 10);\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n\r\n        if (isStopDrawing) {\r\n            this.record();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (!isStopDrawing) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        whammy.frames = [];\r\n        isStopDrawing = true;\r\n        isPausedRecording = false;\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'WhammyRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    var video;\r\n    var lastTime;\r\n    var whammy;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.WhammyRecorder = WhammyRecorder;\r\n}\n\r\n// https://github.com/antimatter15/whammy/blob/master/LICENSE\r\n// _________\r\n// Whammy.js\r\n\r\n// todo: Firefox now supports webp for webm containers!\r\n// their MediaRecorder implementation works well!\r\n// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\r\n\r\n/**\r\n * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\r\n * @summary A real time javascript webm encoder based on a canvas hack.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef Whammy\r\n * @class\r\n * @example\r\n * var recorder = new Whammy().Video(15);\r\n * recorder.add(context || canvas || dataURL);\r\n * var output = recorder.compile();\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\nvar Whammy = (function() {\r\n    // a more abstract-ish API\r\n\r\n    function WhammyVideo(duration) {\r\n        this.frames = [];\r\n        this.duration = duration || 1;\r\n        this.quality = 0.8;\r\n    }\r\n\r\n    /**\r\n     * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * recorder.add(canvas || context || 'image/webp');\r\n     * @param {string} frame - Canvas || Context || image/webp\r\n     * @param {number} duration - Stick a duration (in milliseconds)\r\n     */\r\n    WhammyVideo.prototype.add = function(frame, duration) {\r\n        if ('canvas' in frame) { //CanvasRenderingContext2D\r\n            frame = frame.canvas;\r\n        }\r\n\r\n        if ('toDataURL' in frame) {\r\n            frame = frame.toDataURL('image/webp', this.quality);\r\n        }\r\n\r\n        if (!(/^data:image\\/webp;base64,/ig).test(frame)) {\r\n            throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\r\n        }\r\n        this.frames.push({\r\n            image: frame,\r\n            duration: duration || this.duration\r\n        });\r\n    };\r\n\r\n    function processInWebWorker(_function) {\r\n        var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n            'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n        ], {\r\n            type: 'application/javascript'\r\n        }));\r\n\r\n        var worker = new Worker(blob);\r\n        URL.revokeObjectURL(blob);\r\n        return worker;\r\n    }\r\n\r\n    function whammyInWebWorker(frames) {\r\n        function ArrayToWebM(frames) {\r\n            var info = checkFrames(frames);\r\n            if (!info) {\r\n                return [];\r\n            }\r\n\r\n            var clusterMaxDuration = 30000;\r\n\r\n            var EBML = [{\r\n                'id': 0x1a45dfa3, // EBML\r\n                'data': [{\r\n                    'data': 1,\r\n                    'id': 0x4286 // EBMLVersion\r\n                }, {\r\n                    'data': 1,\r\n                    'id': 0x42f7 // EBMLReadVersion\r\n                }, {\r\n                    'data': 4,\r\n                    'id': 0x42f2 // EBMLMaxIDLength\r\n                }, {\r\n                    'data': 8,\r\n                    'id': 0x42f3 // EBMLMaxSizeLength\r\n                }, {\r\n                    'data': 'webm',\r\n                    'id': 0x4282 // DocType\r\n                }, {\r\n                    'data': 2,\r\n                    'id': 0x4287 // DocTypeVersion\r\n                }, {\r\n                    'data': 2,\r\n                    'id': 0x4285 // DocTypeReadVersion\r\n                }]\r\n            }, {\r\n                'id': 0x18538067, // Segment\r\n                'data': [{\r\n                    'id': 0x1549a966, // Info\r\n                    'data': [{\r\n                        'data': 1e6, //do things in millisecs (num of nanosecs for duration scale)\r\n                        'id': 0x2ad7b1 // TimecodeScale\r\n                    }, {\r\n                        'data': 'whammy',\r\n                        'id': 0x4d80 // MuxingApp\r\n                    }, {\r\n                        'data': 'whammy',\r\n                        'id': 0x5741 // WritingApp\r\n                    }, {\r\n                        'data': doubleToString(info.duration),\r\n                        'id': 0x4489 // Duration\r\n                    }]\r\n                }, {\r\n                    'id': 0x1654ae6b, // Tracks\r\n                    'data': [{\r\n                        'id': 0xae, // TrackEntry\r\n                        'data': [{\r\n                            'data': 1,\r\n                            'id': 0xd7 // TrackNumber\r\n                        }, {\r\n                            'data': 1,\r\n                            'id': 0x73c5 // TrackUID\r\n                        }, {\r\n                            'data': 0,\r\n                            'id': 0x9c // FlagLacing\r\n                        }, {\r\n                            'data': 'und',\r\n                            'id': 0x22b59c // Language\r\n                        }, {\r\n                            'data': 'V_VP8',\r\n                            'id': 0x86 // CodecID\r\n                        }, {\r\n                            'data': 'VP8',\r\n                            'id': 0x258688 // CodecName\r\n                        }, {\r\n                            'data': 1,\r\n                            'id': 0x83 // TrackType\r\n                        }, {\r\n                            'id': 0xe0, // Video\r\n                            'data': [{\r\n                                'data': info.width,\r\n                                'id': 0xb0 // PixelWidth\r\n                            }, {\r\n                                'data': info.height,\r\n                                'id': 0xba // PixelHeight\r\n                            }]\r\n                        }]\r\n                    }]\r\n                }]\r\n            }];\r\n\r\n            //Generate clusters (max duration)\r\n            var frameNumber = 0;\r\n            var clusterTimecode = 0;\r\n            while (frameNumber < frames.length) {\r\n\r\n                var clusterFrames = [];\r\n                var clusterDuration = 0;\r\n                do {\r\n                    clusterFrames.push(frames[frameNumber]);\r\n                    clusterDuration += frames[frameNumber].duration;\r\n                    frameNumber++;\r\n                } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\r\n\r\n                var clusterCounter = 0;\r\n                var cluster = {\r\n                    'id': 0x1f43b675, // Cluster\r\n                    'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\r\n                }; //Add cluster to segment\r\n                EBML[1].data.push(cluster);\r\n                clusterTimecode += clusterDuration;\r\n            }\r\n\r\n            return generateEBML(EBML);\r\n        }\r\n\r\n        function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\r\n            return [{\r\n                'data': clusterTimecode,\r\n                'id': 0xe7 // Timecode\r\n            }].concat(clusterFrames.map(function(webp) {\r\n                var block = makeSimpleBlock({\r\n                    discardable: 0,\r\n                    frame: webp.data.slice(4),\r\n                    invisible: 0,\r\n                    keyframe: 1,\r\n                    lacing: 0,\r\n                    trackNum: 1,\r\n                    timecode: Math.round(clusterCounter)\r\n                });\r\n                clusterCounter += webp.duration;\r\n                return {\r\n                    data: block,\r\n                    id: 0xa3\r\n                };\r\n            }));\r\n        }\r\n\r\n        // sums the lengths of all the frames and gets the duration\r\n\r\n        function checkFrames(frames) {\r\n            if (!frames[0]) {\r\n                postMessage({\r\n                    error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\r\n                });\r\n                return;\r\n            }\r\n\r\n            var width = frames[0].width,\r\n                height = frames[0].height,\r\n                duration = frames[0].duration;\r\n\r\n            for (var i = 1; i < frames.length; i++) {\r\n                duration += frames[i].duration;\r\n            }\r\n            return {\r\n                duration: duration,\r\n                width: width,\r\n                height: height\r\n            };\r\n        }\r\n\r\n        function numToBuffer(num) {\r\n            var parts = [];\r\n            while (num > 0) {\r\n                parts.push(num & 0xff);\r\n                num = num >> 8;\r\n            }\r\n            return new Uint8Array(parts.reverse());\r\n        }\r\n\r\n        function strToBuffer(str) {\r\n            return new Uint8Array(str.split('').map(function(e) {\r\n                return e.charCodeAt(0);\r\n            }));\r\n        }\r\n\r\n        function bitsToBuffer(bits) {\r\n            var data = [];\r\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\r\n            bits = pad + bits;\r\n            for (var i = 0; i < bits.length; i += 8) {\r\n                data.push(parseInt(bits.substr(i, 8), 2));\r\n            }\r\n            return new Uint8Array(data);\r\n        }\r\n\r\n        function generateEBML(json) {\r\n            var ebml = [];\r\n            for (var i = 0; i < json.length; i++) {\r\n                var data = json[i].data;\r\n\r\n                if (typeof data === 'object') {\r\n                    data = generateEBML(data);\r\n                }\r\n\r\n                if (typeof data === 'number') {\r\n                    data = bitsToBuffer(data.toString(2));\r\n                }\r\n\r\n                if (typeof data === 'string') {\r\n                    data = strToBuffer(data);\r\n                }\r\n\r\n                var len = data.size || data.byteLength || data.length;\r\n                var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\r\n                var sizeToString = len.toString(2);\r\n                var padded = (new Array((zeroes * 7 + 7 + 1) - sizeToString.length)).join('0') + sizeToString;\r\n                var size = (new Array(zeroes)).join('0') + '1' + padded;\r\n\r\n                ebml.push(numToBuffer(json[i].id));\r\n                ebml.push(bitsToBuffer(size));\r\n                ebml.push(data);\r\n            }\r\n\r\n            return new Blob(ebml, {\r\n                type: 'video/webm'\r\n            });\r\n        }\r\n\r\n        function toBinStrOld(bits) {\r\n            var data = '';\r\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\r\n            bits = pad + bits;\r\n            for (var i = 0; i < bits.length; i += 8) {\r\n                data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\r\n            }\r\n            return data;\r\n        }\r\n\r\n        function makeSimpleBlock(data) {\r\n            var flags = 0;\r\n\r\n            if (data.keyframe) {\r\n                flags |= 128;\r\n            }\r\n\r\n            if (data.invisible) {\r\n                flags |= 8;\r\n            }\r\n\r\n            if (data.lacing) {\r\n                flags |= (data.lacing << 1);\r\n            }\r\n\r\n            if (data.discardable) {\r\n                flags |= 1;\r\n            }\r\n\r\n            if (data.trackNum > 127) {\r\n                throw 'TrackNumber > 127 not supported';\r\n            }\r\n\r\n            var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function(e) {\r\n                return String.fromCharCode(e);\r\n            }).join('') + data.frame;\r\n\r\n            return out;\r\n        }\r\n\r\n        function parseWebP(riff) {\r\n            var VP8 = riff.RIFF[0].WEBP[0];\r\n\r\n            var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\r\n            for (var i = 0, c = []; i < 4; i++) {\r\n                c[i] = VP8.charCodeAt(frameStart + 3 + i);\r\n            }\r\n\r\n            var width, height, tmp;\r\n\r\n            //the code below is literally copied verbatim from the bitstream spec\r\n            tmp = (c[1] << 8) | c[0];\r\n            width = tmp & 0x3FFF;\r\n            tmp = (c[3] << 8) | c[2];\r\n            height = tmp & 0x3FFF;\r\n            return {\r\n                width: width,\r\n                height: height,\r\n                data: VP8,\r\n                riff: riff\r\n            };\r\n        }\r\n\r\n        function getStrLength(string, offset) {\r\n            return parseInt(string.substr(offset + 4, 4).split('').map(function(i) {\r\n                var unpadded = i.charCodeAt(0).toString(2);\r\n                return (new Array(8 - unpadded.length + 1)).join('0') + unpadded;\r\n            }).join(''), 2);\r\n        }\r\n\r\n        function parseRIFF(string) {\r\n            var offset = 0;\r\n            var chunks = {};\r\n\r\n            while (offset < string.length) {\r\n                var id = string.substr(offset, 4);\r\n                var len = getStrLength(string, offset);\r\n                var data = string.substr(offset + 4 + 4, len);\r\n                offset += 4 + 4 + len;\r\n                chunks[id] = chunks[id] || [];\r\n\r\n                if (id === 'RIFF' || id === 'LIST') {\r\n                    chunks[id].push(parseRIFF(data));\r\n                } else {\r\n                    chunks[id].push(data);\r\n                }\r\n            }\r\n            return chunks;\r\n        }\r\n\r\n        function doubleToString(num) {\r\n            return [].slice.call(\r\n                new Uint8Array((new Float64Array([num])).buffer), 0).map(function(e) {\r\n                return String.fromCharCode(e);\r\n            }).reverse().join('');\r\n        }\r\n\r\n        var webm = new ArrayToWebM(frames.map(function(frame) {\r\n            var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\r\n            webp.duration = frame.duration;\r\n            return webp;\r\n        }));\r\n\r\n        postMessage(webm);\r\n    }\r\n\r\n    /**\r\n     * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * recorder.compile(function(blob) {\r\n     *    // blob.size - blob.type\r\n     * });\r\n     */\r\n    WhammyVideo.prototype.compile = function(callback) {\r\n        var webWorker = processInWebWorker(whammyInWebWorker);\r\n\r\n        webWorker.onmessage = function(event) {\r\n            if (event.data.error) {\r\n                console.error(event.data.error);\r\n                return;\r\n            }\r\n            callback(event.data);\r\n        };\r\n\r\n        webWorker.postMessage(this.frames);\r\n    };\r\n\r\n    return {\r\n        /**\r\n         * A more abstract-ish API.\r\n         * @method\r\n         * @memberof Whammy\r\n         * @example\r\n         * recorder = new Whammy().Video(0.8, 100);\r\n         * @param {?number} speed - 0.8\r\n         * @param {?number} quality - 100\r\n         */\r\n        Video: WhammyVideo\r\n    };\r\n})();\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.Whammy = Whammy;\r\n}\n\r\n// ______________ (indexed-db)\r\n// DiskStorage.js\r\n\r\n/**\r\n * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\r\n * @summary Writing blobs into IndexedDB.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @example\r\n * DiskStorage.Store({\r\n *     audioBlob: yourAudioBlob,\r\n *     videoBlob: yourVideoBlob,\r\n *     gifBlob  : yourGifBlob\r\n * });\r\n * DiskStorage.Fetch(function(dataURL, type) {\r\n *     if(type === 'audioBlob') { }\r\n *     if(type === 'videoBlob') { }\r\n *     if(type === 'gifBlob')   { }\r\n * });\r\n * // DiskStorage.dataStoreName = 'recordRTC';\r\n * // DiskStorage.onError = function(error) { };\r\n * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\r\n * @property {function} Store - This method stores blobs in IndexedDB.\r\n * @property {function} onError - This function is invoked for any known/unknown error.\r\n * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\n\r\nvar DiskStorage = {\r\n    /**\r\n     * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.init();\r\n     */\r\n    init: function() {\r\n        var self = this;\r\n\r\n        if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\r\n            console.error('IndexedDB API are not available in this browser.');\r\n            return;\r\n        }\r\n\r\n        var dbVersion = 1;\r\n        var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\r\n            db;\r\n        var request = indexedDB.open(dbName, dbVersion);\r\n\r\n        function createObjectStore(dataBase) {\r\n            dataBase.createObjectStore(self.dataStoreName);\r\n        }\r\n\r\n        function putInDB() {\r\n            var transaction = db.transaction([self.dataStoreName], 'readwrite');\r\n\r\n            if (self.videoBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\r\n            }\r\n\r\n            if (self.gifBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\r\n            }\r\n\r\n            if (self.audioBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\r\n            }\r\n\r\n            function getFromStore(portionName) {\r\n                transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function(event) {\r\n                    if (self.callback) {\r\n                        self.callback(event.target.result, portionName);\r\n                    }\r\n                };\r\n            }\r\n\r\n            getFromStore('audioBlob');\r\n            getFromStore('videoBlob');\r\n            getFromStore('gifBlob');\r\n        }\r\n\r\n        request.onerror = self.onError;\r\n\r\n        request.onsuccess = function() {\r\n            db = request.result;\r\n            db.onerror = self.onError;\r\n\r\n            if (db.setVersion) {\r\n                if (db.version !== dbVersion) {\r\n                    var setVersion = db.setVersion(dbVersion);\r\n                    setVersion.onsuccess = function() {\r\n                        createObjectStore(db);\r\n                        putInDB();\r\n                    };\r\n                } else {\r\n                    putInDB();\r\n                }\r\n            } else {\r\n                putInDB();\r\n            }\r\n        };\r\n        request.onupgradeneeded = function(event) {\r\n            createObjectStore(event.target.result);\r\n        };\r\n    },\r\n    /**\r\n     * This method fetches stored blobs from IndexedDB.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.Fetch(function(dataURL, type) {\r\n     *     if(type === 'audioBlob') { }\r\n     *     if(type === 'videoBlob') { }\r\n     *     if(type === 'gifBlob')   { }\r\n     * });\r\n     */\r\n    Fetch: function(callback) {\r\n        this.callback = callback;\r\n        this.init();\r\n\r\n        return this;\r\n    },\r\n    /**\r\n     * This method stores blobs in IndexedDB.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.Store({\r\n     *     audioBlob: yourAudioBlob,\r\n     *     videoBlob: yourVideoBlob,\r\n     *     gifBlob  : yourGifBlob\r\n     * });\r\n     */\r\n    Store: function(config) {\r\n        this.audioBlob = config.audioBlob;\r\n        this.videoBlob = config.videoBlob;\r\n        this.gifBlob = config.gifBlob;\r\n\r\n        this.init();\r\n\r\n        return this;\r\n    },\r\n    /**\r\n     * This function is invoked for any known/unknown error.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.onError = function(error){\r\n     *     alerot( JSON.stringify(error) );\r\n     * };\r\n     */\r\n    onError: function(error) {\r\n        console.error(JSON.stringify(error, null, '\\t'));\r\n    },\r\n\r\n    /**\r\n     * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.dataStoreName = 'recordRTC';\r\n     */\r\n    dataStoreName: 'recordRTC',\r\n    dbName: null\r\n};\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.DiskStorage = DiskStorage;\r\n}\n\r\n// ______________\r\n// GifRecorder.js\r\n\r\n/**\r\n * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef GifRecorder\r\n * @class\r\n * @example\r\n * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     img.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\r\n * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\r\n */\r\n\r\nfunction GifRecorder(mediaStream, config) {\r\n    if (typeof GIFEncoder === 'undefined') {\r\n        var script = document.createElement('script');\r\n        script.src = 'https://www.webrtc-experiment.com/gif-recorder.js';\r\n        (document.body || document.documentElement).appendChild(script);\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (typeof GIFEncoder === 'undefined') {\r\n            setTimeout(self.record, 1000);\r\n            return;\r\n        }\r\n\r\n        if (!isLoadedMetaData) {\r\n            setTimeout(self.record, 1000);\r\n            return;\r\n        }\r\n\r\n        if (!isHTMLObject) {\r\n            if (!config.width) {\r\n                config.width = video.offsetWidth || 320;\r\n            }\r\n\r\n            if (!config.height) {\r\n                config.height = video.offsetHeight || 240;\r\n            }\r\n\r\n            if (!config.video) {\r\n                config.video = {\r\n                    width: config.width,\r\n                    height: config.height\r\n                };\r\n            }\r\n\r\n            if (!config.canvas) {\r\n                config.canvas = {\r\n                    width: config.width,\r\n                    height: config.height\r\n                };\r\n            }\r\n\r\n            canvas.width = config.canvas.width || 320;\r\n            canvas.height = config.canvas.height || 240;\r\n\r\n            video.width = config.video.width || 320;\r\n            video.height = config.video.height || 240;\r\n        }\r\n\r\n        // external library to record as GIF images\r\n        gifEncoder = new GIFEncoder();\r\n\r\n        // void setRepeat(int iter) \r\n        // Sets the number of times the set of GIF frames should be played. \r\n        // Default is 1; 0 means play indefinitely.\r\n        gifEncoder.setRepeat(0);\r\n\r\n        // void setFrameRate(Number fps) \r\n        // Sets frame rate in frames per second. \r\n        // Equivalent to setDelay(1000/fps).\r\n        // Using \"setDelay\" instead of \"setFrameRate\"\r\n        gifEncoder.setDelay(config.frameRate || 200);\r\n\r\n        // void setQuality(int quality) \r\n        // Sets quality of color quantization (conversion of images to the \r\n        // maximum 256 colors allowed by the GIF specification). \r\n        // Lower values (minimum = 1) produce better colors, \r\n        // but slow processing significantly. 10 is the default, \r\n        // and produces good color mapping at reasonable speeds. \r\n        // Values greater than 20 do not yield significant improvements in speed.\r\n        gifEncoder.setQuality(config.quality || 10);\r\n\r\n        // Boolean start() \r\n        // This writes the GIF Header and returns false if it fails.\r\n        gifEncoder.start();\r\n\r\n        if (typeof config.onGifRecordingStarted === 'function') {\r\n            config.onGifRecordingStarted();\r\n        }\r\n\r\n        startTime = Date.now();\r\n\r\n        function drawVideoFrame(time) {\r\n            if (self.clearedRecordedData === true) {\r\n                return;\r\n            }\r\n\r\n            if (isPausedRecording) {\r\n                return setTimeout(function() {\r\n                    drawVideoFrame(time);\r\n                }, 100);\r\n            }\r\n\r\n            lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\r\n\r\n            if (typeof lastFrameTime === undefined) {\r\n                lastFrameTime = time;\r\n            }\r\n\r\n            // ~10 fps\r\n            if (time - lastFrameTime < 90) {\r\n                return;\r\n            }\r\n\r\n            if (!isHTMLObject && video.paused) {\r\n                // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\r\n                // Tweak for Android Chrome\r\n                video.play();\r\n            }\r\n\r\n            if (!isHTMLObject) {\r\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n            }\r\n\r\n            if (config.onGifPreview) {\r\n                config.onGifPreview(canvas.toDataURL('image/png'));\r\n            }\r\n\r\n            gifEncoder.addFrame(context);\r\n            lastFrameTime = time;\r\n        }\r\n\r\n        lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     img.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (lastAnimationFrame) {\r\n            cancelAnimationFrame(lastAnimationFrame);\r\n        }\r\n\r\n        endTime = Date.now();\r\n\r\n        /**\r\n         * @property {Blob} blob - The recorded blob object.\r\n         * @memberof GifRecorder\r\n         * @example\r\n         * recorder.stop(function(){\r\n         *     var blob = recorder.blob;\r\n         * });\r\n         */\r\n        this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\r\n            type: 'image/gif'\r\n        });\r\n\r\n        callback(this.blob);\r\n\r\n        // bug: find a way to clear old recorded blobs\r\n        gifEncoder.stream().bin = [];\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        self.clearedRecordedData = true;\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        if (gifEncoder) {\r\n            gifEncoder.stream().bin = [];\r\n        }\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'GifRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    if (isHTMLObject) {\r\n        if (mediaStream instanceof CanvasRenderingContext2D) {\r\n            context = mediaStream;\r\n            canvas = context.canvas;\r\n        } else if (mediaStream instanceof HTMLCanvasElement) {\r\n            context = mediaStream.getContext('2d');\r\n            canvas = mediaStream;\r\n        }\r\n    }\r\n\r\n    var isLoadedMetaData = true;\r\n\r\n    if (!isHTMLObject) {\r\n        var video = document.createElement('video');\r\n        video.muted = true;\r\n        video.autoplay = true;\r\n        video.playsInline = true;\r\n\r\n        isLoadedMetaData = false;\r\n        video.onloadedmetadata = function() {\r\n            isLoadedMetaData = true;\r\n        };\r\n\r\n        setSrcObject(mediaStream, video);\r\n\r\n        video.play();\r\n    }\r\n\r\n    var lastAnimationFrame = null;\r\n    var startTime, endTime, lastFrameTime;\r\n\r\n    var gifEncoder;\r\n\r\n    var self = this;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.GifRecorder = GifRecorder;\r\n}\n\r\n// Last time updated: 2019-06-21 4:09:42 AM UTC\r\n\r\n// ________________________\r\n// MultiStreamsMixer v1.2.2\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/MultiStreamsMixer\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\nfunction MultiStreamsMixer(arrayOfMediaStreams, elementClass) {\r\n\r\n    var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\r\n\r\n    (function(that) {\r\n        if (typeof RecordRTC !== 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (!that) {\r\n            return;\r\n        }\r\n\r\n        if (typeof window !== 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (typeof global === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        global.navigator = {\r\n            userAgent: browserFakeUserAgent,\r\n            getUserMedia: function() {}\r\n        };\r\n\r\n        if (!global.console) {\r\n            global.console = {};\r\n        }\r\n\r\n        if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\r\n            global.console.error = global.console.log = global.console.log || function() {\r\n                console.log(arguments);\r\n            };\r\n        }\r\n\r\n        if (typeof document === 'undefined') {\r\n            /*global document:true */\r\n            that.document = {\r\n                documentElement: {\r\n                    appendChild: function() {\r\n                        return '';\r\n                    }\r\n                }\r\n            };\r\n\r\n            document.createElement = document.captureStream = document.mozCaptureStream = function() {\r\n                var obj = {\r\n                    getContext: function() {\r\n                        return obj;\r\n                    },\r\n                    play: function() {},\r\n                    pause: function() {},\r\n                    drawImage: function() {},\r\n                    toDataURL: function() {\r\n                        return '';\r\n                    },\r\n                    style: {}\r\n                };\r\n                return obj;\r\n            };\r\n\r\n            that.HTMLVideoElement = function() {};\r\n        }\r\n\r\n        if (typeof location === 'undefined') {\r\n            /*global location:true */\r\n            that.location = {\r\n                protocol: 'file:',\r\n                href: '',\r\n                hash: ''\r\n            };\r\n        }\r\n\r\n        if (typeof screen === 'undefined') {\r\n            /*global screen:true */\r\n            that.screen = {\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        if (typeof URL === 'undefined') {\r\n            /*global screen:true */\r\n            that.URL = {\r\n                createObjectURL: function() {\r\n                    return '';\r\n                },\r\n                revokeObjectURL: function() {\r\n                    return '';\r\n                }\r\n            };\r\n        }\r\n\r\n        /*global window:true */\r\n        that.window = global;\r\n    })(typeof global !== 'undefined' ? global : null);\r\n\r\n    // requires: chrome://flags/#enable-experimental-web-platform-features\r\n\r\n    elementClass = elementClass || 'multi-streams-mixer';\r\n\r\n    var videos = [];\r\n    var isStopDrawingFrames = false;\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n    canvas.style.opacity = 0;\r\n    canvas.style.position = 'absolute';\r\n    canvas.style.zIndex = -1;\r\n    canvas.style.top = '-1000em';\r\n    canvas.style.left = '-1000em';\r\n    canvas.className = elementClass;\r\n    (document.body || document.documentElement).appendChild(canvas);\r\n\r\n    this.disableLogs = false;\r\n    this.frameInterval = 10;\r\n\r\n    this.width = 360;\r\n    this.height = 240;\r\n\r\n    // use gain node to prevent echo\r\n    this.useGainNode = true;\r\n\r\n    var self = this;\r\n\r\n    // _____________________________\r\n    // Cross-Browser-Declarations.js\r\n\r\n    // WebAudio API representer\r\n    var AudioContext = window.AudioContext;\r\n\r\n    if (typeof AudioContext === 'undefined') {\r\n        if (typeof webkitAudioContext !== 'undefined') {\r\n            /*global AudioContext:true */\r\n            AudioContext = webkitAudioContext;\r\n        }\r\n\r\n        if (typeof mozAudioContext !== 'undefined') {\r\n            /*global AudioContext:true */\r\n            AudioContext = mozAudioContext;\r\n        }\r\n    }\r\n\r\n    /*jshint -W079 */\r\n    var URL = window.URL;\r\n\r\n    if (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\r\n        /*global URL:true */\r\n        URL = webkitURL;\r\n    }\r\n\r\n    if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\r\n        if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n            navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n        }\r\n\r\n        if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n            navigator.getUserMedia = navigator.mozGetUserMedia;\r\n        }\r\n    }\r\n\r\n    var MediaStream = window.MediaStream;\r\n\r\n    if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n        MediaStream = webkitMediaStream;\r\n    }\r\n\r\n    /*global MediaStream:true */\r\n    if (typeof MediaStream !== 'undefined') {\r\n        // override \"stop\" method for all browsers\r\n        if (typeof MediaStream.prototype.stop === 'undefined') {\r\n            MediaStream.prototype.stop = function() {\r\n                this.getTracks().forEach(function(track) {\r\n                    track.stop();\r\n                });\r\n            };\r\n        }\r\n    }\r\n\r\n    var Storage = {};\r\n\r\n    if (typeof AudioContext !== 'undefined') {\r\n        Storage.AudioContext = AudioContext;\r\n    } else if (typeof webkitAudioContext !== 'undefined') {\r\n        Storage.AudioContext = webkitAudioContext;\r\n    }\r\n\r\n    function setSrcObject(stream, element) {\r\n        if ('srcObject' in element) {\r\n            element.srcObject = stream;\r\n        } else if ('mozSrcObject' in element) {\r\n            element.mozSrcObject = stream;\r\n        } else {\r\n            element.srcObject = stream;\r\n        }\r\n    }\r\n\r\n    this.startDrawingFrames = function() {\r\n        drawVideosToCanvas();\r\n    };\r\n\r\n    function drawVideosToCanvas() {\r\n        if (isStopDrawingFrames) {\r\n            return;\r\n        }\r\n\r\n        var videosLength = videos.length;\r\n\r\n        var fullcanvas = false;\r\n        var remaining = [];\r\n        videos.forEach(function(video) {\r\n            if (!video.stream) {\r\n                video.stream = {};\r\n            }\r\n\r\n            if (video.stream.fullcanvas) {\r\n                fullcanvas = video;\r\n            } else {\r\n                // todo: video.stream.active or video.stream.live to fix blank frames issues?\r\n                remaining.push(video);\r\n            }\r\n        });\r\n\r\n        if (fullcanvas) {\r\n            canvas.width = fullcanvas.stream.width;\r\n            canvas.height = fullcanvas.stream.height;\r\n        } else if (remaining.length) {\r\n            canvas.width = videosLength > 1 ? remaining[0].width * 2 : remaining[0].width;\r\n\r\n            var height = 1;\r\n            if (videosLength === 3 || videosLength === 4) {\r\n                height = 2;\r\n            }\r\n            if (videosLength === 5 || videosLength === 6) {\r\n                height = 3;\r\n            }\r\n            if (videosLength === 7 || videosLength === 8) {\r\n                height = 4;\r\n            }\r\n            if (videosLength === 9 || videosLength === 10) {\r\n                height = 5;\r\n            }\r\n            canvas.height = remaining[0].height * height;\r\n        } else {\r\n            canvas.width = self.width || 360;\r\n            canvas.height = self.height || 240;\r\n        }\r\n\r\n        if (fullcanvas && fullcanvas instanceof HTMLVideoElement) {\r\n            drawImage(fullcanvas);\r\n        }\r\n\r\n        remaining.forEach(function(video, idx) {\r\n            drawImage(video, idx);\r\n        });\r\n\r\n        setTimeout(drawVideosToCanvas, self.frameInterval);\r\n    }\r\n\r\n    function drawImage(video, idx) {\r\n        if (isStopDrawingFrames) {\r\n            return;\r\n        }\r\n\r\n        var x = 0;\r\n        var y = 0;\r\n        var width = video.width;\r\n        var height = video.height;\r\n\r\n        if (idx === 1) {\r\n            x = video.width;\r\n        }\r\n\r\n        if (idx === 2) {\r\n            y = video.height;\r\n        }\r\n\r\n        if (idx === 3) {\r\n            x = video.width;\r\n            y = video.height;\r\n        }\r\n\r\n        if (idx === 4) {\r\n            y = video.height * 2;\r\n        }\r\n\r\n        if (idx === 5) {\r\n            x = video.width;\r\n            y = video.height * 2;\r\n        }\r\n\r\n        if (idx === 6) {\r\n            y = video.height * 3;\r\n        }\r\n\r\n        if (idx === 7) {\r\n            x = video.width;\r\n            y = video.height * 3;\r\n        }\r\n\r\n        if (typeof video.stream.left !== 'undefined') {\r\n            x = video.stream.left;\r\n        }\r\n\r\n        if (typeof video.stream.top !== 'undefined') {\r\n            y = video.stream.top;\r\n        }\r\n\r\n        if (typeof video.stream.width !== 'undefined') {\r\n            width = video.stream.width;\r\n        }\r\n\r\n        if (typeof video.stream.height !== 'undefined') {\r\n            height = video.stream.height;\r\n        }\r\n\r\n        context.drawImage(video, x, y, width, height);\r\n\r\n        if (typeof video.stream.onRender === 'function') {\r\n            video.stream.onRender(context, x, y, width, height, idx);\r\n        }\r\n    }\r\n\r\n    function getMixedStream() {\r\n        isStopDrawingFrames = false;\r\n        var mixedVideoStream = getMixedVideoStream();\r\n\r\n        var mixedAudioStream = getMixedAudioStream();\r\n        if (mixedAudioStream) {\r\n            mixedAudioStream.getTracks().filter(function(t) {\r\n                return t.kind === 'audio';\r\n            }).forEach(function(track) {\r\n                mixedVideoStream.addTrack(track);\r\n            });\r\n        }\r\n\r\n        var fullcanvas;\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            if (stream.fullcanvas) {\r\n                fullcanvas = true;\r\n            }\r\n        });\r\n\r\n        // mixedVideoStream.prototype.appendStreams = appendStreams;\r\n        // mixedVideoStream.prototype.resetVideoStreams = resetVideoStreams;\r\n        // mixedVideoStream.prototype.clearRecordedData = clearRecordedData;\r\n\r\n        return mixedVideoStream;\r\n    }\r\n\r\n    function getMixedVideoStream() {\r\n        resetVideoStreams();\r\n\r\n        var capturedStream;\r\n\r\n        if ('captureStream' in canvas) {\r\n            capturedStream = canvas.captureStream();\r\n        } else if ('mozCaptureStream' in canvas) {\r\n            capturedStream = canvas.mozCaptureStream();\r\n        } else if (!self.disableLogs) {\r\n            console.error('Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features');\r\n        }\r\n\r\n        var videoStream = new MediaStream();\r\n\r\n        capturedStream.getTracks().filter(function(t) {\r\n            return t.kind === 'video';\r\n        }).forEach(function(track) {\r\n            videoStream.addTrack(track);\r\n        });\r\n\r\n        canvas.stream = videoStream;\r\n\r\n        return videoStream;\r\n    }\r\n\r\n    function getMixedAudioStream() {\r\n        // via: @pehrsons\r\n        if (!Storage.AudioContextConstructor) {\r\n            Storage.AudioContextConstructor = new Storage.AudioContext();\r\n        }\r\n\r\n        self.audioContext = Storage.AudioContextConstructor;\r\n\r\n        self.audioSources = [];\r\n\r\n        if (self.useGainNode === true) {\r\n            self.gainNode = self.audioContext.createGain();\r\n            self.gainNode.connect(self.audioContext.destination);\r\n            self.gainNode.gain.value = 0; // don't hear self\r\n        }\r\n\r\n        var audioTracksLength = 0;\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            if (!stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                }).length) {\r\n                return;\r\n            }\r\n\r\n            audioTracksLength++;\r\n\r\n            var audioSource = self.audioContext.createMediaStreamSource(stream);\r\n\r\n            if (self.useGainNode === true) {\r\n                audioSource.connect(self.gainNode);\r\n            }\r\n\r\n            self.audioSources.push(audioSource);\r\n        });\r\n\r\n        if (!audioTracksLength) {\r\n            // because \"self.audioContext\" is not initialized\r\n            // that's why we've to ignore rest of the code\r\n            return;\r\n        }\r\n\r\n        self.audioDestination = self.audioContext.createMediaStreamDestination();\r\n        self.audioSources.forEach(function(audioSource) {\r\n            audioSource.connect(self.audioDestination);\r\n        });\r\n        return self.audioDestination.stream;\r\n    }\r\n\r\n    function getVideo(stream) {\r\n        var video = document.createElement('video');\r\n\r\n        setSrcObject(stream, video);\r\n\r\n        video.className = elementClass;\r\n\r\n        video.muted = true;\r\n        video.volume = 0;\r\n\r\n        video.width = stream.width || self.width || 360;\r\n        video.height = stream.height || self.height || 240;\r\n\r\n        video.play();\r\n\r\n        return video;\r\n    }\r\n\r\n    this.appendStreams = function(streams) {\r\n        if (!streams) {\r\n            throw 'First parameter is required.';\r\n        }\r\n\r\n        if (!(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        streams.forEach(function(stream) {\r\n            var newStream = new MediaStream();\r\n\r\n            if (stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                }).length) {\r\n                var video = getVideo(stream);\r\n                video.stream = stream;\r\n                videos.push(video);\r\n\r\n                newStream.addTrack(stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                })[0]);\r\n            }\r\n\r\n            if (stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                }).length) {\r\n                var audioSource = self.audioContext.createMediaStreamSource(stream);\r\n                self.audioDestination = self.audioContext.createMediaStreamDestination();\r\n                audioSource.connect(self.audioDestination);\r\n\r\n                newStream.addTrack(self.audioDestination.stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                })[0]);\r\n            }\r\n\r\n            arrayOfMediaStreams.push(newStream);\r\n        });\r\n    };\r\n\r\n    this.releaseStreams = function() {\r\n        videos = [];\r\n        isStopDrawingFrames = true;\r\n\r\n        if (self.gainNode) {\r\n            self.gainNode.disconnect();\r\n            self.gainNode = null;\r\n        }\r\n\r\n        if (self.audioSources.length) {\r\n            self.audioSources.forEach(function(source) {\r\n                source.disconnect();\r\n            });\r\n            self.audioSources = [];\r\n        }\r\n\r\n        if (self.audioDestination) {\r\n            self.audioDestination.disconnect();\r\n            self.audioDestination = null;\r\n        }\r\n\r\n        if (self.audioContext) {\r\n            self.audioContext.close();\r\n        }\r\n\r\n        self.audioContext = null;\r\n\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (canvas.stream) {\r\n            canvas.stream.stop();\r\n            canvas.stream = null;\r\n        }\r\n    };\r\n\r\n    this.resetVideoStreams = function(streams) {\r\n        if (streams && !(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        resetVideoStreams(streams);\r\n    };\r\n\r\n    function resetVideoStreams(streams) {\r\n        videos = [];\r\n        streams = streams || arrayOfMediaStreams;\r\n\r\n        // via: @adrian-ber\r\n        streams.forEach(function(stream) {\r\n            if (!stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                }).length) {\r\n                return;\r\n            }\r\n\r\n            var video = getVideo(stream);\r\n            video.stream = stream;\r\n            videos.push(video);\r\n        });\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'MultiStreamsMixer';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    this.getMixedStream = getMixedStream;\r\n\r\n}\r\n\r\nif (typeof RecordRTC === 'undefined') {\r\n    if (typeof module !== 'undefined' /* && !!module.exports*/ ) {\r\n        module.exports = MultiStreamsMixer;\r\n    }\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('MultiStreamsMixer', [], function() {\r\n            return MultiStreamsMixer;\r\n        });\r\n    }\r\n}\n\r\n// ______________________\r\n// MultiStreamRecorder.js\r\n\r\n/*\r\n * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\r\n */\r\n\r\n/**\r\n * MultiStreamRecorder can record multiple videos in single container.\r\n * @summary Multi-videos recorder.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef MultiStreamRecorder\r\n * @class\r\n * @example\r\n * var options = {\r\n *     mimeType: 'video/webm'\r\n * }\r\n * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStreams} mediaStreams - Array of MediaStreams.\r\n * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: \"video/webm\"}\r\n */\r\n\r\nfunction MultiStreamRecorder(arrayOfMediaStreams, options) {\r\n    arrayOfMediaStreams = arrayOfMediaStreams || [];\r\n    var self = this;\r\n\r\n    var mixer;\r\n    var mediaRecorder;\r\n\r\n    options = options || {\r\n        elementClass: 'multi-streams-mixer',\r\n        mimeType: 'video/webm',\r\n        video: {\r\n            width: 360,\r\n            height: 240\r\n        }\r\n    };\r\n\r\n    if (!options.frameInterval) {\r\n        options.frameInterval = 10;\r\n    }\r\n\r\n    if (!options.video) {\r\n        options.video = {};\r\n    }\r\n\r\n    if (!options.video.width) {\r\n        options.video.width = 360;\r\n    }\r\n\r\n    if (!options.video.height) {\r\n        options.video.height = 240;\r\n    }\r\n\r\n    /**\r\n     * This method records all MediaStreams.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        // github/muaz-khan/MultiStreamsMixer\r\n        mixer = new MultiStreamsMixer(arrayOfMediaStreams, options.elementClass || 'multi-streams-mixer');\r\n\r\n        if (getAllVideoTracks().length) {\r\n            mixer.frameInterval = options.frameInterval || 10;\r\n            mixer.width = options.video.width || 360;\r\n            mixer.height = options.video.height || 240;\r\n            mixer.startDrawingFrames();\r\n        }\r\n\r\n        if (options.previewStream && typeof options.previewStream === 'function') {\r\n            options.previewStream(mixer.getMixedStream());\r\n        }\r\n\r\n        // record using MediaRecorder API\r\n        mediaRecorder = new MediaStreamRecorder(mixer.getMixedStream(), options);\r\n        mediaRecorder.record();\r\n    };\r\n\r\n    function getAllVideoTracks() {\r\n        var tracks = [];\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            getTracks(stream, 'video').forEach(function(track) {\r\n                tracks.push(track);\r\n            });\r\n        });\r\n        return tracks;\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        mediaRecorder.stop(function(blob) {\r\n            self.blob = blob;\r\n\r\n            callback(blob);\r\n\r\n            self.clearRecordedData();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.pause();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.resume();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.clearRecordedData();\r\n            mediaRecorder = null;\r\n        }\r\n\r\n        if (mixer) {\r\n            mixer.releaseStreams();\r\n            mixer = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add extra media-streams to existing recordings.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n     * @example\r\n     * recorder.addStreams([newAudioStream, newVideoStream]);\r\n     */\r\n    this.addStreams = function(streams) {\r\n        if (!streams) {\r\n            throw 'First parameter is required.';\r\n        }\r\n\r\n        if (!(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        arrayOfMediaStreams.concat(streams);\r\n\r\n        if (!mediaRecorder || !mixer) {\r\n            return;\r\n        }\r\n\r\n        mixer.appendStreams(streams);\r\n\r\n        if (options.previewStream && typeof options.previewStream === 'function') {\r\n            options.previewStream(mixer.getMixedStream());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n     * @example\r\n     * recorder.resetVideoStreams([newVideo1, newVideo2]);\r\n     */\r\n    this.resetVideoStreams = function(streams) {\r\n        if (!mixer) {\r\n            return;\r\n        }\r\n\r\n        if (streams && !(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        mixer.resetVideoStreams(streams);\r\n    };\r\n\r\n    /**\r\n     * Returns MultiStreamsMixer\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * let mixer = recorder.getMixer();\r\n     * mixer.appendStreams([newStream]);\r\n     */\r\n    this.getMixer = function() {\r\n        return mixer;\r\n    };\r\n\r\n    // for debugging\r\n    this.name = 'MultiStreamRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\r\n}\n\r\n// _____________________\r\n// RecordRTC.promises.js\r\n\r\n/**\r\n * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}\r\n * @summary Promises for {@link RecordRTC}\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCPromisesHandler\r\n * @class\r\n * @example\r\n * var recorder = new RecordRTCPromisesHandler(mediaStream, options);\r\n * recorder.startRecording()\r\n *         .then(successCB)\r\n *         .catch(errorCB);\r\n * // Note: You can access all RecordRTC API using \"recorder.recordRTC\" e.g. \r\n * recorder.recordRTC.onStateChanged = function(state) {};\r\n * recorder.recordRTC.setRecordingDuration(5000);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\r\n * @requires {@link RecordRTC}\r\n */\r\n\r\nfunction RecordRTCPromisesHandler(mediaStream, options) {\r\n    if (!this) {\r\n        throw 'Use \"new RecordRTCPromisesHandler()\"';\r\n    }\r\n\r\n    if (typeof mediaStream === 'undefined') {\r\n        throw 'First argument \"MediaStream\" is required.';\r\n    }\r\n\r\n    var self = this;\r\n\r\n    /**\r\n     * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let internal = recorder.recordRTC.getInternalRecorder();\r\n     * alert(internal instanceof MediaStreamRecorder);\r\n     * recorder.recordRTC.onStateChanged = function(state) {};\r\n     */\r\n    self.recordRTC = new RecordRTC(mediaStream, options);\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.startRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.startRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.startRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method stops the recording.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     var blob = recorder.getBlob();\r\n     * }).catch(errorCB);\r\n     */\r\n    this.stopRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.stopRecording(function(url) {\r\n                    self.blob = self.recordRTC.getBlob();\r\n\r\n                    if (!self.blob || !self.blob.size) {\r\n                        reject('Empty blob.', self.blob);\r\n                        return;\r\n                    }\r\n\r\n                    resolve(url);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.pauseRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.pauseRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.pauseRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.resumeRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.resumeRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.resumeRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns data-url for the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     recorder.getDataURL().then(function(dataURL) {\r\n     *         window.open(dataURL);\r\n     *     }).catch(errorCB);;\r\n     * }).catch(errorCB);\r\n     */\r\n    this.getDataURL = function(callback) {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.getDataURL(function(dataURL) {\r\n                    resolve(dataURL);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     recorder.getBlob().then(function(blob) {})\r\n     * }).catch(errorCB);\r\n     */\r\n    this.getBlob = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getBlob());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns the internal recording object.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let internalRecorder = await recorder.getInternalRecorder();\r\n     * if(internalRecorder instanceof MultiStreamRecorder) {\r\n     *     internalRecorder.addStreams([newAudioStream]);\r\n     *     internalRecorder.resetVideoStreams([screenStream]);\r\n     * }\r\n     * @returns {Object} \r\n     */\r\n    this.getInternalRecorder = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getInternalRecorder());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * await recorder.reset();\r\n     * recorder.startRecording(); // record again\r\n     */\r\n    this.reset = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.reset());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Destroy RecordRTC instance. Clear all recorders and objects.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.destroy().then(successCB).catch(errorCB);\r\n     */\r\n    this.destroy = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.destroy());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get recorder's readonly state.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let state = await recorder.getState();\r\n     * // or\r\n     * recorder.getState().then(state => { console.log(state); })\r\n     * @returns {String} Returns recording state.\r\n     */\r\n    this.getState = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getState());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * await recorder.stopRecording();\r\n     * let blob = recorder.getBlob(); // or \"recorder.recordRTC.blob\"\r\n     * invokeSaveAsDialog(blob);\r\n     */\r\n    this.blob = null;\r\n\r\n    /**\r\n     * RecordRTC version number\r\n     * @property {String} version - Release version number.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @static\r\n     * @readonly\r\n     * @example\r\n     * alert(recorder.version);\r\n     */\r\n    this.version = '5.5.9';\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.RecordRTCPromisesHandler = RecordRTCPromisesHandler;\r\n}\n\r\n// ______________________\r\n// WebAssemblyRecorder.js\r\n\r\n/**\r\n * WebAssemblyRecorder lets you create webm videos in JavaScript via WebAssembly. The library consumes raw RGBA32 buffers (4 bytes per pixel) and turns them into a webm video with the given framerate and quality. This makes it compatible out-of-the-box with ImageData from a CANVAS. With realtime mode you can also use webm-wasm for streaming webm videos.\r\n * @summary Video recording feature in Chrome, Firefox and maybe Edge.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef WebAssemblyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WebAssemblyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {webAssemblyPath:'webm-wasm.wasm',workerPath: 'webm-worker.js', frameRate: 30, width: 1920, height: 1080, bitrate: 1024}\r\n */\r\nfunction WebAssemblyRecorder(stream, config) {\r\n    // based on: github.com/GoogleChromeLabs/webm-wasm\r\n\r\n    if (typeof ReadableStream === 'undefined' || typeof WritableStream === 'undefined') {\r\n        // because it fixes readable/writable streams issues\r\n        console.error('Following polyfill is strongly recommended: https://unpkg.com/@mattiasbuelens/web-streams-polyfill/dist/polyfill.min.js');\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    config.width = config.width || 640;\r\n    config.height = config.height || 480;\r\n    config.frameRate = config.frameRate || 30;\r\n    config.bitrate = config.bitrate || 1200;\r\n\r\n    function createBufferURL(buffer, type) {\r\n        return URL.createObjectURL(new Blob([buffer], {\r\n            type: type || ''\r\n        }));\r\n    }\r\n\r\n    function cameraStream() {\r\n        return new ReadableStream({\r\n            start: function(controller) {\r\n                var cvs = document.createElement('canvas');\r\n                var video = document.createElement('video');\r\n                video.srcObject = stream;\r\n                video.onplaying = function() {\r\n                    cvs.width = config.width;\r\n                    cvs.height = config.height;\r\n                    var ctx = cvs.getContext('2d');\r\n                    var frameTimeout = 1000 / config.frameRate;\r\n                    setTimeout(function f() {\r\n                        ctx.drawImage(video, 0, 0);\r\n                        controller.enqueue(\r\n                            ctx.getImageData(0, 0, config.width, config.height)\r\n                        );\r\n                        setTimeout(f, frameTimeout);\r\n                    }, frameTimeout);\r\n                };\r\n                video.play();\r\n            }\r\n        });\r\n    }\r\n\r\n    var worker;\r\n\r\n    function startRecording(stream, buffer) {\r\n        if (!config.workerPath && !buffer) {\r\n            // is it safe to use @latest ?\r\n            fetch(\r\n                'https://unpkg.com/webm-wasm@latest/dist/webm-worker.js'\r\n            ).then(function(r) {\r\n                r.arrayBuffer().then(function(buffer) {\r\n                    startRecording(stream, buffer);\r\n                });\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (!config.workerPath && buffer instanceof ArrayBuffer) {\r\n            var blob = new Blob([buffer], {\r\n                type: 'text/javascript'\r\n            });\r\n            config.workerPath = URL.createObjectURL(blob);\r\n        }\r\n\r\n        if (!config.workerPath) {\r\n            console.error('workerPath parameter is missing.');\r\n        }\r\n\r\n        worker = new Worker(config.workerPath);\r\n\r\n        worker.postMessage(config.webAssemblyPath || 'https://unpkg.com/webm-wasm@latest/dist/webm-wasm.wasm');\r\n        worker.addEventListener('message', function(event) {\r\n            if (event.data === 'READY') {\r\n                worker.postMessage({\r\n                    width: config.width,\r\n                    height: config.height,\r\n                    bitrate: config.bitrate || 1200,\r\n                    timebaseDen: config.frameRate || 30,\r\n                    realtime: true\r\n                });\r\n\r\n                cameraStream().pipeTo(new WritableStream({\r\n                    write: function(image) {\r\n                        if (!worker) {\r\n                            return;\r\n                        }\r\n\r\n                        worker.postMessage(image.data.buffer, [image.data.buffer]);\r\n                    }\r\n                }));\r\n            } else if (!!event.data) {\r\n                if (!isPaused) {\r\n                    arrayOfBuffers.push(event.data);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method records video.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        arrayOfBuffers = [];\r\n        isPaused = false;\r\n        this.blob = null;\r\n        startRecording(stream);\r\n\r\n        if (typeof config.initCallback === 'function') {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    var isPaused;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPaused = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPaused = false;\r\n    };\r\n\r\n    function terminate() {\r\n        if (!worker) {\r\n            return;\r\n        }\r\n\r\n        worker.postMessage(null);\r\n        worker.terminate();\r\n        worker = null;\r\n    }\r\n\r\n    var arrayOfBuffers = [];\r\n\r\n    /**\r\n     * This method stops recording video.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        terminate();\r\n\r\n        this.blob = new Blob(arrayOfBuffers, {\r\n            type: 'video/webm'\r\n        });\r\n\r\n        callback(this.blob);\r\n    };\r\n\r\n    // for debugging\r\n    this.name = 'WebAssemblyRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        arrayOfBuffers = [];\r\n        isPaused = false;\r\n        this.blob = null;\r\n\r\n        // todo: if recording-ON then STOP it first\r\n    };\r\n\r\n    /**\r\n     * @property {Blob} blob - The recorded blob object.\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.stop(function(){\r\n     *     var blob = recorder.blob;\r\n     * });\r\n     */\r\n    this.blob = null;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.WebAssemblyRecorder = WebAssemblyRecorder;\r\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/recordrtc/RecordRTC.js\n// module id = 17\n// module chunks = 0 1","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 18\n// module chunks = 0 1","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/process/browser.js\n// module id = 19\n// module chunks = 0 1","function init(Survey, $) {\n  $ = $ || window.$;\n\n  var widget = {\n    name: \"emotionsratings\",\n    title: \"Emotions Ratings\",\n    iconName: \"icon-emotionsratings\",\n    widgetIsLoaded: function() {\n      return typeof $ == \"function\" && !!$.fn.emotionsRating;\n    },\n    defaultJSON: {\n      choices: [1, 2, 3, 4, 5]\n    },\n    isFit: function(question) {\n      return question.getType() === \"emotionsratings\";\n    },\n    isDefaultRender: false,\n    htmlTemplate: \"<div style='height: 33px'></div>\",\n    activatedByChanged: function(activatedBy) {\n      Survey.JsonObject.metaData.addClass(\n        \"emotionsratings\",\n        [\n          {\n            name: \"hasOther\",\n            visible: false\n          },\n          {\n            name: \"otherText\",\n            visible: false\n          },\n          {\n            name: \"optionsCaption\",\n            visible: false\n          },\n          {\n            name: \"otherErrorText\",\n            visible: false\n          },\n          {\n            name: \"storeOthersAsComment\",\n            visible: false\n          },\n          {\n            name: \"renderAs\",\n            visible: false\n          }\n        ],\n        null,\n        \"dropdown\"\n      );\n      Survey.JsonObject.metaData.addProperties(\"emotionsratings\", [\n        {\n          name: \"emotions:itemvalues\",\n          default: [\"angry\", \"disappointed\", \"meh\", \"happy\", \"inLove\"]\n        },\n        {\n          name: \"emotionSize:number\",\n          default: 30\n        },\n        {\n          name: \"emotionsCount:number\",\n          default: 5\n        },\n        {\n          name: \"bgEmotion\",\n          default: \"happy\"\n        },\n        {\n          name: \"emotionColor\",\n          default: \"#FF0066\"\n        }\n      ]);      \n    },\n    afterRender: function(question, el) {\n      var emotions = (question.emotions || []).map(function(item) { return item.value });\n      if(emotions.length === 0) {\n        emotions = [\"angry\", \"disappointed\", \"meh\", \"happy\", \"inLove\"];\n      }\n      var options = {\n        emotionSize: question.emotionSize,\n        bgEmotion: question.bgEmotion,\n        emotions:  emotions,\n        initialRating: question.value,\n        color: question.emotionColor,\n        count: question.emotionsCount,\n        onUpdate: function(value) {\n          question.value = value;\n        }\n      };\n      initWidget();\n\n      question.valueChangedCallback = initWidget;\n      question.readOnlyChangedCallback = initWidget;\n\n      function initWidget() {\n        el.innerHTML = \"<div></div>\";\n        $(el).off();\n        options.initialRating = question.value || 0;\n        options.disabled = question.isReadOnly;\n        $(el)\n          .find(\"div\")\n          .emotionsRating(options);\n      }\n    },\n    willUnmount: function(question, el) {\n      el.innerHTML = null;\n      $(el).off();\n      question.readOnlyChangedCallback = null;\n      question.valueChangedCallback = null;\n    },\n    pdfQuestionType: \"dropdown\"\n  };\n\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey, window.$);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/emotionsratings.js\n// module id = 20\n// module chunks = 0 12","export { default as icheck } from \"./icheck.js\";\nexport { default as select2 } from \"./select2.js\";\nexport { default as inputmask } from \"./inputmask.js\";\nexport { default as jquerybarrating } from \"./jquery-bar-rating.js\";\nexport { default as jqueryuidatepicker } from \"./jquery-ui-datepicker.js\";\nexport { default as nouislider } from \"./nouislider.js\";\nexport { default as select2tagbox } from \"./select2-tagbox.js\";\nexport { default as sortablejs } from \"./sortablejs.js\";\nexport { default as ckeditor } from \"./ck-editor.js\";\nexport { default as autocomplete } from \"./easy-autocomplete.js\";\nexport { default as prettycheckbox } from \"./pretty-checkbox.js\";\nexport { default as bootstrapslider } from \"./bootstrap-slider.js\";\nexport { default as microphone } from \"./microphone.js\";\nexport { default as emotionsratings } from \"./emotionsratings.js\";\nexport { default as bootstrapdatepicker } from \"./bootstrapdatepicker.js\";\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/surveyjs-widgets.js\n// module id = 21\n// module chunks = 0","function init(Survey, $) {\n    $ = $ || window.$;\n\n    if (!$.fn.bootstrapDP && !!$.fn.datepicker && !!$.fn.datepicker.noConflict) {\n        $.fn.bootstrapDP = $.fn.datepicker.noConflict();\n        if (!$.fn.datepicker) {\n            $.fn.datepicker = $.fn.bootstrapDP;\n        }\n    }\n    var widget = {\n        name: \"bootstrapdatepicker\",\n        title: \"Date picker\",\n        iconName: \"icon-datepicker\",\n        widgetIsLoaded: function () {\n            return !!$.fn.bootstrapDP;\n        },\n        isFit: function (question) {\n            return question.getType() === \"bootstrapdatepicker\";\n        },\n        htmlTemplate:\n            \"<input class='form-control widget-datepicker' type='text' style='width: 100%;'>\",\n        activatedByChanged: function (activatedBy) {\n            Survey.JsonObject.metaData.addClass(\n                \"bootstrapdatepicker\",\n                [\n                    { name: \"inputType\", visible: false },\n                    { name: \"inputFormat\", visible: false },\n                    { name: \"inputMask\", visible: false }\n                ],\n                null,\n                \"text\"\n            );\n            Survey.JsonObject.metaData.addProperties(\"bootstrapdatepicker\", [\n                {\n                    // Can take a string or an Object.\n                    // https://bootstrap-datepicker.readthedocs.io/en/latest/options.html#format\n                    name: \"dateFormat\",\n                    default: \"'mm/dd/yyyy'\"\n                },\n                {\n                    // Can take a Date or a string\n                    // https://bootstrap-datepicker.readthedocs.io/en/latest/options.html#options\n                    name: \"startDate\",\n                    default: \"\"\n                },\n                {\n                    // Can take a Date or a string\n                    // https://bootstrap-datepicker.readthedocs.io/en/latest/options.html#options\n                    name: \"endDate\",\n                    default: \"\"\n                },\n                {\n                    name: \"todayHighlight:boolean\",\n                    default: true,\n                },\n                {\n                    name: \"weekStart:number\",\n                    default: 0\n                },\n                {\n                    name: \"clearBtn:boolean\",\n                    default: false\n                },\n                {\n                    name: \"autoClose:boolean\",\n                    default: true,\n                },\n                {\n                    name: \"daysOfWeekHighlighted:string\",\n                    default: \"\"\n                },\n                {\n                    name: \"disableTouchKeyboard:boolean\",\n                    default: true\n                }\n            ]);\n        },\n        afterRender: function (question, el) {\n            var $el = $(el).is(\".widget-datepicker\")\n                ? $(el)\n                : $(el).find(\".widget-datepicker\");\n\n            var pickerWidget = $el.bootstrapDP({\n                enableOnReadonly: false,\n                format: question.dateFormat,\n                startDate: question.startDate,\n                endDate: question.endDate,\n                todayHighlight: question.todayHighlight,\n                weekStart: question.weekStart,\n                clearBtn: question.clearBtn,\n                autoclose: question.autoClose,\n                daysOfWeekHighlighted: question.daysOfWeekHighlighted,\n                disableTouchKeyboard: question.disableTouchKeyboard\n            })\n            // .on(\"changeDate\", function (e) {\n            //     question.value = moment(e.date).format(\"DD/MM/YYYY\");\n            //     // `e` here contains the extra attributes\n            // })\n            .on(\"change\", function (e) {\n                var newValue = pickerWidget.val();\n                if(question.value != newValue) {\n                    question.value = newValue;\n                }\n            });\n\n            question.valueChangedCallback = function () {\n                pickerWidget.val(question.value);\n                // $el.bootstrapDP('update', moment(question.value, \"DD/MM/YYYY\").toDate());\n            }\n            question.valueChangedCallback();\n            question.readOnlyChangedCallback = function () {\n                if (question.isReadOnly) {\n                    $el.prop('readonly', true);\n                }\n                else {\n                    $el.removeAttr('readonly');\n                }\n            }\n            question.readOnlyChangedCallback();\n\n        },\n        willUnmount: function (question, el) {\n            var $el = $(el).is(\".widget-datepicker\")\n                ? $(el)\n                : $(el).find(\".widget-datepicker\");\n            $el.bootstrapDP(\"destroy\");\n            question.readOnlyChangedCallback = undefined;\n            question.valueChangedCallback = undefined;\n        },\n        pdfQuestionType: \"text\"\n    };\n\n    Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"customtype\");\n}\n\nif (typeof Survey !== \"undefined\") {\n    init(Survey, window.$);\n}\n\nexport default init;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/bootstrapdatepicker.js\n// module id = 22\n// module chunks = 0"],"sourceRoot":""},"metadata":{},"sourceType":"script"}