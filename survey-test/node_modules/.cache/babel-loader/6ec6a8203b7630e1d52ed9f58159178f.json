{"ast":null,"code":"/**\n * jQuery Bar Rating Plugin v1.2.2\n *\n * http://github.com/antennaio/jquery-bar-rating\n *\n * Copyright (c) 2012-2016 Kazik Pietruszewski\n *\n * This plugin is available under the MIT license.\n * http://www.opensource.org/licenses/mit-license.php\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // Node/CommonJS\n    module.exports = factory(require('jquery'));\n  } else {\n    // browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  var BarRating = function () {\n    function BarRating() {\n      var self = this; // wrap element in a wrapper div\n\n      var wrapElement = function () {\n        var classes = ['br-wrapper'];\n\n        if (self.options.theme !== '') {\n          classes.push('br-theme-' + self.options.theme);\n        }\n\n        self.$elem.wrap($('<div />', {\n          'class': classes.join(' ')\n        }));\n      }; // unwrap element\n\n\n      var unwrapElement = function () {\n        self.$elem.unwrap();\n      }; // find option by value\n\n\n      var findOption = function (value) {\n        if ($.isNumeric(value)) {\n          value = Math.floor(value);\n        }\n\n        return $('option[value=\"' + value + '\"]', self.$elem);\n      }; // get initial option\n\n\n      var getInitialOption = function () {\n        var initialRating = self.options.initialRating;\n\n        if (!initialRating) {\n          return $('option:selected', self.$elem);\n        }\n\n        return findOption(initialRating);\n      }; // get empty option\n\n\n      var getEmptyOption = function () {\n        var $emptyOpt = self.$elem.find('option[value=\"' + self.options.emptyValue + '\"]');\n\n        if (!$emptyOpt.length && self.options.allowEmpty) {\n          $emptyOpt = $('<option />', {\n            'value': self.options.emptyValue\n          });\n          return $emptyOpt.prependTo(self.$elem);\n        }\n\n        return $emptyOpt;\n      }; // get data\n\n\n      var getData = function (key) {\n        var data = self.$elem.data('barrating');\n\n        if (typeof key !== 'undefined') {\n          return data[key];\n        }\n\n        return data;\n      }; // set data\n\n\n      var setData = function (key, value) {\n        if (value !== null && typeof value === 'object') {\n          self.$elem.data('barrating', value);\n        } else {\n          self.$elem.data('barrating')[key] = value;\n        }\n      }; // save data on element\n\n\n      var saveDataOnElement = function () {\n        var $opt = getInitialOption();\n        var $emptyOpt = getEmptyOption();\n        var value = $opt.val();\n        var text = $opt.data('html') ? $opt.data('html') : $opt.text(); // if the allowEmpty option is not set let's check if empty option exists in the select field\n\n        var allowEmpty = self.options.allowEmpty !== null ? self.options.allowEmpty : !!$emptyOpt.length;\n        var emptyValue = $emptyOpt.length ? $emptyOpt.val() : null;\n        var emptyText = $emptyOpt.length ? $emptyOpt.text() : null;\n        setData(null, {\n          userOptions: self.options,\n          // initial rating based on the OPTION value\n          ratingValue: value,\n          ratingText: text,\n          // rating will be restored by calling clear method\n          originalRatingValue: value,\n          originalRatingText: text,\n          // allow empty ratings?\n          allowEmpty: allowEmpty,\n          // rating value and text of the empty OPTION\n          emptyRatingValue: emptyValue,\n          emptyRatingText: emptyText,\n          // read-only state\n          readOnly: self.options.readonly,\n          // did the user already select a rating?\n          ratingMade: false\n        });\n      }; // remove data on element\n\n\n      var removeDataOnElement = function () {\n        self.$elem.removeData('barrating');\n      }; // return current rating text\n\n\n      var ratingText = function () {\n        return getData('ratingText');\n      }; // return current rating value\n\n\n      var ratingValue = function () {\n        return getData('ratingValue');\n      }; // build widget and return jQuery element\n\n\n      var buildWidget = function () {\n        var $w = $('<div />', {\n          'class': 'br-widget'\n        }); // create A elements that will replace OPTIONs\n\n        self.$elem.find('option').each(function () {\n          var val, text, html, $a;\n          val = $(this).val(); // create ratings - but only if val is not defined as empty\n\n          if (val !== getData('emptyRatingValue')) {\n            text = $(this).text();\n            html = $(this).data('html');\n\n            if (html) {\n              text = html;\n            }\n\n            $a = $('<a />', {\n              'href': '#',\n              'data-rating-value': val,\n              'data-rating-text': text,\n              'html': self.options.showValues ? text : ''\n            });\n            $w.append($a);\n          }\n        }); // append .br-current-rating div to the widget\n\n        if (self.options.showSelectedRating) {\n          $w.append($('<div />', {\n            'text': '',\n            'class': 'br-current-rating'\n          }));\n        } // additional classes for the widget\n\n\n        if (self.options.reverse) {\n          $w.addClass('br-reverse');\n        }\n\n        if (self.options.readonly) {\n          $w.addClass('br-readonly');\n        }\n\n        return $w;\n      }; // return a jQuery function name depending on the 'reverse' setting\n\n\n      var nextAllorPreviousAll = function () {\n        if (getData('userOptions').reverse) {\n          return 'nextAll';\n        } else {\n          return 'prevAll';\n        }\n      }; // set the value of the select field\n\n\n      var setSelectFieldValue = function (value) {\n        // change selected option\n        findOption(value).prop('selected', true);\n        self.$elem.change();\n      }; // reset select field\n\n\n      var resetSelectField = function () {\n        $('option', self.$elem).prop('selected', function () {\n          return this.defaultSelected;\n        });\n        self.$elem.change();\n      }; // display the currently selected rating\n\n\n      var showSelectedRating = function (text) {\n        // text undefined?\n        text = text ? text : ratingText(); // special case when the selected rating is defined as empty\n\n        if (text == getData('emptyRatingText')) {\n          text = '';\n        } // update .br-current-rating div\n\n\n        if (self.options.showSelectedRating) {\n          self.$elem.parent().find('.br-current-rating').text(text);\n        }\n      }; // return rounded fraction of a value (14.4 -> 40, 0.99 -> 90)\n\n\n      var fraction = function (value) {\n        return Math.round(Math.floor(value * 10) / 10 % 1 * 100);\n      }; // remove all classes from elements\n\n\n      var resetStyle = function () {\n        // remove all classes starting with br-*\n        self.$widget.find('a').removeClass(function (index, classes) {\n          return (classes.match(/(^|\\s)br-\\S+/g) || []).join(' ');\n        });\n      }; // apply style by setting classes on elements\n\n\n      var applyStyle = function () {\n        var $a = self.$widget.find('a[data-rating-value=\"' + ratingValue() + '\"]');\n        var initialRating = getData('userOptions').initialRating;\n        var baseValue = $.isNumeric(ratingValue()) ? ratingValue() : 0;\n        var f = fraction(initialRating);\n        var $all, $fractional;\n        resetStyle(); // add classes\n\n        $a.addClass('br-selected br-current')[nextAllorPreviousAll()]().addClass('br-selected');\n\n        if (!getData('ratingMade') && $.isNumeric(initialRating)) {\n          if (initialRating <= baseValue || !f) {\n            return;\n          }\n\n          $all = self.$widget.find('a');\n          $fractional = $a.length ? $a[getData('userOptions').reverse ? 'prev' : 'next']() : $all[getData('userOptions').reverse ? 'last' : 'first']();\n          $fractional.addClass('br-fractional');\n          $fractional.addClass('br-fractional-' + f);\n        }\n      }; // check if the element is deselectable?\n\n\n      var isDeselectable = function ($element) {\n        if (!getData('allowEmpty') || !getData('userOptions').deselectable) {\n          return false;\n        }\n\n        return ratingValue() == $element.attr('data-rating-value');\n      }; // handle click events\n\n\n      var attachClickHandler = function ($elements) {\n        $elements.on('click.barrating', function (event) {\n          var $a = $(this),\n              options = getData('userOptions'),\n              value,\n              text;\n          event.preventDefault();\n          value = $a.attr('data-rating-value');\n          text = $a.attr('data-rating-text'); // is current and deselectable?\n\n          if (isDeselectable($a)) {\n            value = getData('emptyRatingValue');\n            text = getData('emptyRatingText');\n          } // remember selected rating\n\n\n          setData('ratingValue', value);\n          setData('ratingText', text);\n          setData('ratingMade', true);\n          setSelectFieldValue(value);\n          showSelectedRating(text);\n          applyStyle(); // onSelect callback\n\n          options.onSelect.call(self, ratingValue(), ratingText(), event);\n          return false;\n        });\n      }; // handle mouseenter events\n\n\n      var attachMouseEnterHandler = function ($elements) {\n        $elements.on('mouseenter.barrating', function () {\n          var $a = $(this);\n          resetStyle();\n          $a.addClass('br-active')[nextAllorPreviousAll()]().addClass('br-active');\n          showSelectedRating($a.attr('data-rating-text'));\n        });\n      }; // handle mouseleave events\n\n\n      var attachMouseLeaveHandler = function ($elements) {\n        self.$widget.on('mouseleave.barrating blur.barrating', function () {\n          showSelectedRating();\n          applyStyle();\n        });\n      }; // somewhat primitive way to remove 300ms click delay on touch devices\n      // for a more advanced solution consider setting `fastClicks` option to false\n      // and using a library such as fastclick (https://github.com/ftlabs/fastclick)\n\n\n      var fastClicks = function ($elements) {\n        $elements.on('touchstart.barrating', function (event) {\n          event.preventDefault();\n          event.stopPropagation();\n          $(this).click();\n        });\n      }; // disable clicks\n\n\n      var disableClicks = function ($elements) {\n        $elements.on('click.barrating', function (event) {\n          event.preventDefault();\n        });\n      };\n\n      var attachHandlers = function ($elements) {\n        // attach click event handler\n        attachClickHandler($elements);\n\n        if (self.options.hoverState) {\n          // attach mouseenter event handler\n          attachMouseEnterHandler($elements); // attach mouseleave event handler\n\n          attachMouseLeaveHandler($elements);\n        }\n      };\n\n      var detachHandlers = function ($elements) {\n        // remove event handlers in the \".barrating\" namespace\n        $elements.off('.barrating');\n      };\n\n      var setupHandlers = function (readonly) {\n        var $elements = self.$widget.find('a');\n\n        if (fastClicks) {\n          fastClicks($elements);\n        }\n\n        if (readonly) {\n          detachHandlers($elements);\n          disableClicks($elements);\n        } else {\n          attachHandlers($elements);\n        }\n      };\n\n      this.show = function () {\n        // run only once\n        if (getData()) return; // wrap element\n\n        wrapElement(); // save data\n\n        saveDataOnElement(); // build & append widget to the DOM\n\n        self.$widget = buildWidget();\n        self.$widget.insertAfter(self.$elem);\n        applyStyle();\n        showSelectedRating();\n        setupHandlers(self.options.readonly); // hide the select field\n\n        self.$elem.hide();\n      };\n\n      this.readonly = function (state) {\n        if (typeof state !== 'boolean' || getData('readOnly') == state) return;\n        setupHandlers(state);\n        setData('readOnly', state);\n        self.$widget.toggleClass('br-readonly');\n      };\n\n      this.set = function (value) {\n        var options = getData('userOptions');\n        if (self.$elem.find('option[value=\"' + value + '\"]').length === 0) return; // set data\n\n        setData('ratingValue', value);\n        setData('ratingText', self.$elem.find('option[value=\"' + value + '\"]').text());\n        setData('ratingMade', true);\n        setSelectFieldValue(ratingValue());\n        showSelectedRating(ratingText());\n        applyStyle(); // onSelect callback\n\n        if (!options.silent) {\n          options.onSelect.call(this, ratingValue(), ratingText());\n        }\n      };\n\n      this.clear = function () {\n        var options = getData('userOptions'); // restore original data\n\n        setData('ratingValue', getData('originalRatingValue'));\n        setData('ratingText', getData('originalRatingText'));\n        setData('ratingMade', false);\n        resetSelectField();\n        showSelectedRating(ratingText());\n        applyStyle(); // onClear callback\n\n        options.onClear.call(this, ratingValue(), ratingText());\n      };\n\n      this.destroy = function () {\n        var value = ratingValue();\n        var text = ratingText();\n        var options = getData('userOptions'); // detach handlers\n\n        detachHandlers(self.$widget.find('a')); // remove widget\n\n        self.$widget.remove(); // remove data\n\n        removeDataOnElement(); // unwrap the element\n\n        unwrapElement(); // show the element\n\n        self.$elem.show(); // onDestroy callback\n\n        options.onDestroy.call(this, value, text);\n      };\n    }\n\n    BarRating.prototype.init = function (options, elem) {\n      this.$elem = $(elem);\n      this.options = $.extend({}, $.fn.barrating.defaults, options);\n      return this.options;\n    };\n\n    return BarRating;\n  }();\n\n  $.fn.barrating = function (method, options) {\n    return this.each(function () {\n      var plugin = new BarRating(); // plugin works with select fields\n\n      if (!$(this).is('select')) {\n        $.error('Sorry, this plugin only works with select fields.');\n      } // method supplied\n\n\n      if (plugin.hasOwnProperty(method)) {\n        plugin.init(options, this);\n\n        if (method === 'show') {\n          return plugin.show(options);\n        } else {\n          // plugin exists?\n          if (plugin.$elem.data('barrating')) {\n            plugin.$widget = $(this).next('.br-widget');\n            return plugin[method](options);\n          }\n        } // no method supplied or only options supplied\n\n      } else if (typeof method === 'object' || !method) {\n        options = method;\n        plugin.init(options, this);\n        return plugin.show();\n      } else {\n        $.error('Method ' + method + ' does not exist on jQuery.barrating');\n      }\n    });\n  };\n\n  $.fn.barrating.defaults = {\n    theme: '',\n    initialRating: null,\n    // initial rating\n    allowEmpty: null,\n    // allow empty ratings?\n    emptyValue: '',\n    // this is the expected value of the empty rating\n    showValues: false,\n    // display rating values on the bars?\n    showSelectedRating: true,\n    // append a div with a rating to the widget?\n    deselectable: true,\n    // allow to deselect ratings?\n    reverse: false,\n    // reverse the rating?\n    readonly: false,\n    // make the rating ready-only?\n    fastClicks: true,\n    // remove 300ms click delay on touch devices?\n    hoverState: true,\n    // change state on hover?\n    silent: false,\n    // supress callbacks when controlling ratings programatically\n    onSelect: function (value, text, event) {},\n    // callback fired when a rating is selected\n    onClear: function (value, text) {},\n    // callback fired when a rating is cleared\n    onDestroy: function (value, text) {} // callback fired when a widget is destroyed\n\n  };\n  $.fn.barrating.BarRating = BarRating;\n});","map":{"version":3,"sources":["/Users/fjorgedigital/Projects/_Prototypes/SurveyJs/survey-test/node_modules/jquery-bar-rating/jquery.barrating.js"],"names":["factory","define","amd","module","exports","require","jQuery","$","BarRating","self","wrapElement","classes","options","theme","push","$elem","wrap","join","unwrapElement","unwrap","findOption","value","isNumeric","Math","floor","getInitialOption","initialRating","getEmptyOption","$emptyOpt","find","emptyValue","length","allowEmpty","prependTo","getData","key","data","setData","saveDataOnElement","$opt","val","text","emptyText","userOptions","ratingValue","ratingText","originalRatingValue","originalRatingText","emptyRatingValue","emptyRatingText","readOnly","readonly","ratingMade","removeDataOnElement","removeData","buildWidget","$w","each","html","$a","showValues","append","showSelectedRating","reverse","addClass","nextAllorPreviousAll","setSelectFieldValue","prop","change","resetSelectField","defaultSelected","parent","fraction","round","resetStyle","$widget","removeClass","index","match","applyStyle","baseValue","f","$all","$fractional","isDeselectable","$element","deselectable","attr","attachClickHandler","$elements","on","event","preventDefault","onSelect","call","attachMouseEnterHandler","attachMouseLeaveHandler","fastClicks","stopPropagation","click","disableClicks","attachHandlers","hoverState","detachHandlers","off","setupHandlers","show","insertAfter","hide","state","toggleClass","set","silent","clear","onClear","destroy","remove","onDestroy","prototype","init","elem","extend","fn","barrating","defaults","method","plugin","is","error","hasOwnProperty","next"],"mappings":"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","sourcesContent":["/**\n * jQuery Bar Rating Plugin v1.2.2\n *\n * http://github.com/antennaio/jquery-bar-rating\n *\n * Copyright (c) 2012-2016 Kazik Pietruszewski\n *\n * This plugin is available under the MIT license.\n * http://www.opensource.org/licenses/mit-license.php\n */\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node/CommonJS\n        module.exports = factory(require('jquery'));\n    } else {\n        // browser globals\n        factory(jQuery);\n    }\n}(function ($) {\n\n    var BarRating = (function() {\n\n        function BarRating() {\n            var self = this;\n\n            // wrap element in a wrapper div\n            var wrapElement = function() {\n                var classes = ['br-wrapper'];\n\n                if (self.options.theme !== '') {\n                    classes.push('br-theme-' + self.options.theme);\n                }\n\n                self.$elem.wrap($('<div />', {\n                    'class': classes.join(' ')\n                }));\n            };\n\n            // unwrap element\n            var unwrapElement = function() {\n                self.$elem.unwrap();\n            };\n\n            // find option by value\n            var findOption = function(value) {\n                if ($.isNumeric(value)) {\n                    value = Math.floor(value);\n                }\n\n                return $('option[value=\"' + value  + '\"]', self.$elem);\n            };\n\n            // get initial option\n            var getInitialOption = function() {\n                var initialRating = self.options.initialRating;\n\n                if (!initialRating) {\n                    return $('option:selected', self.$elem);\n                }\n\n                return findOption(initialRating);\n            };\n\n            // get empty option\n            var getEmptyOption = function() {\n                var $emptyOpt = self.$elem.find('option[value=\"' + self.options.emptyValue + '\"]');\n\n                if (!$emptyOpt.length && self.options.allowEmpty) {\n                    $emptyOpt = $('<option />', { 'value': self.options.emptyValue });\n\n                    return $emptyOpt.prependTo(self.$elem);\n                }\n\n                return $emptyOpt;\n            };\n\n            // get data\n            var getData = function(key) {\n                var data = self.$elem.data('barrating');\n\n                if (typeof key !== 'undefined') {\n                    return data[key];\n                }\n\n                return data;\n            };\n\n            // set data\n            var setData = function(key, value) {\n                if (value !== null && typeof value === 'object') {\n                    self.$elem.data('barrating', value);\n                } else {\n                    self.$elem.data('barrating')[key] = value;\n                }\n            };\n\n            // save data on element\n            var saveDataOnElement = function() {\n                var $opt = getInitialOption();\n                var $emptyOpt = getEmptyOption();\n\n                var value = $opt.val();\n                var text = $opt.data('html') ? $opt.data('html') : $opt.text();\n\n                // if the allowEmpty option is not set let's check if empty option exists in the select field\n                var allowEmpty = (self.options.allowEmpty !== null) ?\n                    self.options.allowEmpty :\n                    !!$emptyOpt.length;\n\n                var emptyValue = ($emptyOpt.length) ? $emptyOpt.val() : null;\n                var emptyText = ($emptyOpt.length) ? $emptyOpt.text() : null;\n\n                setData(null, {\n                    userOptions: self.options,\n\n                    // initial rating based on the OPTION value\n                    ratingValue: value,\n                    ratingText: text,\n\n                    // rating will be restored by calling clear method\n                    originalRatingValue: value,\n                    originalRatingText: text,\n\n                    // allow empty ratings?\n                    allowEmpty: allowEmpty,\n\n                    // rating value and text of the empty OPTION\n                    emptyRatingValue: emptyValue,\n                    emptyRatingText: emptyText,\n\n                    // read-only state\n                    readOnly: self.options.readonly,\n\n                    // did the user already select a rating?\n                    ratingMade: false\n                });\n            };\n\n            // remove data on element\n            var removeDataOnElement = function() {\n                self.$elem.removeData('barrating');\n            };\n\n            // return current rating text\n            var ratingText = function() {\n                return getData('ratingText');\n            };\n\n            // return current rating value\n            var ratingValue = function() {\n                return getData('ratingValue');\n            };\n\n            // build widget and return jQuery element\n            var buildWidget = function() {\n                var $w = $('<div />', { 'class': 'br-widget' });\n\n                // create A elements that will replace OPTIONs\n                self.$elem.find('option').each(function() {\n                    var val, text, html, $a;\n\n                    val = $(this).val();\n\n                    // create ratings - but only if val is not defined as empty\n                    if (val !== getData('emptyRatingValue')) {\n                        text = $(this).text();\n                        html = $(this).data('html');\n                        if (html) { text = html; }\n\n                        $a = $('<a />', {\n                            'href': '#',\n                            'data-rating-value': val,\n                            'data-rating-text': text,\n                            'html': (self.options.showValues) ? text : ''\n                        });\n\n                        $w.append($a);\n                    }\n\n                });\n\n                // append .br-current-rating div to the widget\n                if (self.options.showSelectedRating) {\n                    $w.append($('<div />', { 'text': '', 'class': 'br-current-rating' }));\n                }\n\n                // additional classes for the widget\n                if (self.options.reverse) {\n                    $w.addClass('br-reverse');\n                }\n\n                if (self.options.readonly) {\n                    $w.addClass('br-readonly');\n                }\n\n                return $w;\n            };\n\n            // return a jQuery function name depending on the 'reverse' setting\n            var nextAllorPreviousAll = function() {\n                if (getData('userOptions').reverse) {\n                    return 'nextAll';\n                } else {\n                    return 'prevAll';\n                }\n            };\n\n            // set the value of the select field\n            var setSelectFieldValue = function(value) {\n                // change selected option\n                findOption(value).prop('selected', true);\n\n                self.$elem.change();\n            };\n\n            // reset select field\n            var resetSelectField = function() {\n                $('option', self.$elem).prop('selected', function() {\n                    return this.defaultSelected;\n                });\n\n                self.$elem.change();\n            };\n\n            // display the currently selected rating\n            var showSelectedRating = function(text) {\n                // text undefined?\n                text = text ? text : ratingText();\n\n                // special case when the selected rating is defined as empty\n                if (text == getData('emptyRatingText')) {\n                    text = '';\n                }\n\n                // update .br-current-rating div\n                if (self.options.showSelectedRating) {\n                    self.$elem.parent().find('.br-current-rating').text(text);\n                }\n            };\n\n            // return rounded fraction of a value (14.4 -> 40, 0.99 -> 90)\n            var fraction = function(value) {\n                return Math.round(((Math.floor(value * 10) / 10) % 1) * 100);\n            };\n\n            // remove all classes from elements\n            var resetStyle = function() {\n                // remove all classes starting with br-*\n                self.$widget.find('a').removeClass(function(index, classes) {\n                    return (classes.match(/(^|\\s)br-\\S+/g) || []).join(' ');\n                });\n            };\n\n            // apply style by setting classes on elements\n            var applyStyle = function() {\n                var $a = self.$widget.find('a[data-rating-value=\"' + ratingValue() + '\"]');\n                var initialRating = getData('userOptions').initialRating;\n                var baseValue = $.isNumeric(ratingValue()) ? ratingValue() : 0;\n                var f = fraction(initialRating);\n                var $all, $fractional;\n\n                resetStyle();\n\n                // add classes\n                $a.addClass('br-selected br-current')[nextAllorPreviousAll()]()\n                    .addClass('br-selected');\n\n                if (!getData('ratingMade') && $.isNumeric(initialRating)) {\n                    if ((initialRating <= baseValue) || !f) {\n                        return;\n                    }\n\n                    $all = self.$widget.find('a');\n\n                    $fractional = ($a.length) ?\n                        $a[(getData('userOptions').reverse) ? 'prev' : 'next']() :\n                        $all[(getData('userOptions').reverse) ? 'last' : 'first']();\n\n                    $fractional.addClass('br-fractional');\n                    $fractional.addClass('br-fractional-' + f);\n                }\n            };\n\n            // check if the element is deselectable?\n            var isDeselectable = function($element) {\n                if (!getData('allowEmpty') || !getData('userOptions').deselectable) {\n                    return false;\n                }\n\n                return (ratingValue() == $element.attr('data-rating-value'));\n            };\n\n            // handle click events\n            var attachClickHandler = function($elements) {\n                $elements.on('click.barrating', function(event) {\n                    var $a = $(this),\n                        options = getData('userOptions'),\n                        value,\n                        text;\n\n                    event.preventDefault();\n\n                    value = $a.attr('data-rating-value');\n                    text = $a.attr('data-rating-text');\n\n                    // is current and deselectable?\n                    if (isDeselectable($a)) {\n                        value = getData('emptyRatingValue');\n                        text = getData('emptyRatingText');\n                    }\n\n                    // remember selected rating\n                    setData('ratingValue', value);\n                    setData('ratingText', text);\n                    setData('ratingMade', true);\n\n                    setSelectFieldValue(value);\n                    showSelectedRating(text);\n\n                    applyStyle();\n\n                    // onSelect callback\n                    options.onSelect.call(\n                        self,\n                        ratingValue(),\n                        ratingText(),\n                        event\n                    );\n\n                    return false;\n                });\n            };\n\n            // handle mouseenter events\n            var attachMouseEnterHandler = function($elements) {\n                $elements.on('mouseenter.barrating', function() {\n                    var $a = $(this);\n\n                    resetStyle();\n\n                    $a.addClass('br-active')[nextAllorPreviousAll()]()\n                        .addClass('br-active');\n\n                    showSelectedRating($a.attr('data-rating-text'));\n                });\n            };\n\n            // handle mouseleave events\n            var attachMouseLeaveHandler = function($elements) {\n                self.$widget.on('mouseleave.barrating blur.barrating', function() {\n                    showSelectedRating();\n                    applyStyle();\n                });\n            };\n\n            // somewhat primitive way to remove 300ms click delay on touch devices\n            // for a more advanced solution consider setting `fastClicks` option to false\n            // and using a library such as fastclick (https://github.com/ftlabs/fastclick)\n            var fastClicks = function($elements) {\n                $elements.on('touchstart.barrating', function(event) {\n                    event.preventDefault();\n                    event.stopPropagation();\n\n                    $(this).click();\n                });\n            };\n\n            // disable clicks\n            var disableClicks = function($elements) {\n                $elements.on('click.barrating', function(event) {\n                    event.preventDefault();\n                });\n            };\n\n            var attachHandlers = function($elements) {\n                // attach click event handler\n                attachClickHandler($elements);\n\n                if (self.options.hoverState) {\n                    // attach mouseenter event handler\n                    attachMouseEnterHandler($elements);\n\n                    // attach mouseleave event handler\n                    attachMouseLeaveHandler($elements);\n                }\n            };\n\n            var detachHandlers = function($elements) {\n                // remove event handlers in the \".barrating\" namespace\n                $elements.off('.barrating');\n            };\n\n            var setupHandlers = function(readonly) {\n                var $elements = self.$widget.find('a');\n\n                if (fastClicks) {\n                    fastClicks($elements);\n                }\n\n                if (readonly) {\n                    detachHandlers($elements);\n                    disableClicks($elements);\n                } else {\n                    attachHandlers($elements);\n                }\n            };\n\n            this.show = function() {\n                // run only once\n                if (getData()) return;\n\n                // wrap element\n                wrapElement();\n\n                // save data\n                saveDataOnElement();\n\n                // build & append widget to the DOM\n                self.$widget = buildWidget();\n                self.$widget.insertAfter(self.$elem);\n\n                applyStyle();\n\n                showSelectedRating();\n\n                setupHandlers(self.options.readonly);\n\n                // hide the select field\n                self.$elem.hide();\n            };\n\n            this.readonly = function(state) {\n                if (typeof state !== 'boolean' || getData('readOnly') == state) return;\n\n                setupHandlers(state);\n                setData('readOnly', state);\n                self.$widget.toggleClass('br-readonly');\n            };\n\n            this.set = function(value) {\n                var options = getData('userOptions');\n\n                if (self.$elem.find('option[value=\"' + value + '\"]').length === 0) return;\n\n                // set data\n                setData('ratingValue', value);\n                setData('ratingText', self.$elem.find('option[value=\"' + value + '\"]').text());\n                setData('ratingMade', true);\n\n                setSelectFieldValue(ratingValue());\n                showSelectedRating(ratingText());\n\n                applyStyle();\n\n                // onSelect callback\n                if (!options.silent) {\n                    options.onSelect.call(\n                        this,\n                        ratingValue(),\n                        ratingText()\n                    );\n                }\n            };\n\n            this.clear = function() {\n                var options = getData('userOptions');\n\n                // restore original data\n                setData('ratingValue', getData('originalRatingValue'));\n                setData('ratingText', getData('originalRatingText'));\n                setData('ratingMade', false);\n\n                resetSelectField();\n                showSelectedRating(ratingText());\n\n                applyStyle();\n\n                // onClear callback\n                options.onClear.call(\n                    this,\n                    ratingValue(),\n                    ratingText()\n                );\n            };\n\n            this.destroy = function() {\n                var value = ratingValue();\n                var text = ratingText();\n                var options = getData('userOptions');\n\n                // detach handlers\n                detachHandlers(self.$widget.find('a'));\n\n                // remove widget\n                self.$widget.remove();\n\n                // remove data\n                removeDataOnElement();\n\n                // unwrap the element\n                unwrapElement();\n\n                // show the element\n                self.$elem.show();\n\n                // onDestroy callback\n                options.onDestroy.call(\n                    this,\n                    value,\n                    text\n                );\n            };\n        }\n\n        BarRating.prototype.init = function (options, elem) {\n            this.$elem = $(elem);\n            this.options = $.extend({}, $.fn.barrating.defaults, options);\n\n            return this.options;\n        };\n\n        return BarRating;\n    })();\n\n    $.fn.barrating = function (method, options) {\n        return this.each(function () {\n            var plugin = new BarRating();\n\n            // plugin works with select fields\n            if (!$(this).is('select')) {\n                $.error('Sorry, this plugin only works with select fields.');\n            }\n\n            // method supplied\n            if (plugin.hasOwnProperty(method)) {\n                plugin.init(options, this);\n                if (method === 'show') {\n                    return plugin.show(options);\n                } else {\n                    // plugin exists?\n                    if (plugin.$elem.data('barrating')) {\n                        plugin.$widget = $(this).next('.br-widget');\n                        return plugin[method](options);\n                    }\n                }\n\n            // no method supplied or only options supplied\n            } else if (typeof method === 'object' || !method) {\n                options = method;\n                plugin.init(options, this);\n                return plugin.show();\n\n            } else {\n                $.error('Method ' + method + ' does not exist on jQuery.barrating');\n            }\n        });\n    };\n\n    $.fn.barrating.defaults = {\n        theme:'',\n        initialRating:null, // initial rating\n        allowEmpty:null, // allow empty ratings?\n        emptyValue:'', // this is the expected value of the empty rating\n        showValues:false, // display rating values on the bars?\n        showSelectedRating:true, // append a div with a rating to the widget?\n        deselectable:true, // allow to deselect ratings?\n        reverse:false, // reverse the rating?\n        readonly:false, // make the rating ready-only?\n        fastClicks:true, // remove 300ms click delay on touch devices?\n        hoverState:true, // change state on hover?\n        silent:false, // supress callbacks when controlling ratings programatically\n        onSelect:function (value, text, event) {\n        }, // callback fired when a rating is selected\n        onClear:function (value, text) {\n        }, // callback fired when a rating is cleared\n        onDestroy:function (value, text) {\n        } // callback fired when a widget is destroyed\n    };\n\n    $.fn.barrating.BarRating = BarRating;\n\n}));\n"]},"metadata":{},"sourceType":"script"}